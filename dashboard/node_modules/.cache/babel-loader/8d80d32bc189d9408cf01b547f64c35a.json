{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { setTheme } from '@app/store/slices/themeSlice';\nimport { useAppDispatch, useAppSelector } from '@app/hooks/reduxHooks';\nimport { Dates } from '@app/constants/Dates';\n\nvar getNextTime = function getNextTime(ms) {\n  var now = Date.now();\n  var clearDate = Dates.getClearDate();\n  var nextTime = clearDate.add(ms, 'ms');\n  var delta = +nextTime - now;\n  return delta < 0 ? delta + 24 * 3600 * 1000 : delta;\n};\n\nvar timeoutNightStarts = null;\nvar timeoutNightEnds = null;\nexport var useAutoNightMode = function useAutoNightMode() {\n  _s();\n\n  var dispatch = useAppDispatch();\n  var nightModeState = useAppSelector(function (state) {\n    return state.nightMode;\n  });\n  var isNightMode = nightModeState.isNightMode;\n  var nightTime = nightModeState.nightTime;\n  useEffect(function () {\n    timeoutNightStarts && clearTimeout(timeoutNightStarts);\n    timeoutNightEnds && clearTimeout(timeoutNightEnds);\n\n    if (isNightMode) {\n      var runTimeoutStart = function runTimeoutStart() {\n        dispatch(setTheme('dark'));\n        timeoutNightStarts = setTimeout(runTimeoutStart, 24 * 3600 * 1000);\n      };\n\n      var nextStartTime = getNextTime(nightTime[0]);\n      timeoutNightStarts = setTimeout(runTimeoutStart, nextStartTime);\n\n      var runTimeoutEnd = function runTimeoutEnd() {\n        dispatch(setTheme('light'));\n        timeoutNightEnds = setTimeout(runTimeoutEnd, 24 * 3600 * 1000);\n      };\n\n      var nextEndTime = getNextTime(nightTime[1]);\n      nextEndTime = nextStartTime > nextEndTime ? nextEndTime + 24 * 3600 * 1000 : nextEndTime;\n      timeoutNightEnds = setTimeout(runTimeoutEnd, nextEndTime);\n    }\n\n    return function () {\n      timeoutNightStarts && clearTimeout(timeoutNightStarts);\n      timeoutNightEnds && clearTimeout(timeoutNightEnds);\n    };\n  }, [dispatch, isNightMode, nightTime]);\n};\n\n_s(useAutoNightMode, \"+lWWW8Ujn/wocJ3Vl8RDkhgeQ1U=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});","map":{"version":3,"sources":["/home/tj/fl-carla/dashboard/src/hooks/useAutoNightMode.ts"],"names":["useEffect","setTheme","useAppDispatch","useAppSelector","Dates","getNextTime","ms","now","Date","clearDate","getClearDate","nextTime","add","delta","timeoutNightStarts","timeoutNightEnds","useAutoNightMode","dispatch","nightModeState","state","nightMode","isNightMode","nightTime","clearTimeout","runTimeoutStart","setTimeout","nextStartTime","runTimeoutEnd","nextEndTime"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,8BAAzB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,uBAA/C;AACA,SAASC,KAAT,QAAsB,sBAAtB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD,EAAgB;AAClC,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,MAAME,SAAS,GAAGL,KAAK,CAACM,YAAN,EAAlB;AACA,MAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAV,CAAcN,EAAd,EAAkB,IAAlB,CAAjB;AAEA,MAAMO,KAAK,GAAG,CAACF,QAAD,GAAYJ,GAA1B;AAEA,SAAOM,KAAK,GAAG,CAAR,GAAYA,KAAK,GAAG,KAAK,IAAL,GAAY,IAAhC,GAAuCA,KAA9C;AACD,CARD;;AAUA,IAAIC,kBAAwD,GAAG,IAA/D;AACA,IAAIC,gBAAsD,GAAG,IAA7D;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAY;AAAA;;AAC1C,MAAMC,QAAQ,GAAGf,cAAc,EAA/B;AACA,MAAMgB,cAAc,GAAGf,cAAc,CAAC,UAACgB,KAAD;AAAA,WAAWA,KAAK,CAACC,SAAjB;AAAA,GAAD,CAArC;AACA,MAAMC,WAAW,GAAGH,cAAc,CAACG,WAAnC;AACA,MAAMC,SAAS,GAAGJ,cAAc,CAACI,SAAjC;AAEAtB,EAAAA,SAAS,CAAC,YAAM;AACdc,IAAAA,kBAAkB,IAAIS,YAAY,CAACT,kBAAD,CAAlC;AACAC,IAAAA,gBAAgB,IAAIQ,YAAY,CAACR,gBAAD,CAAhC;;AAEA,QAAIM,WAAJ,EAAiB;AACf,UAAMG,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BP,QAAAA,QAAQ,CAAChB,QAAQ,CAAC,MAAD,CAAT,CAAR;AACAa,QAAAA,kBAAkB,GAAGW,UAAU,CAACD,eAAD,EAAkB,KAAK,IAAL,GAAY,IAA9B,CAA/B;AACD,OAHD;;AAKA,UAAME,aAAa,GAAGrB,WAAW,CAACiB,SAAS,CAAC,CAAD,CAAV,CAAjC;AACAR,MAAAA,kBAAkB,GAAGW,UAAU,CAACD,eAAD,EAAkBE,aAAlB,CAA/B;;AAEA,UAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BV,QAAAA,QAAQ,CAAChB,QAAQ,CAAC,OAAD,CAAT,CAAR;AACAc,QAAAA,gBAAgB,GAAGU,UAAU,CAACE,aAAD,EAAgB,KAAK,IAAL,GAAY,IAA5B,CAA7B;AACD,OAHD;;AAKA,UAAIC,WAAW,GAAGvB,WAAW,CAACiB,SAAS,CAAC,CAAD,CAAV,CAA7B;AACAM,MAAAA,WAAW,GAAGF,aAAa,GAAGE,WAAhB,GAA8BA,WAAW,GAAG,KAAK,IAAL,GAAY,IAAxD,GAA+DA,WAA7E;AAEAb,MAAAA,gBAAgB,GAAGU,UAAU,CAACE,aAAD,EAAgBC,WAAhB,CAA7B;AACD;;AAED,WAAO,YAAM;AACXd,MAAAA,kBAAkB,IAAIS,YAAY,CAACT,kBAAD,CAAlC;AACAC,MAAAA,gBAAgB,IAAIQ,YAAY,CAACR,gBAAD,CAAhC;AACD,KAHD;AAID,GA5BQ,EA4BN,CAACE,QAAD,EAAWI,WAAX,EAAwBC,SAAxB,CA5BM,CAAT;AA6BD,CAnCM;;GAAMN,gB;UACMd,c,EACMC,c","sourcesContent":["import { useEffect } from 'react';\nimport { setTheme } from '@app/store/slices/themeSlice';\nimport { useAppDispatch, useAppSelector } from '@app/hooks/reduxHooks';\nimport { Dates } from '@app/constants/Dates';\n\nconst getNextTime = (ms: number) => {\n  const now = Date.now();\n  const clearDate = Dates.getClearDate();\n  const nextTime = clearDate.add(ms, 'ms');\n\n  const delta = +nextTime - now;\n\n  return delta < 0 ? delta + 24 * 3600 * 1000 : delta;\n};\n\nlet timeoutNightStarts: null | ReturnType<typeof setTimeout> = null;\nlet timeoutNightEnds: null | ReturnType<typeof setTimeout> = null;\n\nexport const useAutoNightMode = (): void => {\n  const dispatch = useAppDispatch();\n  const nightModeState = useAppSelector((state) => state.nightMode);\n  const isNightMode = nightModeState.isNightMode;\n  const nightTime = nightModeState.nightTime;\n\n  useEffect(() => {\n    timeoutNightStarts && clearTimeout(timeoutNightStarts);\n    timeoutNightEnds && clearTimeout(timeoutNightEnds);\n\n    if (isNightMode) {\n      const runTimeoutStart = () => {\n        dispatch(setTheme('dark'));\n        timeoutNightStarts = setTimeout(runTimeoutStart, 24 * 3600 * 1000);\n      };\n\n      const nextStartTime = getNextTime(nightTime[0]);\n      timeoutNightStarts = setTimeout(runTimeoutStart, nextStartTime);\n\n      const runTimeoutEnd = () => {\n        dispatch(setTheme('light'));\n        timeoutNightEnds = setTimeout(runTimeoutEnd, 24 * 3600 * 1000);\n      };\n\n      let nextEndTime = getNextTime(nightTime[1]);\n      nextEndTime = nextStartTime > nextEndTime ? nextEndTime + 24 * 3600 * 1000 : nextEndTime;\n\n      timeoutNightEnds = setTimeout(runTimeoutEnd, nextEndTime);\n    }\n\n    return () => {\n      timeoutNightStarts && clearTimeout(timeoutNightStarts);\n      timeoutNightEnds && clearTimeout(timeoutNightEnds);\n    };\n  }, [dispatch, isNightMode, nightTime]);\n};\n"]},"metadata":{},"sourceType":"module"}