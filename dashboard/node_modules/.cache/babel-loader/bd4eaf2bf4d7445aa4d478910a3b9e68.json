{"ast":null,"code":"var _jsxFileName = \"D:\\\\fl-carla\\\\src\\\\components\\\\apps\\\\kanban\\\\LaneHeader\\\\LaneHeader.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport InlineInput from 'react-trello/dist/widgets/InlineInput';\nimport * as S from './LaneHeader.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport var LaneHeader = function LaneHeader(_ref) {\n  _s();\n\n  var updateTitle = _ref.updateTitle,\n      onDoubleClick = _ref.onDoubleClick,\n      _ref$editLaneTitle = _ref.editLaneTitle,\n      editLaneTitle = _ref$editLaneTitle === void 0 ? false : _ref$editLaneTitle,\n      title = _ref.title,\n      style = _ref.style,\n      cards = _ref.cards;\n  var numberOfCards = useMemo(function () {\n    return cards !== null && cards !== void 0 && cards.length ? \"\".concat(cards.length) : '';\n  }, [cards === null || cards === void 0 ? void 0 : cards.length]);\n  return /*#__PURE__*/_jsxDEV(S.Header, {\n    onDoubleClick: onDoubleClick,\n    editLaneTitle: editLaneTitle,\n    style: style,\n    children: /*#__PURE__*/_jsxDEV(S.Title, {\n      children: editLaneTitle ? /*#__PURE__*/_jsxDEV(InlineInput, {\n        value: title,\n        border: true,\n        placeholder: title,\n        resize: \"vertical\",\n        onSave: updateTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, _this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [title, cards.length ? /*#__PURE__*/_jsxDEV(S.Dot, {\n          children: \"\\xB7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 29\n        }, _this) : '', numberOfCards]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(LaneHeader, \"Ovu+0+HJEyyxvtwSx82EBqrs2rM=\");\n\n_c = LaneHeader;\n\nvar _c;\n\n$RefreshReg$(_c, \"LaneHeader\");","map":{"version":3,"sources":["D:/fl-carla/src/components/apps/kanban/LaneHeader/LaneHeader.tsx"],"names":["React","useMemo","InlineInput","S","LaneHeader","updateTitle","onDoubleClick","editLaneTitle","title","style","cards","numberOfCards","length"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,OAAO,KAAKC,CAAZ,MAAmB,qBAAnB;;;AAYA,OAAO,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,OAO/C;AAAA;;AAAA,MANJC,WAMI,QANJA,WAMI;AAAA,MALJC,aAKI,QALJA,aAKI;AAAA,gCAJJC,aAII;AAAA,MAJJA,aAII,mCAJY,KAIZ;AAAA,MAHJC,KAGI,QAHJA,KAGI;AAAA,MAFJC,KAEI,QAFJA,KAEI;AAAA,MADJC,KACI,QADJA,KACI;AACJ,MAAMC,aAAa,GAAGV,OAAO,CAAC;AAAA,WAAOS,KAAK,SAAL,IAAAA,KAAK,WAAL,IAAAA,KAAK,CAAEE,MAAP,aAAmBF,KAAK,CAACE,MAAzB,IAAoC,EAA3C;AAAA,GAAD,EAAiD,CAACF,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEE,MAAR,CAAjD,CAA7B;AACA,sBACE,QAAC,CAAD,CAAG,MAAH;AAAU,IAAA,aAAa,EAAEN,aAAzB;AAAwC,IAAA,aAAa,EAAEC,aAAvD;AAAsE,IAAA,KAAK,EAAEE,KAA7E;AAAA,2BACE,QAAC,CAAD,CAAG,KAAH;AAAA,gBACGF,aAAa,gBACZ,QAAC,WAAD;AAAa,QAAA,KAAK,EAAEC,KAApB;AAA2B,QAAA,MAAM,MAAjC;AAAkC,QAAA,WAAW,EAAEA,KAA/C;AAAsD,QAAA,MAAM,EAAC,UAA7D;AAAwE,QAAA,MAAM,EAAEH;AAAhF;AAAA;AAAA;AAAA;AAAA,eADY,gBAGZ;AAAA,mBACGG,KADH,EAEGE,KAAK,CAACE,MAAN,gBAAe,QAAC,CAAD,CAAG,GAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAf,GAAkC,EAFrC,EAGGD,aAHH;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAeD,CAxBM;;GAAMP,U;;KAAAA,U","sourcesContent":["import React, { useMemo } from 'react';\r\nimport InlineInput from 'react-trello/dist/widgets/InlineInput';\r\nimport * as S from './LaneHeader.styles';\r\nimport { CardState } from '../interfaces';\r\n\r\ninterface LaneHeaderProps {\r\n  updateTitle: () => void;\r\n  editLaneTitle: boolean;\r\n  style: CSSStyleSheet;\r\n  title: string;\r\n  onDoubleClick: () => void;\r\n  cards: Array<CardState>;\r\n}\r\n\r\nexport const LaneHeader: React.FC<LaneHeaderProps> = ({\r\n  updateTitle,\r\n  onDoubleClick,\r\n  editLaneTitle = false,\r\n  title,\r\n  style,\r\n  cards,\r\n}) => {\r\n  const numberOfCards = useMemo(() => (cards?.length ? `${cards.length}` : ''), [cards?.length]);\r\n  return (\r\n    <S.Header onDoubleClick={onDoubleClick} editLaneTitle={editLaneTitle} style={style}>\r\n      <S.Title>\r\n        {editLaneTitle ? (\r\n          <InlineInput value={title} border placeholder={title} resize=\"vertical\" onSave={updateTitle} />\r\n        ) : (\r\n          <>\r\n            {title}\r\n            {cards.length ? <S.Dot>Â·</S.Dot> : ''}\r\n            {numberOfCards}\r\n          </>\r\n        )}\r\n      </S.Title>\r\n    </S.Header>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}