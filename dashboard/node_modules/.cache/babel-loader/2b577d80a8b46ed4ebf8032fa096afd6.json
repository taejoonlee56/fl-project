{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport usePhoneDigits from './usePhoneDigits';\n\nfunction PhoneInput(_ref, ref) {\n  var Component = _ref.Component,\n      country = _ref.country,\n      defaultCountry = _ref.defaultCountry,\n      useNationalFormatForDefaultCountryValue = _ref.useNationalFormatForDefaultCountryValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      metadata = _ref.metadata,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      rest = _objectWithoutProperties(_ref, [\"Component\", \"country\", \"defaultCountry\", \"useNationalFormatForDefaultCountryValue\", \"value\", \"onChange\", \"metadata\", \"international\", \"withCountryCallingCode\"]); // \"Phone digits\" includes not only \"digits\" but also a `+` sign.\n\n\n  var _usePhoneDigits = usePhoneDigits({\n    value: value,\n    onChange: onChange,\n    country: country,\n    defaultCountry: defaultCountry,\n    international: international,\n    withCountryCallingCode: withCountryCallingCode,\n    useNationalFormatForDefaultCountryValue: useNationalFormatForDefaultCountryValue,\n    metadata: metadata\n  }),\n      _usePhoneDigits2 = _slicedToArray(_usePhoneDigits, 2),\n      phoneDigits = _usePhoneDigits2[0],\n      setPhoneDigits = _usePhoneDigits2[1];\n\n  return React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    metadata: metadata,\n    international: international,\n    withCountryCallingCode: withCountryCallingCode,\n    country: country || defaultCountry,\n    value: phoneDigits,\n    onChange: setPhoneDigits\n  }));\n}\n\nPhoneInput = React.forwardRef(PhoneInput);\nPhoneInput.propTypes = {\n  /**\r\n   * The phone number (in E.164 format).\r\n   * Examples: `undefined`, `\"+12\"`, `\"+12133734253\"`.\r\n   */\n  value: PropTypes.string,\n\n  /**\r\n   * A function of `value: string?`.\r\n   * Updates the `value` property.\r\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\r\n   * A two-letter country code for formatting `value`\r\n   * as a national phone number (example: `(213) 373-4253`),\r\n   * or as an international phone number without \"country calling code\"\r\n   * if `international` property is passed (example: `213 373 4253`).\r\n   * Example: \"US\".\r\n   * If no `country` is passed then `value`\r\n   * is formatted as an international phone number.\r\n   * (example: `+1 213 373 4253`)\r\n   */\n  country: PropTypes.string,\n\n  /**\r\n   * A two-letter country code for formatting `value`\r\n   * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n   * The user can still input a phone number in international format.\r\n   * Example: \"US\".\r\n   * `country` and `defaultCountry` properties are mutually exclusive.\r\n   */\n  defaultCountry: PropTypes.string,\n\n  /**\r\n   * If `country` property is passed along with `international={true}` property\r\n   * then the phone number will be input in \"international\" format for that `country`\r\n   * (without \"country calling code\").\r\n   * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n   * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n   * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n   * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n   * (without \"country calling code\" `+1`).\r\n   */\n  international: PropTypes.bool,\n\n  /**\r\n   * If `country` and `international` properties are set,\r\n   * then by default it won't include \"country calling code\" in the input field.\r\n   * To change that, pass `withCountryCallingCode` property,\r\n   * and it will include \"country calling code\" in the input field.\r\n   */\n  withCountryCallingCode: PropTypes.bool,\n\n  /**\r\n   * A component that renders the `<input/>` itself and also\r\n   * parses and formats its `value` as the user inputs it.\r\n   */\n  Component: PropTypes.elementType.isRequired,\n\n  /**\r\n   * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n   * then the `value` will be formatted as a national phone number by default.\r\n   * To format the initial `value` of `defaultCountry` as an international number instead\r\n   * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n   */\n  useNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\n\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   */\n  metadata: PropTypes.object.isRequired\n};\nPhoneInput.defaultProps = {\n  /**\r\n   * Set to `true` to force international phone number format\r\n   * (without \"country calling code\") when `country` is specified.\r\n   */\n  // international: false,\n\n  /**\r\n   * Prefer national format when formatting E.164 phone number `value`\r\n   * corresponding to `defaultCountry`.\r\n   */\n  useNationalFormatForDefaultCountryValue: true\n};\nexport default PhoneInput;","map":{"version":3,"sources":["../source/PhoneInput.js"],"names":["Component","country","defaultCountry","useNationalFormatForDefaultCountryValue","value","onChange","metadata","international","withCountryCallingCode","rest","phoneDigits","setPhoneDigits","usePhoneDigits","PhoneInput","React","PropTypes","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AAEA,OAAA,cAAA,MAAA,kBAAA;;AAEA,SAAA,UAAA,CAAA,IAAA,EAAA,GAAA,EAWQ;AAAA,MAVPA,SAUO,GAAA,IAAA,CAVPA,SAUO;AAAA,MATPC,OASO,GAAA,IAAA,CATPA,OASO;AAAA,MARPC,cAQO,GAAA,IAAA,CARPA,cAQO;AAAA,MAPPC,uCAOO,GAAA,IAAA,CAPPA,uCAOO;AAAA,MANPC,KAMO,GAAA,IAAA,CANPA,KAMO;AAAA,MALPC,QAKO,GAAA,IAAA,CALPA,QAKO;AAAA,MAJPC,QAIO,GAAA,IAAA,CAJPA,QAIO;AAAA,MAHPC,aAGO,GAAA,IAAA,CAHPA,aAGO;AAAA,MAFPC,sBAEO,GAAA,IAAA,CAFPA,sBAEO;AAAA,MADJC,IACI,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,SAAA,EAAA,gBAAA,EAAA,yCAAA,EAAA,OAAA,EAAA,UAAA,EAAA,UAAA,EAAA,eAAA,EAAA,wBAAA,CAAA,CAAA,CAAA,CACP;;;AADO,MAAA,eAAA,GAKHG,cAAc,CAAC;AAClBR,IAAAA,KAAK,EADa,KAAA;AAElBC,IAAAA,QAAQ,EAFU,QAAA;AAGlBJ,IAAAA,OAAO,EAHW,OAAA;AAIlBC,IAAAA,cAAc,EAJI,cAAA;AAKlBK,IAAAA,aAAa,EALK,aAAA;AAMlBC,IAAAA,sBAAsB,EANJ,sBAAA;AAOlBL,IAAAA,uCAAuC,EAPrB,uCAAA;AAQlBG,IAAAA,QAAQ,EAARA;AARkB,GAAD,CALX;AAAA,MAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MAGNI,WAHM,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAINC,cAJM,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAeP,SACC,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEC,IAAA,GAAG,EAFJ,GAAA;AAGC,IAAA,QAAQ,EAHT,QAAA;AAIC,IAAA,aAAa,EAJd,aAAA;AAKC,IAAA,sBAAsB,EALvB,sBAAA;AAMC,IAAA,OAAO,EAAEV,OAAO,IANjB,cAAA;AAOC,IAAA,KAAK,EAPN,WAAA;AAQC,IAAA,QAAQ,EAAEU;AARX,GAAA,CAAA,CADD;AAWA;;AAEDE,UAAU,GAAGC,KAAK,CAALA,UAAAA,CAAbD,UAAaC,CAAbD;AAEAA,UAAU,CAAVA,SAAAA,GAAuB;AACtB;;;;AAIAT,EAAAA,KAAK,EAAEW,SAAS,CALM,MAAA;;AAOtB;;;;AAIAV,EAAAA,QAAQ,EAAEU,SAAS,CAATA,IAAAA,CAXY,UAAA;;AAatB;;;;;;;;;;AAUAd,EAAAA,OAAO,EAAEc,SAAS,CAvBI,MAAA;;AAyBtB;;;;;;;AAOAb,EAAAA,cAAc,EAAEa,SAAS,CAhCH,MAAA;;AAkCtB;;;;;;;;;;AAUAR,EAAAA,aAAa,EAAEQ,SAAS,CA5CF,IAAA;;AA8CtB;;;;;;AAMAP,EAAAA,sBAAsB,EAAEO,SAAS,CApDX,IAAA;;AAsDtB;;;;AAIAf,EAAAA,SAAS,EAAEe,SAAS,CAATA,WAAAA,CA1DW,UAAA;;AA4DtB;;;;;;AAMAZ,EAAAA,uCAAuC,EAAEY,SAAS,CAATA,IAAAA,CAlEnB,UAAA;;AAoEtB;;;AAGAT,EAAAA,QAAQ,EAAES,SAAS,CAATA,MAAAA,CAAiBC;AAvEL,CAAvBH;AA0EAA,UAAU,CAAVA,YAAAA,GAA0B;AACzB;;;;AAIA;;AAEA;;;;AAIAV,EAAAA,uCAAuC,EAAE;AAXhB,CAA1BU;AAcA,eAAA,UAAA","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport usePhoneDigits from './usePhoneDigits'\r\n\r\nfunction PhoneInput({\r\n\tComponent,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tvalue,\r\n\tonChange,\r\n\tmetadata,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\t...rest\r\n}, ref) {\r\n\t// \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n\tconst [\r\n\t\tphoneDigits,\r\n\t\tsetPhoneDigits\r\n\t] = usePhoneDigits({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tcountry,\r\n\t\tdefaultCountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\tmetadata\r\n\t})\r\n\treturn (\r\n\t\t<Component\r\n\t\t\t{...rest}\r\n\t\t\tref={ref}\r\n\t\t\tmetadata={metadata}\r\n\t\t\tinternational={international}\r\n\t\t\twithCountryCallingCode={withCountryCallingCode}\r\n\t\t\tcountry={country || defaultCountry}\r\n\t\t\tvalue={phoneDigits}\r\n\t\t\tonChange={setPhoneDigits} />\r\n\t)\r\n}\r\n\r\nPhoneInput = React.forwardRef(PhoneInput)\r\n\r\nPhoneInput.propTypes = {\r\n\t/**\r\n\t * The phone number (in E.164 format).\r\n\t * Examples: `undefined`, `\"+12\"`, `\"+12133734253\"`.\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t * Updates the `value` property.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * as a national phone number (example: `(213) 373-4253`),\r\n\t * or as an international phone number without \"country calling code\"\r\n\t * if `international` property is passed (example: `213 373 4253`).\r\n\t * Example: \"US\".\r\n\t * If no `country` is passed then `value`\r\n\t * is formatted as an international phone number.\r\n\t * (example: `+1 213 373 4253`)\r\n\t */\r\n\tcountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n\t * The user can still input a phone number in international format.\r\n\t * Example: \"US\".\r\n\t * `country` and `defaultCountry` properties are mutually exclusive.\r\n\t */\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If `country` property is passed along with `international={true}` property\r\n\t * then the phone number will be input in \"international\" format for that `country`\r\n\t * (without \"country calling code\").\r\n\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t * (without \"country calling code\" `+1`).\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If `country` and `international` properties are set,\r\n\t * then by default it won't include \"country calling code\" in the input field.\r\n\t * To change that, pass `withCountryCallingCode` property,\r\n\t * and it will include \"country calling code\" in the input field.\r\n\t */\r\n\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t/**\r\n\t * A component that renders the `<input/>` itself and also\r\n\t * parses and formats its `value` as the user inputs it.\r\n\t */\r\n\tComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n\t * then the `value` will be formatted as a national phone number by default.\r\n\t * To format the initial `value` of `defaultCountry` as an international number instead\r\n\t * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n\t */\r\n\tuseNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t */\r\n\tmetadata: PropTypes.object.isRequired\r\n}\r\n\r\nPhoneInput.defaultProps = {\r\n\t/**\r\n\t * Set to `true` to force international phone number format\r\n\t * (without \"country calling code\") when `country` is specified.\r\n\t */\r\n\t// international: false,\r\n\r\n\t/**\r\n\t * Prefer national format when formatting E.164 phone number `value`\r\n\t * corresponding to `defaultCountry`.\r\n\t */\r\n\tuseNationalFormatForDefaultCountryValue: true\r\n}\r\n\r\nexport default PhoneInput"]},"metadata":{},"sourceType":"module"}