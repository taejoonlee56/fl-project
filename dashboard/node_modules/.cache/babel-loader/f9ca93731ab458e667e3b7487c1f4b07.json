{"ast":null,"code":"var _jsxFileName = \"/home/tj/fl-carla/src/components/profile/profileCard/profileFormNav/nav/payments/paymentHistory/PaymentsTable/PaymentsTable.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport { Avatar } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { Dates } from 'constants/Dates';\nimport { Status } from '../Status/Status';\nimport { paymentStatuses } from 'constants/paymentStatuses';\nimport { defineColorByPriority, getCurrencyPrice } from 'utils/utils';\nimport * as S from './PaymentsTable.styles';\nimport { Button } from 'components/common/buttons/Button/Button';\nimport { useTheme } from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var PaymentsTable = function PaymentsTable(_ref) {\n  _s();\n\n  var payments = _ref.payments;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var theme = useTheme(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  var columns = useMemo(function () {\n    return [{\n      title: t('profile.nav.payments.recipient'),\n      dataIndex: 'recipient',\n      key: 'recipient',\n      render: function render(recipient) {\n        return /*#__PURE__*/_jsxDEV(S.RecipientWrapper, {\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            src: recipient.img,\n            alt: recipient.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, _this), recipient.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, _this);\n      },\n      align: 'center'\n    }, {\n      title: t('profile.nav.payments.date'),\n      dataIndex: 'date',\n      key: 'date',\n      render: function render(text) {\n        return Dates.format(text, 'LL');\n      },\n      sorter: function sorter(a, b) {\n        return a.date - b.date;\n      },\n      align: 'center'\n    }, {\n      title: t('profile.nav.payments.status.title'),\n      dataIndex: 'status',\n      key: 'status',\n      render: function render(status) {\n        return /*#__PURE__*/_jsxDEV(Status, {\n          color: defineColorByPriority(status.priority, theme),\n          text: t(status.name).toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, _this);\n      },\n      align: 'center'\n    }, {\n      title: t('profile.nav.payments.totalAmount'),\n      dataIndex: 'totalAmount',\n      key: 'totalAmount',\n      align: 'center'\n    }, {\n      title: '',\n      dataIndex: 'details',\n      key: 'details',\n      align: 'center',\n      render: function render() {\n        return /*#__PURE__*/_jsxDEV(Button, {\n          type: \"link\",\n          children: t('profile.nav.payments.details')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 23\n        }, _this);\n      }\n    }];\n  }, [t, theme]);\n  var dataSource = useMemo(function () {\n    return payments.map(function (payment, index) {\n      return {\n        key: index,\n        recipient: {\n          name: payment.recipient,\n          img: payment.imgUrl\n        },\n        date: payment.date,\n        status: paymentStatuses.find(function (status) {\n          return status.id === payment.status;\n        }),\n        totalAmount: getCurrencyPrice(payment.amount, payment.currency),\n        details: payment\n      };\n    });\n  }, [payments]);\n  return /*#__PURE__*/_jsxDEV(S.PaymentHistoryTable, {\n    size: \"middle\",\n    columns: columns,\n    dataSource: dataSource,\n    pagination: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(PaymentsTable, \"Ghgczg6+wVKdyPrckmJTATll8/g=\", false, function () {\n  return [useTranslation, useTheme];\n});\n\n_c = PaymentsTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentsTable\");","map":{"version":3,"sources":["/home/tj/fl-carla/src/components/profile/profileCard/profileFormNav/nav/payments/paymentHistory/PaymentsTable/PaymentsTable.tsx"],"names":["React","useMemo","Avatar","useTranslation","Dates","Status","paymentStatuses","defineColorByPriority","getCurrencyPrice","S","Button","useTheme","PaymentsTable","payments","t","theme","columns","title","dataIndex","key","render","recipient","img","name","align","text","format","sorter","a","b","date","status","priority","toUpperCase","dataSource","map","payment","index","imgUrl","find","id","totalAmount","amount","currency","details"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { Avatar } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { ColumnType } from 'antd/lib/table';\nimport { Dates } from 'constants/Dates';\nimport { Status } from '../Status/Status';\nimport { paymentStatuses, PaymentStatus } from 'constants/paymentStatuses';\nimport { defineColorByPriority, getCurrencyPrice } from 'utils/utils';\nimport { Payment } from 'api/paymentHistory.api';\nimport * as S from './PaymentsTable.styles';\nimport { Button } from 'components/common/buttons/Button/Button';\nimport { useTheme } from 'styled-components';\n\ninterface Recipient {\n  name: string;\n  img: string;\n}\n\ninterface Status {\n  key: number;\n  recipient: Recipient;\n  date: number;\n  status: PaymentStatus | undefined;\n  totalAmount: string;\n}\n\ninterface PaymentsTableProps {\n  payments: Payment[];\n}\n\nexport const PaymentsTable: React.FC<PaymentsTableProps> = ({ payments }) => {\n  const { t } = useTranslation();\n  const theme = useTheme();\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const columns: ColumnType<any>[] = useMemo(() => {\n    return [\n      {\n        title: t('profile.nav.payments.recipient'),\n        dataIndex: 'recipient',\n        key: 'recipient',\n        render: (recipient: Recipient) => (\n          <S.RecipientWrapper>\n            <Avatar src={recipient.img} alt={recipient.name} />\n            {recipient.name}\n          </S.RecipientWrapper>\n        ),\n        align: 'center',\n      },\n      {\n        title: t('profile.nav.payments.date'),\n        dataIndex: 'date',\n        key: 'date',\n        render: (text: string) => Dates.format(text, 'LL'),\n        sorter: (a, b) => a.date - b.date,\n        align: 'center',\n      },\n      {\n        title: t('profile.nav.payments.status.title'),\n        dataIndex: 'status',\n        key: 'status',\n        render: (status: PaymentStatus) => (\n          <Status color={defineColorByPriority(status.priority, theme)} text={t(status.name).toUpperCase()} />\n        ),\n        align: 'center',\n      },\n      {\n        title: t('profile.nav.payments.totalAmount'),\n        dataIndex: 'totalAmount',\n        key: 'totalAmount',\n        align: 'center',\n      },\n      {\n        title: '',\n        dataIndex: 'details',\n        key: 'details',\n        align: 'center',\n        render: () => <Button type=\"link\">{t('profile.nav.payments.details')}</Button>,\n      },\n    ];\n  }, [t, theme]);\n\n  const dataSource: Status[] = useMemo(\n    () =>\n      payments.map((payment, index) => {\n        return {\n          key: index,\n          recipient: {\n            name: payment.recipient,\n            img: payment.imgUrl,\n          },\n          date: payment.date,\n          status: paymentStatuses.find((status) => status.id === payment.status),\n          totalAmount: getCurrencyPrice(payment.amount, payment.currency),\n          details: payment,\n        };\n      }),\n    [payments],\n  );\n\n  return <S.PaymentHistoryTable size=\"middle\" columns={columns} dataSource={dataSource} pagination={false} />;\n};\n"]},"metadata":{},"sourceType":"module"}