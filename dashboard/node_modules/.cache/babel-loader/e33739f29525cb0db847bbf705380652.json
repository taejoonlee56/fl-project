{"ast":null,"code":"import { createElement } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"cdnSuffix\", \"cdnUrl\", \"countryCode\", \"style\", \"svg\"];\nvar DEFAULT_CDN_URL = 'https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/4.1.4/flags/4x3/';\nvar DEFAULT_CDN_SUFFIX = 'svg'; // offset between uppercase ascii and regional indicator symbols\n\nvar OFFSET = 127397;\n\nvar ReactCountryFlag = function ReactCountryFlag(_ref) {\n  var _ref$cdnSuffix = _ref.cdnSuffix,\n      cdnSuffix = _ref$cdnSuffix === void 0 ? DEFAULT_CDN_SUFFIX : _ref$cdnSuffix,\n      _ref$cdnUrl = _ref.cdnUrl,\n      cdnUrl = _ref$cdnUrl === void 0 ? DEFAULT_CDN_URL : _ref$cdnUrl,\n      countryCode = _ref.countryCode,\n      style = _ref.style,\n      _ref$svg = _ref.svg,\n      svg = _ref$svg === void 0 ? false : _ref$svg,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  if (typeof countryCode !== 'string') {\n    return null;\n  }\n\n  if (svg) {\n    var flagUrl = \"\" + cdnUrl + countryCode.toLowerCase() + \".\" + cdnSuffix;\n    return createElement(\"img\", Object.assign({}, props, {\n      src: flagUrl,\n      style: _extends({\n        display: 'inline-block',\n        width: '1em',\n        height: '1em',\n        verticalAlign: 'middle'\n      }, style)\n    }));\n  }\n\n  var emoji = countryCode.toUpperCase().replace(/./g, function (_char) {\n    return String.fromCodePoint(_char.charCodeAt(0) + OFFSET);\n  });\n  return createElement(\"span\", Object.assign({\n    role: \"img\"\n  }, props, {\n    style: _extends({\n      display: 'inline-block',\n      fontSize: '1em',\n      lineHeight: '1em',\n      verticalAlign: 'middle'\n    }, style)\n  }), emoji);\n};\n\nexport default ReactCountryFlag;\nexport { ReactCountryFlag };","map":{"version":3,"sources":["../src/index.tsx"],"names":["DEFAULT_CDN_URL","DEFAULT_CDN_SUFFIX","OFFSET","ReactCountryFlag","cdnSuffix","cdnUrl","countryCode","style","svg","props","flagUrl","src","display","width","height","verticalAlign","emoji","String","char","role","fontSize","lineHeight"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,eAAe,GAArB,uEAAA;AAEA,IAAMC,kBAAkB,GAAxB,KAAA,C,CAAA;;AAGA,IAAMC,MAAM,GAAZ,MAAA;;IAoBaC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,IAAA,EAAA;4BAC9BC,S;MAAAA,SAAAA,GAAAA,cAAAA,KAAAA,KAAAA,CAAAA,GAAYH,kBAAZG,GAAYH,c;yBACZI,M;MAAAA,MAAAA,GAAAA,WAAAA,KAAAA,KAAAA,CAAAA,GAASL,eAATK,GAASL,W;MACTM,WAAAA,GAAAA,IAAAA,CAAAA,W;MACAC,KAAAA,GAAAA,IAAAA,CAAAA,K;sBACAC,G;MAAAA,GAAAA,GAAAA,QAAAA,KAAAA,KAAAA,CAAAA,GAAM,KAANA,GAAM,Q;MACHC,KAAAA,GAAAA,6BAAAA,CAAAA,IAAAA,EAAAA,SAAAA,C;;AAEH,MAAI,OAAA,WAAA,KAAJ,QAAA,EAAqC;AACnC,WAAA,IAAA;AACD;;AAED,MAAA,GAAA,EAAS;AACP,QAAMC,OAAO,GAAA,KAAA,MAAA,GAAeJ,WAAW,CAA1B,WAAeA,EAAf,GAAA,GAAA,GAAb,SAAA;AAEA,WACE,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACMG,KADN,EACMA;AACJE,MAAAA,GAAG,EAAED,OADDD;AAEJF,MAAAA,KAAK,EAAA,QAAA,CAAA;AACHK,QAAAA,OAAO,EADJ,cAAA;AAEHC,QAAAA,KAAK,EAFF,KAAA;AAGHC,QAAAA,MAAM,EAHH,KAAA;AAIHC,QAAAA,aAAa,EAAE;AAJZ,OAAA,EAAA,KAAA;AAFDN,KADN,CAAA,CADF;AAaD;;AAED,MAAMO,KAAK,GAAG,WAAW,CAAX,WAAA,GAAA,OAAA,CAAA,IAAA,EAEG,UAAA,KAAA,EAAI;AAAA,WAAIC,MAAM,CAANA,aAAAA,CAAqBC,KAAI,CAAJA,UAAAA,CAAAA,CAAAA,IAAzB,MAAID,CAAJ;AAFrB,GAAc,CAAd;AAIA,SACE,aAAA,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACEE,IAAAA,IAAI,EAAC;AADP,GAAA,EAEMV,KAFN,EAEMA;AACJF,IAAAA,KAAK,EAAA,QAAA,CAAA;AACHK,MAAAA,OAAO,EADJ,cAAA;AAEHQ,MAAAA,QAAQ,EAFL,KAAA;AAGHC,MAAAA,UAAU,EAHP,KAAA;AAIHN,MAAAA,aAAa,EAAE;AAJZ,KAAA,EAAA,KAAA;AADDN,GAFN,CAAA,EADF,KACE,CADF;AAeD,C","sourcesContent":["import * as React from 'react';\n\nconst DEFAULT_CDN_URL =\n  'https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/4.1.4/flags/4x3/';\nconst DEFAULT_CDN_SUFFIX = 'svg';\n\n// offset between uppercase ascii and regional indicator symbols\nconst OFFSET = 127397;\n\ninterface EmojiProps extends React.HTMLAttributes<HTMLSpanElement> {\n  cdnSuffix?: string;\n  cdnUrl?: string;\n  countryCode: string;\n  style?: React.CSSProperties;\n  svg?: false;\n}\n\ninterface ImgProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  cdnSuffix?: string;\n  cdnUrl?: string;\n  countryCode: string;\n  style?: React.CSSProperties;\n  svg?: true;\n}\n\nexport type ReactCountryFlagProps = EmojiProps | ImgProps;\n\nexport const ReactCountryFlag = ({\n  cdnSuffix = DEFAULT_CDN_SUFFIX,\n  cdnUrl = DEFAULT_CDN_URL,\n  countryCode,\n  style,\n  svg = false,\n  ...props\n}: ReactCountryFlagProps) => {\n  if (typeof countryCode !== 'string') {\n    return null;\n  }\n\n  if (svg) {\n    const flagUrl = `${cdnUrl}${countryCode.toLowerCase()}.${cdnSuffix}`;\n\n    return (\n      <img\n        {...props}\n        src={flagUrl}\n        style={{\n          display: 'inline-block',\n          width: '1em',\n          height: '1em',\n          verticalAlign: 'middle',\n          ...style,\n        }}\n      />\n    );\n  }\n\n  const emoji = countryCode\n    .toUpperCase()\n    .replace(/./g, char => String.fromCodePoint(char.charCodeAt(0) + OFFSET));\n\n  return (\n    <span\n      role=\"img\"\n      {...props}\n      style={{\n        display: 'inline-block',\n        fontSize: '1em',\n        lineHeight: '1em',\n        verticalAlign: 'middle',\n        ...style,\n      }}\n    >\n      {emoji}\n    </span>\n  );\n};\n\nexport default ReactCountryFlag;\n"]},"metadata":{},"sourceType":"module"}