{"ast":null,"code":"import { url } from \"./url.js\";\nimport { Manager } from \"./manager.js\";\nimport { Socket } from \"./socket.js\";\n/**\r\n * Managers cache.\r\n */\n\nvar cache = {};\n\nfunction lookup(uri, opts) {\n  if (typeof uri === \"object\") {\n    opts = uri;\n    uri = undefined;\n  }\n\n  opts = opts || {};\n  var parsed = url(uri, opts.path || \"/socket.io\");\n  var source = parsed.source;\n  var id = parsed.id;\n  var path = parsed.path;\n  var sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n  var newConnection = opts.forceNew || opts[\"force new connection\"] || false === opts.multiplex || sameNamespace;\n  var io;\n\n  if (newConnection) {\n    io = new Manager(source, opts);\n  } else {\n    if (!cache[id]) {\n      cache[id] = new Manager(source, opts);\n    }\n\n    io = cache[id];\n  }\n\n  if (parsed.query && !opts.query) {\n    opts.query = parsed.queryKey;\n  }\n\n  return io.socket(parsed.path, opts);\n} // so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\n\n\nObject.assign(lookup, {\n  Manager: Manager,\n  Socket: Socket,\n  io: lookup,\n  connect: lookup\n});\n/**\r\n * Protocol version.\r\n *\r\n * @public\r\n */\n\nexport { protocol } from \"socket.io-parser\";\n/**\r\n * Expose constructors for standalone build.\r\n *\r\n * @public\r\n */\n\nexport { Manager, Socket, lookup as io, lookup as connect, lookup as default };","map":{"version":3,"sources":["D:/fl-carla/node_modules/socket.io-client/build/esm/index.js"],"names":["url","Manager","Socket","cache","lookup","uri","opts","undefined","parsed","path","source","id","sameNamespace","newConnection","forceNew","multiplex","io","query","queryKey","socket","Object","assign","connect","protocol","default"],"mappings":"AAAA,SAASA,GAAT,QAAoB,UAApB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA;AACA;AACA;;AACA,IAAMC,KAAK,GAAG,EAAd;;AACA,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,IAArB,EAA2B;AACvB,MAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AACzBC,IAAAA,IAAI,GAAGD,GAAP;AACAA,IAAAA,GAAG,GAAGE,SAAN;AACH;;AACDD,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,MAAME,MAAM,GAAGR,GAAG,CAACK,GAAD,EAAMC,IAAI,CAACG,IAAL,IAAa,YAAnB,CAAlB;AACA,MAAMC,MAAM,GAAGF,MAAM,CAACE,MAAtB;AACA,MAAMC,EAAE,GAAGH,MAAM,CAACG,EAAlB;AACA,MAAMF,IAAI,GAAGD,MAAM,CAACC,IAApB;AACA,MAAMG,aAAa,GAAGT,KAAK,CAACQ,EAAD,CAAL,IAAaF,IAAI,IAAIN,KAAK,CAACQ,EAAD,CAAL,CAAU,MAAV,CAA3C;AACA,MAAME,aAAa,GAAGP,IAAI,CAACQ,QAAL,IAClBR,IAAI,CAAC,sBAAD,CADc,IAElB,UAAUA,IAAI,CAACS,SAFG,IAGlBH,aAHJ;AAIA,MAAII,EAAJ;;AACA,MAAIH,aAAJ,EAAmB;AACfG,IAAAA,EAAE,GAAG,IAAIf,OAAJ,CAAYS,MAAZ,EAAoBJ,IAApB,CAAL;AACH,GAFD,MAGK;AACD,QAAI,CAACH,KAAK,CAACQ,EAAD,CAAV,EAAgB;AACZR,MAAAA,KAAK,CAACQ,EAAD,CAAL,GAAY,IAAIV,OAAJ,CAAYS,MAAZ,EAAoBJ,IAApB,CAAZ;AACH;;AACDU,IAAAA,EAAE,GAAGb,KAAK,CAACQ,EAAD,CAAV;AACH;;AACD,MAAIH,MAAM,CAACS,KAAP,IAAgB,CAACX,IAAI,CAACW,KAA1B,EAAiC;AAC7BX,IAAAA,IAAI,CAACW,KAAL,GAAaT,MAAM,CAACU,QAApB;AACH;;AACD,SAAOF,EAAE,CAACG,MAAH,CAAUX,MAAM,CAACC,IAAjB,EAAuBH,IAAvB,CAAP;AACH,C,CACD;AACA;;;AACAc,MAAM,CAACC,MAAP,CAAcjB,MAAd,EAAsB;AAClBH,EAAAA,OAAO,EAAPA,OADkB;AAElBC,EAAAA,MAAM,EAANA,MAFkB;AAGlBc,EAAAA,EAAE,EAAEZ,MAHc;AAIlBkB,EAAAA,OAAO,EAAElB;AAJS,CAAtB;AAMA;AACA;AACA;AACA;AACA;;AACA,SAASmB,QAAT,QAAyB,kBAAzB;AACA;AACA;AACA;AACA;AACA;;AACA,SAAStB,OAAT,EAAkBC,MAAlB,EAA0BE,MAAM,IAAIY,EAApC,EAAwCZ,MAAM,IAAIkB,OAAlD,EAA2DlB,MAAM,IAAIoB,OAArE","sourcesContent":["import { url } from \"./url.js\";\r\nimport { Manager } from \"./manager.js\";\r\nimport { Socket } from \"./socket.js\";\r\n/**\r\n * Managers cache.\r\n */\r\nconst cache = {};\r\nfunction lookup(uri, opts) {\r\n    if (typeof uri === \"object\") {\r\n        opts = uri;\r\n        uri = undefined;\r\n    }\r\n    opts = opts || {};\r\n    const parsed = url(uri, opts.path || \"/socket.io\");\r\n    const source = parsed.source;\r\n    const id = parsed.id;\r\n    const path = parsed.path;\r\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\r\n    const newConnection = opts.forceNew ||\r\n        opts[\"force new connection\"] ||\r\n        false === opts.multiplex ||\r\n        sameNamespace;\r\n    let io;\r\n    if (newConnection) {\r\n        io = new Manager(source, opts);\r\n    }\r\n    else {\r\n        if (!cache[id]) {\r\n            cache[id] = new Manager(source, opts);\r\n        }\r\n        io = cache[id];\r\n    }\r\n    if (parsed.query && !opts.query) {\r\n        opts.query = parsed.queryKey;\r\n    }\r\n    return io.socket(parsed.path, opts);\r\n}\r\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\r\n// namespace (e.g. `io.connect(...)`), for backward compatibility\r\nObject.assign(lookup, {\r\n    Manager,\r\n    Socket,\r\n    io: lookup,\r\n    connect: lookup,\r\n});\r\n/**\r\n * Protocol version.\r\n *\r\n * @public\r\n */\r\nexport { protocol } from \"socket.io-parser\";\r\n/**\r\n * Expose constructors for standalone build.\r\n *\r\n * @public\r\n */\r\nexport { Manager, Socket, lookup as io, lookup as connect, lookup as default, };\r\n"]},"metadata":{},"sourceType":"module"}