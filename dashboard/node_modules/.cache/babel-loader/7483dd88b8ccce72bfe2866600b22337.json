{"ast":null,"code":"import _slicedToArray from \"/home/tj/fl-carla/dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/tj/fl-carla/dashboard/src/components/auth/LockForm/LockForm.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Avatar } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { BaseForm } from '@app/components/common/forms/BaseForm/BaseForm';\nimport { initValues as loginInitVal } from '@app/components/auth/LoginForm/LoginForm';\nimport { notificationController } from '@app/controllers/notificationController';\nimport { useAppDispatch, useAppSelector } from '@app/hooks/reduxHooks';\nimport { useResponsive } from '@app/hooks/useResponsive';\nimport { Dates } from '@app/constants/Dates';\nimport { doLogin } from '@app/store/slices/authSlice';\nimport * as Auth from '@app/components/layouts/AuthLayout/AuthLayout.styles';\nimport * as S from './LockForm.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar initValues = {\n  password: loginInitVal.password\n};\nexport var LockForm = function LockForm() {\n  _s();\n\n  var navigate = useNavigate();\n\n  var _useResponsive = useResponsive(),\n      mobileOnly = _useResponsive.mobileOnly;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var dispatch = useAppDispatch();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(new Date()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dateState = _useState4[0],\n      setDateState = _useState4[1];\n\n  var user = useAppSelector(function (state) {\n    return state.user.user;\n  });\n  var fullName = \"\".concat(user === null || user === void 0 ? void 0 : user.firstName, \" \").concat(user === null || user === void 0 ? void 0 : user.lastName);\n  var currentDateInUTC = dateState.toUTCString();\n  var currentTime = Dates.format(currentDateInUTC, 'h:mm A');\n  var currentDate = Dates.format(currentDateInUTC, 'dddd, MMMM D, YYYY');\n  useEffect(function () {\n    var interval = setInterval(function () {\n      return setDateState(new Date());\n    }, 10 * 1000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n\n  var handleSubmit = function handleSubmit(_ref) {\n    var password = _ref.password;\n    setLoading(true);\n    dispatch(doLogin({\n      email: (user === null || user === void 0 ? void 0 : user.email.name) || '',\n      password: password\n    })).unwrap().then(function () {\n      navigate(-1);\n    }).catch(function (e) {\n      notificationController.error({\n        message: e.message\n      });\n      setLoading(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Auth.FormWrapper, {\n    children: /*#__PURE__*/_jsxDEV(BaseForm, {\n      layout: \"vertical\",\n      onFinish: handleSubmit,\n      requiredMark: \"optional\",\n      initialValues: initValues,\n      children: [/*#__PURE__*/_jsxDEV(S.ContentWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(S.Time, {\n          children: currentTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(S.Date, {\n          children: currentDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(S.AvatarCircle, {\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            src: user === null || user === void 0 ? void 0 : user.imgUrl,\n            alt: \"user avatar\",\n            size: mobileOnly ? 59 : 77\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(S.Name, {\n          children: fullName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(S.FormItem, {\n        label: t('common.password'),\n        name: \"password\",\n        rules: [{\n          required: true,\n          message: t('common.requiredField')\n        }],\n        children: /*#__PURE__*/_jsxDEV(Auth.FormInputPassword, {\n          placeholder: t('common.password')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(BaseForm.Item, {\n        noStyle: true,\n        children: /*#__PURE__*/_jsxDEV(Auth.SubmitButton, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          loading: isLoading,\n          children: t('common.login')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(LockForm, \"8R5zdLHYfqk/RFdA2YCPKMTWeLM=\", false, function () {\n  return [useNavigate, useResponsive, useTranslation, useAppDispatch, useAppSelector];\n});\n\n_c = LockForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LockForm\");","map":{"version":3,"sources":["/home/tj/fl-carla/dashboard/src/components/auth/LockForm/LockForm.tsx"],"names":["React","useState","useEffect","useNavigate","Avatar","useTranslation","BaseForm","initValues","loginInitVal","notificationController","useAppDispatch","useAppSelector","useResponsive","Dates","doLogin","Auth","S","password","LockForm","navigate","mobileOnly","t","dispatch","isLoading","setLoading","Date","dateState","setDateState","user","state","fullName","firstName","lastName","currentDateInUTC","toUTCString","currentTime","format","currentDate","interval","setInterval","clearInterval","handleSubmit","email","name","unwrap","then","catch","e","error","message","imgUrl","required"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Avatar } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { BaseForm } from '@app/components/common/forms/BaseForm/BaseForm';\nimport { initValues as loginInitVal } from '@app/components/auth/LoginForm/LoginForm';\nimport { notificationController } from '@app/controllers/notificationController';\nimport { useAppDispatch, useAppSelector } from '@app/hooks/reduxHooks';\nimport { useResponsive } from '@app/hooks/useResponsive';\nimport { Dates } from '@app/constants/Dates';\nimport { doLogin } from '@app/store/slices/authSlice';\nimport * as Auth from '@app/components/layouts/AuthLayout/AuthLayout.styles';\nimport * as S from './LockForm.styles';\n\ninterface LockFormData {\n  password: string;\n}\n\nconst initValues = {\n  password: loginInitVal.password,\n};\n\nexport const LockForm: React.FC = () => {\n  const navigate = useNavigate();\n  const { mobileOnly } = useResponsive();\n  const { t } = useTranslation();\n  const dispatch = useAppDispatch();\n\n  const [isLoading, setLoading] = useState(false);\n  const [dateState, setDateState] = useState(new Date());\n  const user = useAppSelector((state) => state.user.user);\n  const fullName = `${user?.firstName} ${user?.lastName}`;\n\n  const currentDateInUTC = dateState.toUTCString();\n  const currentTime = Dates.format(currentDateInUTC, 'h:mm A');\n  const currentDate = Dates.format(currentDateInUTC, 'dddd, MMMM D, YYYY');\n\n  useEffect(() => {\n    const interval = setInterval(() => setDateState(new Date()), 10 * 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleSubmit = ({ password }: LockFormData) => {\n    setLoading(true);\n    dispatch(doLogin({ email: user?.email.name || '', password }))\n      .unwrap()\n      .then(() => {\n        navigate(-1);\n      })\n      .catch((e) => {\n        notificationController.error({ message: e.message });\n        setLoading(false);\n      });\n  };\n\n  return (\n    <Auth.FormWrapper>\n      <BaseForm layout=\"vertical\" onFinish={handleSubmit} requiredMark=\"optional\" initialValues={initValues}>\n        <S.ContentWrapper>\n          <S.Time>{currentTime}</S.Time>\n          <S.Date>{currentDate}</S.Date>\n          <S.AvatarCircle>\n            <Avatar src={user?.imgUrl} alt=\"user avatar\" size={mobileOnly ? 59 : 77} />\n          </S.AvatarCircle>\n          <S.Name>{fullName}</S.Name>\n        </S.ContentWrapper>\n        <S.FormItem\n          label={t('common.password')}\n          name=\"password\"\n          rules={[{ required: true, message: t('common.requiredField') }]}\n        >\n          <Auth.FormInputPassword placeholder={t('common.password')} />\n        </S.FormItem>\n        <BaseForm.Item noStyle>\n          <Auth.SubmitButton type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n            {t('common.login')}\n          </Auth.SubmitButton>\n        </BaseForm.Item>\n      </BaseForm>\n    </Auth.FormWrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}