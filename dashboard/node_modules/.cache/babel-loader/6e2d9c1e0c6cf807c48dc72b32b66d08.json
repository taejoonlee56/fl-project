{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _slicedToArray from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\n\nvar _jsxFileName = \"D:\\\\fl-carla\\\\src\\\\components\\\\tj\\\\BatteryStackedChart\\\\BatteryStackedChart.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useTheme } from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport * as echarts from 'echarts';\nimport { BaseChart } from '@app/components/common/charts/BaseChart';\nimport { Card } from '@app/components/common/Card/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var BatteryStackedChart = function BatteryStackedChart() {\n  _s();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      chartData = _useState2[0],\n      setChartData = _useState2[1];\n\n  var theme = useTheme();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var chartColors = theme.colors.charts;\n  useEffect(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios('data.json');\n\n              case 2:\n                result = _context.sent;\n                setChartData(result.data);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, []);\n  var option = {\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        type: 'cross',\n        label: {\n          backgroundColor: chartColors.tooltipLabel\n        }\n      }\n    },\n    legend: {\n      data: [\"coal\", \"hydro\", \"nuclear\", \"gas\", \"oil\"].map(function (item) {\n        return t(\"charts.\".concat(item));\n      }),\n      top: 0,\n      left: 10,\n      textStyle: {\n        color: theme.colors.text.main\n      }\n    },\n    // ... // 여기서 option을 설정하는 코드를 작성합니다.\n    xAxis: [{\n      type: 'category',\n      boundaryGap: false,\n      data: chartData === null || chartData === void 0 ? void 0 : chartData.categories // ...\n\n    }],\n    yAxis: [{\n      type: 'value'\n    }],\n    series: chartData === null || chartData === void 0 ? void 0 : chartData.series.map(function (data) {\n      return {\n        name: t(\"charts.\".concat(data.name)),\n        type: 'line',\n        stack: 'Total',\n        smooth: true,\n        lineStyle: {\n          width: 0\n        },\n        showSymbol: false,\n        areaStyle: {\n          opacity: 0.8,\n          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n            offset: 0,\n            color: chartColors.color1\n          }, {\n            offset: 1,\n            color: chartColors.color1Tint\n          }])\n        },\n        emphasis: {\n          focus: 'series'\n        },\n        data: data.values\n      };\n    })\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    padding: \"0 0 1.875rem\",\n    title: t('charts.gradientLabel'),\n    children: /*#__PURE__*/_jsxDEV(BaseChart, {\n      option: option\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(BatteryStackedChart, \"USP95dl0HW7zEtVRbXFRO1eHFXA=\", false, function () {\n  return [useTheme, useTranslation];\n});\n\n_c = BatteryStackedChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BatteryStackedChart\");","map":{"version":3,"sources":["D:/fl-carla/src/components/tj/BatteryStackedChart/BatteryStackedChart.tsx"],"names":["React","useEffect","useState","axios","useTheme","useTranslation","echarts","BaseChart","Card","BatteryStackedChart","chartData","setChartData","theme","t","chartColors","colors","charts","fetchData","result","data","option","tooltip","trigger","axisPointer","type","label","backgroundColor","tooltipLabel","legend","map","item","top","left","textStyle","color","text","main","xAxis","boundaryGap","categories","yAxis","series","name","stack","smooth","lineStyle","width","showSymbol","areaStyle","opacity","graphic","LinearGradient","offset","color1","color1Tint","emphasis","focus","values"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useTheme } from 'styled-components';\r\nimport { useTranslation } from 'react-i18next';\r\nimport * as echarts from 'echarts';\r\nimport { BaseChart } from '@app/components/common/charts/BaseChart';\r\nimport { Card } from '@app/components/common/Card/Card';\r\n\r\ninterface ChartData {\r\n  categories: string[];\r\n  series: {\r\n    name: string;\r\n    values: number[];\r\n  }[];\r\n}\r\n\r\nexport const BatteryStackedChart: React.FC = () => {\r\n\r\n  const [chartData, setChartData] = useState<ChartData | null>(null);\r\n  const theme = useTheme();\r\n  const { t } = useTranslation();\r\n\r\n  const chartColors = theme.colors.charts;\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios('data.json');\r\n      setChartData(result.data);\r\n    };\r\n  \r\n    fetchData();\r\n  }, []);\r\n  \r\n\r\n  const option = {\r\n    tooltip: {\r\n      trigger: 'axis',\r\n      axisPointer: {\r\n        type: 'cross',\r\n        label: {\r\n          backgroundColor: chartColors.tooltipLabel,\r\n        },\r\n      },\r\n    },\r\n    legend: {\r\n      data: [`coal`, `hydro`, `nuclear`, `gas`, `oil`].map((item) => t(`charts.${item}`)),\r\n      top: 0,\r\n      left: 10,\r\n      textStyle: {\r\n        color: theme.colors.text.main,\r\n      },\r\n    },\r\n    // ... // 여기서 option을 설정하는 코드를 작성합니다.\r\n    xAxis: [\r\n      {\r\n        type: 'category',\r\n        boundaryGap: false,\r\n        data: chartData?.categories,\r\n        // ...\r\n      },\r\n    ],\r\n    yAxis: [\r\n      {\r\n        type: 'value',\r\n      },\r\n    ],\r\n    series: chartData?.series.map((data) => ({\r\n      name: t(`charts.${data.name}`),\r\n      type: 'line',\r\n      stack: 'Total',\r\n      smooth: true,\r\n      lineStyle: {\r\n        width: 0,\r\n      },\r\n      showSymbol: false,\r\n      areaStyle: {\r\n        opacity: 0.8,\r\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n          {\r\n            offset: 0,\r\n            color: chartColors.color1,\r\n          },\r\n          {\r\n            offset: 1,\r\n            color: chartColors.color1Tint,\r\n          },\r\n        ]),\r\n      },\r\n      emphasis: {\r\n        focus: 'series',\r\n      },\r\n      data: data.values,\r\n    })),\r\n  };\r\n\r\n  return (\r\n    <Card padding=\"0 0 1.875rem\" title={t('charts.gradientLabel')}>\r\n      <BaseChart option={option} />\r\n    </Card>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}