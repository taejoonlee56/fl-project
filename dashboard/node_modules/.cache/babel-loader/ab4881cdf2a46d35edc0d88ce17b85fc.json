{"ast":null,"code":"import _objectSpread from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";\nimport _classCallCheck from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { DEFAULT_PLACEHOLDER_CHAR, mergeFormatCharacters } from './helpers';\nimport { Pattern } from './Pattern';\nexport var InputMask = /*#__PURE__*/function () {\n  function InputMask(options) {\n    _classCallCheck(this, InputMask);\n\n    this.emptyValue = '';\n    this._history = [];\n    this._historyIndex = null;\n    this._lastOp = null;\n    this._lastSelection = null;\n\n    var mergedOptions = _objectSpread(_objectSpread({}, {\n      isRevealingMask: false,\n      placeholderChar: DEFAULT_PLACEHOLDER_CHAR,\n      selection: {\n        start: 0,\n        end: 0\n      },\n      value: ''\n    }), options);\n\n    if (!mergedOptions.pattern) {\n      throw new Error('InputMask: you must provide a pattern.');\n    }\n\n    if (typeof mergedOptions.placeholderChar !== 'string' || mergedOptions.placeholderChar.length > 1) {\n      throw new Error('InputMask: placeholderChar should be a single character or an empty string.');\n    }\n\n    this.placeholderChar = mergedOptions.placeholderChar;\n    this.formatCharacters = mergeFormatCharacters(mergedOptions.formatCharacters);\n    this.setPattern(mergedOptions.pattern, {\n      value: mergedOptions.value,\n      selection: mergedOptions.selection,\n      isRevealingMask: mergedOptions.isRevealingMask\n    });\n  }\n\n  _createClass(InputMask, [{\n    key: \"setPattern\",\n    value: function setPattern(patternSource, options) {\n      var merged = _objectSpread({\n        selection: {\n          start: 0,\n          end: 0\n        },\n        value: ''\n      }, options);\n\n      this.pattern = new Pattern(patternSource, this.formatCharacters, this.placeholderChar, merged.isRevealingMask);\n      this.setValue(merged.value);\n      this.emptyValue = this.pattern.formatValue([]).join('');\n      this.selection = merged.selection;\n\n      this._resetHistory();\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      if (value == null) {\n        value = '';\n      }\n\n      this.value = this.pattern.formatValue((value || '').split(''));\n    }\n  }, {\n    key: \"_resetHistory\",\n    value: function _resetHistory() {\n      this._history = [];\n      this._historyIndex = null;\n      this._lastOp = null;\n      this._lastSelection = _objectSpread({}, this.selection);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      if (this.pattern.isRevealingMask) {\n        this.value = this.pattern.formatValue((this.getRawValue() || '').split(''));\n      }\n\n      return (this.value || []).join('');\n    }\n  }, {\n    key: \"getRawValue\",\n    value: function getRawValue() {\n      var rawValue = [];\n\n      for (var i = 0; i < this.value.length; i++) {\n        if (this.pattern._editableIndices[i] === true) {\n          rawValue.push(this.value[i]);\n        }\n      }\n\n      return rawValue.join('');\n    }\n    /**\r\n     * Applies a single character of input based on the current selection.\r\n     * @param {string} char\r\n     * @return {boolean} true if a change has been made to value or selection as a\r\n     *   result of the input, false otherwise.\r\n     */\n\n  }, {\n    key: \"input\",\n    value: function input(char) {\n      // Ignore additional input if the cursor's at the end of the pattern\n      if (this.selection.start === this.selection.end && this.selection.start === this.pattern.length) {\n        return false;\n      }\n\n      var selectionBefore = copy(this.selection);\n      var valueBefore = this.getValue();\n      var inputIndex = this.selection.start; // If the cursor or selection is prior to the first editable character, make\n      // sure any input given is applied to it.\n\n      if (inputIndex < this.pattern.firstEditableIndex) {\n        inputIndex = this.pattern.firstEditableIndex;\n      } // Bail out or add the character to input\n\n\n      if (this.pattern.isEditableIndex(inputIndex)) {\n        if (!this.pattern.isValidAtIndex(char, inputIndex)) {\n          return false;\n        }\n\n        this.value[inputIndex] = this.pattern.transform(char, inputIndex);\n      } else {\n        console.log('not editable');\n      } // If multiple characters were selected, blank the remainder out based on the\n      // pattern.\n\n\n      var end = this.selection.end - 1;\n\n      while (end > inputIndex) {\n        if (this.pattern.isEditableIndex(end)) {\n          this.value[end] = this.placeholderChar;\n        }\n\n        end--;\n      } // Advance the cursor to the next character\n\n\n      this.selection.start = this.selection.end = inputIndex + 1; // Skip over any subsequent static characters\n\n      while (this.pattern.length > this.selection.start && !this.pattern.isEditableIndex(this.selection.start)) {\n        this.selection.start++;\n        this.selection.end++;\n      } // History\n\n\n      if (this._historyIndex != null) {\n        // Took more input after undoing, so blow any subsequent history away\n        this._history.splice(this._historyIndex, this._history.length - this._historyIndex);\n\n        this._historyIndex = null;\n      }\n\n      if (this._lastOp !== 'input' || selectionBefore.start !== selectionBefore.end || this._lastSelection !== null && selectionBefore.start !== this._lastSelection.start) {\n        this._history.push({\n          value: valueBefore,\n          selection: selectionBefore,\n          lastOp: this._lastOp\n        });\n      }\n\n      this._lastOp = 'input';\n      this._lastSelection = copy(this.selection);\n      return true;\n    }\n    /**\r\n     * Attempts to delete from the value based on the current cursor position or\r\n     * selection.\r\n     * @return {boolean} true if the value or selection changed as the result of\r\n     *   backspacing, false otherwise.\r\n     */\n\n  }, {\n    key: \"backspace\",\n    value: function backspace() {\n      // If the cursor is at the start there's nothing to do\n      if (this.selection.start === 0 && this.selection.end === 0) {\n        return false;\n      }\n\n      var selectionBefore = _objectSpread({}, this.selection);\n\n      var valueBefore = this.getValue(); // No range selected - work on the character preceding the cursor\n\n      if (this.selection.start === this.selection.end) {\n        if (this.pattern.isEditableIndex(this.selection.start - 1)) {\n          if (this.pattern.isRevealingMask) {\n            this.value.splice(this.selection.start - 1);\n          } else {\n            this.value[this.selection.start - 1] = this.placeholderChar;\n          }\n        }\n\n        this.selection.start--;\n        this.selection.end--;\n      } // Range selected - delete characters and leave the cursor at the start of the selection\n      else {\n        var end = this.selection.end - 1;\n\n        while (end >= this.selection.start) {\n          if (this.pattern.isEditableIndex(end)) {\n            this.value[end] = this.placeholderChar;\n          }\n\n          end--;\n        }\n\n        this.selection.end = this.selection.start;\n      } // History\n\n\n      if (this._historyIndex != null) {\n        // Took more input after undoing, so blow any subsequent history away\n        this._history.splice(this._historyIndex, this._history.length - this._historyIndex);\n      }\n\n      if (this._lastOp !== 'backspace' || selectionBefore.start !== selectionBefore.end || this._lastSelection !== null && selectionBefore.start !== this._lastSelection.start) {\n        this._history.push({\n          value: valueBefore,\n          selection: selectionBefore,\n          lastOp: this._lastOp\n        });\n      }\n\n      this._lastOp = 'backspace';\n      this._lastSelection = _objectSpread({}, this.selection);\n      return true;\n    }\n    /**\r\n     * Attempts to paste a string of input at the current cursor position or over\r\n     * the top of the current selection.\r\n     * Invalid content at any position will cause the paste to be rejected, and it\r\n     * may contain static parts of the mask's pattern.\r\n     * @param {string} input\r\n     * @return {boolean} true if the paste was successful, false otherwise.\r\n     */\n\n  }, {\n    key: \"paste\",\n    value: function paste(input) {\n      var _this = this;\n\n      // This is necessary because we're just calling input() with each character\n      // and rolling back if any were invalid, rather than checking up-front.\n      var initialState = {\n        value: this.value.slice(),\n        selection: _objectSpread({}, this.selection),\n        _lastOp: this._lastOp,\n        _history: this._history.slice(),\n        _historyIndex: this._historyIndex,\n        _lastSelection: _objectSpread({}, this._lastSelection)\n      }; // If there are static characters at the start of the pattern and the cursor\n      // or selection is within them, the static characters must match for a valid\n      // paste.\n\n      if (this.selection.start < this.pattern.firstEditableIndex) {\n        for (var i = 0, l = this.pattern.firstEditableIndex - this.selection.start; i < l; i++) {\n          if (input.charAt(i) !== this.pattern.pattern[i]) {\n            return false;\n          }\n        } // Continue as if the selection and input started from the editable part of\n        // the pattern.\n\n\n        input = input.substring(this.pattern.firstEditableIndex - this.selection.start);\n        this.selection.start = this.pattern.firstEditableIndex;\n      }\n\n      for (i = 0, l = input.length; i < l && this.selection.start <= this.pattern.lastEditableIndex; i++) {\n        var valid = this.input(input.charAt(i)); // Allow static parts of the pattern to appear in pasted input - they will\n        // already have been stepped over by input(), so verify that the value\n        // deemed invalid by input() was the expected static character.\n\n        if (!valid) {\n          if (this.selection.start > 0) {\n            // XXX This only allows for one static character to be skipped\n            var patternIndex = this.selection.start - 1;\n\n            if (!this.pattern.isEditableIndex(patternIndex) && input.charAt(i) === this.pattern.pattern[patternIndex]) {\n              continue;\n            }\n          }\n\n          Object.keys(initialState).forEach(function (key) {\n            // @ts-ignore\n            _this[key] = initialState[key];\n          });\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      // If there is no history, or nothing more on the history stack, we can't undo\n      if (this._history.length === 0 || this._historyIndex === 0) {\n        return false;\n      }\n\n      var historyItem;\n\n      if (this._historyIndex == null) {\n        // Not currently undoing, set up the initial history index\n        this._historyIndex = this._history.length - 1;\n        historyItem = this._history[this._historyIndex]; // Add a new history entry if anything has changed since the last one, so we\n        // can redo back to the initial state we started undoing from.\n\n        var value = this.getValue();\n\n        if (historyItem.value !== value || historyItem.selection.start !== this.selection.start || historyItem.selection.end !== this.selection.end) {\n          this._history.push({\n            value: value,\n            selection: _objectSpread({}, this.selection),\n            lastOp: this._lastOp,\n            startUndo: true\n          });\n        }\n      } else {\n        historyItem = this._history[--this._historyIndex];\n      }\n\n      this.value = historyItem.value.split('');\n      this.selection = historyItem.selection;\n      this._lastOp = historyItem.lastOp;\n      return true;\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      if (this._history.length === 0 || this._historyIndex == null) {\n        return false;\n      }\n\n      var historyItem = this._history[++this._historyIndex]; // If this is the last history item, we're done redoing\n\n      if (this._historyIndex === this._history.length - 1) {\n        this._historyIndex = null; // If the last history item was only added to start undoing, remove it\n\n        if (historyItem.startUndo) {\n          this._history.pop();\n        }\n      }\n\n      this.value = historyItem.value.split('');\n      this.selection = historyItem.selection;\n      this._lastOp = historyItem.lastOp;\n      return true;\n    }\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(selection) {\n      this.selection = _objectSpread({}, selection);\n\n      if (this.selection.start === this.selection.end) {\n        if (this.selection.start < this.pattern.firstEditableIndex) {\n          this.selection.start = this.selection.end = this.pattern.firstEditableIndex;\n          return true;\n        } // Set selection to the first editable, non-placeholder character before the selection\n        // OR to the beginning of the pattern\n\n\n        var index = this.selection.start;\n\n        while (index >= this.pattern.firstEditableIndex) {\n          if (this.pattern.isEditableIndex(index - 1) && this.value[index - 1] !== this.placeholderChar || index === this.pattern.firstEditableIndex) {\n            this.selection.start = this.selection.end = index;\n            break;\n          }\n\n          index--;\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return InputMask;\n}();\nInputMask.Pattern = Pattern;\n\nfunction extend(dest, src) {\n  if (src) {\n    var props = Object.keys(src);\n\n    for (var i = 0, l = props.length; i < l; i++) {\n      dest[props[i]] = src[props[i]];\n    }\n  }\n\n  return dest;\n}\n\nfunction copy(obj) {\n  return extend({}, obj);\n}\n\nexport default InputMask;","map":{"version":3,"sources":["../../../src/lib/inputmask-core.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { DEFAULT_PLACEHOLDER_CHAR, mergeFormatCharacters } from './helpers';\r\nimport { Pattern } from './Pattern';\r\nexport class InputMask {\r\n    constructor(options) {\r\n        this.emptyValue = '';\r\n        this._history = [];\r\n        this._historyIndex = null;\r\n        this._lastOp = null;\r\n        this._lastSelection = null;\r\n        const mergedOptions = {\r\n            ...{\r\n                isRevealingMask: false,\r\n                placeholderChar: DEFAULT_PLACEHOLDER_CHAR,\r\n                selection: { start: 0, end: 0 },\r\n                value: ''\r\n            },\r\n            ...options\r\n        };\r\n        if (!mergedOptions.pattern) {\r\n            throw new Error('InputMask: you must provide a pattern.');\r\n        }\r\n        if (typeof mergedOptions.placeholderChar !== 'string' ||\r\n            mergedOptions.placeholderChar.length > 1) {\r\n            throw new Error('InputMask: placeholderChar should be a single character or an empty string.');\r\n        }\r\n        this.placeholderChar = mergedOptions.placeholderChar;\r\n        this.formatCharacters = mergeFormatCharacters(mergedOptions.formatCharacters);\r\n        this.setPattern(mergedOptions.pattern, {\r\n            value: mergedOptions.value,\r\n            selection: mergedOptions.selection,\r\n            isRevealingMask: mergedOptions.isRevealingMask\r\n        });\r\n    }\r\n    setPattern(patternSource, options) {\r\n        const merged = {\r\n            selection: { start: 0, end: 0 },\r\n            value: '',\r\n            ...options\r\n        };\r\n        this.pattern = new Pattern(patternSource, this.formatCharacters, this.placeholderChar, merged.isRevealingMask);\r\n        this.setValue(merged.value);\r\n        this.emptyValue = this.pattern.formatValue([]).join('');\r\n        this.selection = merged.selection;\r\n        this._resetHistory();\r\n    }\r\n    setValue(value) {\r\n        if (value == null) {\r\n            value = '';\r\n        }\r\n        this.value = this.pattern.formatValue((value || '').split(''));\r\n    }\r\n    _resetHistory() {\r\n        this._history = [];\r\n        this._historyIndex = null;\r\n        this._lastOp = null;\r\n        this._lastSelection = { ...this.selection };\r\n    }\r\n    getValue() {\r\n        if (this.pattern.isRevealingMask) {\r\n            this.value = this.pattern.formatValue((this.getRawValue() || '').split(''));\r\n        }\r\n        return (this.value || []).join('');\r\n    }\r\n    getRawValue() {\r\n        var rawValue = [];\r\n        for (var i = 0; i < this.value.length; i++) {\r\n            if (this.pattern._editableIndices[i] === true) {\r\n                rawValue.push(this.value[i]);\r\n            }\r\n        }\r\n        return rawValue.join('');\r\n    }\r\n    /**\r\n     * Applies a single character of input based on the current selection.\r\n     * @param {string} char\r\n     * @return {boolean} true if a change has been made to value or selection as a\r\n     *   result of the input, false otherwise.\r\n     */\r\n    input(char) {\r\n        // Ignore additional input if the cursor's at the end of the pattern\r\n        if (this.selection.start === this.selection.end &&\r\n            this.selection.start === this.pattern.length) {\r\n            return false;\r\n        }\r\n        const selectionBefore = copy(this.selection);\r\n        const valueBefore = this.getValue();\r\n        let inputIndex = this.selection.start;\r\n        // If the cursor or selection is prior to the first editable character, make\r\n        // sure any input given is applied to it.\r\n        if (inputIndex < this.pattern.firstEditableIndex) {\r\n            inputIndex = this.pattern.firstEditableIndex;\r\n        }\r\n        // Bail out or add the character to input\r\n        if (this.pattern.isEditableIndex(inputIndex)) {\r\n            if (!this.pattern.isValidAtIndex(char, inputIndex)) {\r\n                return false;\r\n            }\r\n            this.value[inputIndex] = this.pattern.transform(char, inputIndex);\r\n        }\r\n        else {\r\n            console.log('not editable');\r\n        }\r\n        // If multiple characters were selected, blank the remainder out based on the\r\n        // pattern.\r\n        let end = this.selection.end - 1;\r\n        while (end > inputIndex) {\r\n            if (this.pattern.isEditableIndex(end)) {\r\n                this.value[end] = this.placeholderChar;\r\n            }\r\n            end--;\r\n        }\r\n        // Advance the cursor to the next character\r\n        this.selection.start = this.selection.end = inputIndex + 1;\r\n        // Skip over any subsequent static characters\r\n        while (this.pattern.length > this.selection.start &&\r\n            !this.pattern.isEditableIndex(this.selection.start)) {\r\n            this.selection.start++;\r\n            this.selection.end++;\r\n        }\r\n        // History\r\n        if (this._historyIndex != null) {\r\n            // Took more input after undoing, so blow any subsequent history away\r\n            this._history.splice(this._historyIndex, this._history.length - this._historyIndex);\r\n            this._historyIndex = null;\r\n        }\r\n        if (this._lastOp !== 'input' ||\r\n            selectionBefore.start !== selectionBefore.end ||\r\n            (this._lastSelection !== null &&\r\n                selectionBefore.start !== this._lastSelection.start)) {\r\n            this._history.push({\r\n                value: valueBefore,\r\n                selection: selectionBefore,\r\n                lastOp: this._lastOp\r\n            });\r\n        }\r\n        this._lastOp = 'input';\r\n        this._lastSelection = copy(this.selection);\r\n        return true;\r\n    }\r\n    /**\r\n     * Attempts to delete from the value based on the current cursor position or\r\n     * selection.\r\n     * @return {boolean} true if the value or selection changed as the result of\r\n     *   backspacing, false otherwise.\r\n     */\r\n    backspace() {\r\n        // If the cursor is at the start there's nothing to do\r\n        if (this.selection.start === 0 && this.selection.end === 0) {\r\n            return false;\r\n        }\r\n        var selectionBefore = { ...this.selection };\r\n        var valueBefore = this.getValue();\r\n        // No range selected - work on the character preceding the cursor\r\n        if (this.selection.start === this.selection.end) {\r\n            if (this.pattern.isEditableIndex(this.selection.start - 1)) {\r\n                if (this.pattern.isRevealingMask) {\r\n                    this.value.splice(this.selection.start - 1);\r\n                }\r\n                else {\r\n                    this.value[this.selection.start - 1] = this.placeholderChar;\r\n                }\r\n            }\r\n            this.selection.start--;\r\n            this.selection.end--;\r\n        }\r\n        // Range selected - delete characters and leave the cursor at the start of the selection\r\n        else {\r\n            var end = this.selection.end - 1;\r\n            while (end >= this.selection.start) {\r\n                if (this.pattern.isEditableIndex(end)) {\r\n                    this.value[end] = this.placeholderChar;\r\n                }\r\n                end--;\r\n            }\r\n            this.selection.end = this.selection.start;\r\n        }\r\n        // History\r\n        if (this._historyIndex != null) {\r\n            // Took more input after undoing, so blow any subsequent history away\r\n            this._history.splice(this._historyIndex, this._history.length - this._historyIndex);\r\n        }\r\n        if (this._lastOp !== 'backspace' ||\r\n            selectionBefore.start !== selectionBefore.end ||\r\n            (this._lastSelection !== null &&\r\n                selectionBefore.start !== this._lastSelection.start)) {\r\n            this._history.push({\r\n                value: valueBefore,\r\n                selection: selectionBefore,\r\n                lastOp: this._lastOp\r\n            });\r\n        }\r\n        this._lastOp = 'backspace';\r\n        this._lastSelection = { ...this.selection };\r\n        return true;\r\n    }\r\n    /**\r\n     * Attempts to paste a string of input at the current cursor position or over\r\n     * the top of the current selection.\r\n     * Invalid content at any position will cause the paste to be rejected, and it\r\n     * may contain static parts of the mask's pattern.\r\n     * @param {string} input\r\n     * @return {boolean} true if the paste was successful, false otherwise.\r\n     */\r\n    paste(input) {\r\n        // This is necessary because we're just calling input() with each character\r\n        // and rolling back if any were invalid, rather than checking up-front.\r\n        var initialState = {\r\n            value: this.value.slice(),\r\n            selection: { ...this.selection },\r\n            _lastOp: this._lastOp,\r\n            _history: this._history.slice(),\r\n            _historyIndex: this._historyIndex,\r\n            _lastSelection: { ...this._lastSelection }\r\n        };\r\n        // If there are static characters at the start of the pattern and the cursor\r\n        // or selection is within them, the static characters must match for a valid\r\n        // paste.\r\n        if (this.selection.start < this.pattern.firstEditableIndex) {\r\n            for (var i = 0, l = this.pattern.firstEditableIndex - this.selection.start; i < l; i++) {\r\n                if (input.charAt(i) !== this.pattern.pattern[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            // Continue as if the selection and input started from the editable part of\r\n            // the pattern.\r\n            input = input.substring(this.pattern.firstEditableIndex - this.selection.start);\r\n            this.selection.start = this.pattern.firstEditableIndex;\r\n        }\r\n        for (i = 0, l = input.length; i < l && this.selection.start <= this.pattern.lastEditableIndex; i++) {\r\n            var valid = this.input(input.charAt(i));\r\n            // Allow static parts of the pattern to appear in pasted input - they will\r\n            // already have been stepped over by input(), so verify that the value\r\n            // deemed invalid by input() was the expected static character.\r\n            if (!valid) {\r\n                if (this.selection.start > 0) {\r\n                    // XXX This only allows for one static character to be skipped\r\n                    var patternIndex = this.selection.start - 1;\r\n                    if (!this.pattern.isEditableIndex(patternIndex) &&\r\n                        input.charAt(i) === this.pattern.pattern[patternIndex]) {\r\n                        continue;\r\n                    }\r\n                }\r\n                Object.keys(initialState).forEach(key => {\r\n                    // @ts-ignore\r\n                    this[key] = initialState[key];\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    undo() {\r\n        // If there is no history, or nothing more on the history stack, we can't undo\r\n        if (this._history.length === 0 || this._historyIndex === 0) {\r\n            return false;\r\n        }\r\n        var historyItem;\r\n        if (this._historyIndex == null) {\r\n            // Not currently undoing, set up the initial history index\r\n            this._historyIndex = this._history.length - 1;\r\n            historyItem = this._history[this._historyIndex];\r\n            // Add a new history entry if anything has changed since the last one, so we\r\n            // can redo back to the initial state we started undoing from.\r\n            var value = this.getValue();\r\n            if (historyItem.value !== value ||\r\n                historyItem.selection.start !== this.selection.start ||\r\n                historyItem.selection.end !== this.selection.end) {\r\n                this._history.push({\r\n                    value: value,\r\n                    selection: { ...this.selection },\r\n                    lastOp: this._lastOp,\r\n                    startUndo: true\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            historyItem = this._history[--this._historyIndex];\r\n        }\r\n        this.value = historyItem.value.split('');\r\n        this.selection = historyItem.selection;\r\n        this._lastOp = historyItem.lastOp;\r\n        return true;\r\n    }\r\n    redo() {\r\n        if (this._history.length === 0 || this._historyIndex == null) {\r\n            return false;\r\n        }\r\n        var historyItem = this._history[++this._historyIndex];\r\n        // If this is the last history item, we're done redoing\r\n        if (this._historyIndex === this._history.length - 1) {\r\n            this._historyIndex = null;\r\n            // If the last history item was only added to start undoing, remove it\r\n            if (historyItem.startUndo) {\r\n                this._history.pop();\r\n            }\r\n        }\r\n        this.value = historyItem.value.split('');\r\n        this.selection = historyItem.selection;\r\n        this._lastOp = historyItem.lastOp;\r\n        return true;\r\n    }\r\n    setSelection(selection) {\r\n        this.selection = { ...selection };\r\n        if (this.selection.start === this.selection.end) {\r\n            if (this.selection.start < this.pattern.firstEditableIndex) {\r\n                this.selection.start = this.selection.end = this.pattern\r\n                    .firstEditableIndex;\r\n                return true;\r\n            }\r\n            // Set selection to the first editable, non-placeholder character before the selection\r\n            // OR to the beginning of the pattern\r\n            var index = this.selection.start;\r\n            while (index >= this.pattern.firstEditableIndex) {\r\n                if ((this.pattern.isEditableIndex(index - 1) &&\r\n                    this.value[index - 1] !== this.placeholderChar) ||\r\n                    index === this.pattern.firstEditableIndex) {\r\n                    this.selection.start = this.selection.end = index;\r\n                    break;\r\n                }\r\n                index--;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nInputMask.Pattern = Pattern;\r\nfunction extend(dest, src) {\r\n    if (src) {\r\n        let props = Object.keys(src);\r\n        for (var i = 0, l = props.length; i < l; i++) {\r\n            dest[props[i]] = src[props[i]];\r\n        }\r\n    }\r\n    return dest;\r\n}\r\nfunction copy(obj) {\r\n    return extend({}, obj);\r\n}\r\nexport default InputMask;\r\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"module"}