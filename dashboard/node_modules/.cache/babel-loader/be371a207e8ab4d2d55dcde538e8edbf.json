{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { getInitialPhoneDigits, getCountryForPartialE164Number, parsePhoneNumber } from './phoneInputHelpers.js';\nimport getInternationalPhoneNumberPrefix from './getInternationalPhoneNumberPrefix.js';\nimport { isCountrySupportedWithError, getSupportedCountries } from './countries.js';\nexport default function getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\n  var metadata = props.metadata,\n    countries = props.countries,\n    newDefaultCountry = props.defaultCountry,\n    newValue = props.value,\n    newReset = props.reset,\n    international = props.international,\n    displayInitialValueAsLocalNumber = props.displayInitialValueAsLocalNumber,\n    initialValueFormat = props.initialValueFormat;\n  var prevDefaultCountry = prevProps.defaultCountry,\n    prevValue = prevProps.value,\n    prevReset = prevProps.reset;\n  var country = state.country,\n    value = state.value,\n    hasUserSelectedACountry = state.hasUserSelectedACountry;\n  var _getInitialPhoneDigits = function _getInitialPhoneDigits(parameters) {\n    return getInitialPhoneDigits(_objectSpread(_objectSpread({}, parameters), {}, {\n      international: international,\n      useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n      metadata: metadata\n    }));\n  }; // Some users requested a way to reset the component\n  // (both number `<input/>` and country `<select/>`).\n  // Whenever `reset` property changes both number `<input/>`\n  // and country `<select/>` are reset.\n  // It's not implemented as some instance `.reset()` method\n  // because `ref` is forwarded to `<input/>`.\n  // It's also not replaced with just resetting `country` on\n  // external `value` reset, because a user could select a country\n  // and then not input any `value`, and so the selected country\n  // would be \"stuck\", if not using this `reset` property.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n\n  if (newReset !== prevReset) {\n    return {\n      phoneDigits: _getInitialPhoneDigits({\n        value: undefined,\n        defaultCountry: newDefaultCountry\n      }),\n      value: undefined,\n      country: newDefaultCountry,\n      hasUserSelectedACountry: undefined\n    };\n  } // `value` is the value currently shown in the component:\n  // it's stored in the component's `state`, and it's not the `value` property.\n  // `prevValue` is \"previous `value` property\".\n  // `newValue` is \"new `value` property\".\n  // If the default country changed\n  // (e.g. in case of ajax GeoIP detection after page loaded)\n  // then select it, but only if the user hasn't already manually\n  // selected a country, and no phone number has been manually entered so far.\n  // Because if the user has already started inputting a phone number\n  // then they're okay with no country being selected at all (\"International\")\n  // and they don't want to be disturbed, don't want their input to be screwed, etc.\n\n  if (newDefaultCountry !== prevDefaultCountry) {\n    var isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata);\n    var noValueHasBeenEnteredByTheUser =\n    // By default, \"no value has been entered\" means `value` is `undefined`.\n    !value ||\n    // When `international` is `true`, and some country has been pre-selected,\n    // then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\n    // so in case of `international` being `true`, \"the user hasn't entered anything\" situation\n    // doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\n    international && value === _getInitialPhoneDigits({\n      value: undefined,\n      defaultCountry: prevDefaultCountry\n    }); // Only update the `defaultCountry` property if no phone number\n    // has been entered by the user or pre-set by the application.\n\n    var noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser;\n    if (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\n      return {\n        country: newDefaultCountry,\n        // If `phoneDigits` is empty, then automatically select the new `country`\n        // and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\n        // The code assumes that \"no phone number has been entered by the user\",\n        // and no `value` property has been passed, so the `phoneNumber` parameter\n        // of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\n        phoneDigits: _getInitialPhoneDigits({\n          value: undefined,\n          defaultCountry: newDefaultCountry\n        }),\n        // `value` is `undefined` and it stays so.\n        value: undefined\n      };\n    }\n  } // If a new `value` is set externally.\n  // (e.g. as a result of an ajax API request\n  //  to get user's phone after page loaded)\n  // The first part — `newValue !== prevValue` —\n  // is basically `props.value !== prevProps.value`\n  // so it means \"if value property was changed externally\".\n  // The second part — `newValue !== value` —\n  // is for ignoring the `getDerivedStateFromProps()` call\n  // which happens in `this.onChange()` right after `this.setState()`.\n  // If this `getDerivedStateFromProps()` call isn't ignored\n  // then the country flag would reset on each input.\n\n  if (!valuesAreEqual(newValue, prevValue) && !valuesAreEqual(newValue, value)) {\n    var phoneNumber;\n    var parsedCountry;\n    if (newValue) {\n      phoneNumber = parsePhoneNumber(newValue, metadata);\n      var supportedCountries = getSupportedCountries(countries, metadata);\n      if (phoneNumber && phoneNumber.country) {\n        // Ignore `else` because all countries are supported in metadata.\n\n        /* istanbul ignore next */\n        if (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\n          parsedCountry = phoneNumber.country;\n        }\n      } else {\n        parsedCountry = getCountryForPartialE164Number(newValue, {\n          country: undefined,\n          countries: supportedCountries,\n          metadata: metadata\n        }); // In cases when multiple countries correspond to the same country calling code,\n        // the phone number digits of `newValue` have to be matched against country-specific\n        // regular expressions in order to determine the exact country.\n        // Sometimes, that algorithm can't decide for sure which country does the phone number belong to,\n        // for example when the digits of `newValue` don't match any of those regular expressions.\n        // and the country of the phone number couldn't be determined.\n        // In those cases, people prefer the component to show the flag of the `defaultCountry`\n        // if the phone number could potentially belong to that `defaultCountry`.\n        // At least that's how the component behaves when a user pastes an international\n        // phone number into the input field: for example, when `defaultCountry` is `\"US\"`\n        // and the user pastes value \"+1 555 555 5555\" into the input field, it keep showing \"US\" flag.\n        // So when setting new `value` property externally, the component should behave the same way:\n        // it should select the `defaultCountry` when the new `value` could potentially belong\n        // to that country in cases when the exact country can't be determined.\n        // https://github.com/catamphetamine/react-phone-number-input/issues/413#issuecomment-1536219404\n\n        if (!parsedCountry) {\n          if (newValue.indexOf(getInternationalPhoneNumberPrefix(newDefaultCountry, metadata)) === 0) {\n            parsedCountry = newDefaultCountry;\n          }\n        }\n      }\n    }\n    var hasUserSelectedACountryUpdate;\n    if (!newValue) {\n      // Reset `hasUserSelectedACountry` flag in `state`.\n      hasUserSelectedACountryUpdate = {\n        hasUserSelectedACountry: undefined\n      };\n    }\n    return _objectSpread(_objectSpread({}, hasUserSelectedACountryUpdate), {}, {\n      phoneDigits: _getInitialPhoneDigits({\n        phoneNumber: phoneNumber,\n        value: newValue,\n        defaultCountry: newDefaultCountry\n      }),\n      value: newValue,\n      country: newValue ? parsedCountry : newDefaultCountry\n    });\n  } // `defaultCountry` didn't change.\n  // `value` didn't change.\n  // `phoneDigits` didn't change, because `value` didn't change.\n  //\n  // So no need to update state.\n}\n\nfunction valuesAreEqual(value1, value2) {\n  // If `value` has been set to `null` externally then convert it to `undefined`.\n  //\n  // For example, `react-hook-form` sets `value` to `null` when the user clears the input.\n  // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/164\n  // In that case, without this conversion of `null` to `undefined`, it would reset\n  // the selected country to `defaultCountry` because in that case `newValue !== value`\n  // because `null !== undefined`.\n  //\n  // Historically, empty `value` is encoded as `undefined`.\n  // Perhaps empty `value` would be better encoded as `null` instead.\n  // But because that would be a potentially breaking change for some people,\n  // it's left as is for the current \"major\" version of this library.\n  //\n  if (value1 === null) {\n    value1 = undefined;\n  }\n  if (value2 === null) {\n    value2 = undefined;\n  }\n  return value1 === value2;\n}","map":{"version":3,"sources":["../../source/helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js"],"names":["getInitialPhoneDigits","getCountryForPartialE164Number","parsePhoneNumber","getInternationalPhoneNumberPrefix","isCountrySupportedWithError","getSupportedCountries","getPhoneInputWithCountryStateUpdateFromNewProps","props","prevProps","state","metadata","countries","defaultCountry","newDefaultCountry","value","newValue","reset","newReset","international","displayInitialValueAsLocalNumber","initialValueFormat","prevDefaultCountry","prevValue","prevReset","country","hasUserSelectedACountry","_getInitialPhoneDigits","parameters","useNationalFormat","phoneDigits","undefined","isNewDefaultCountrySupported","noValueHasBeenEnteredByTheUser","noValueHasBeenEntered","valuesAreEqual","phoneNumber","parsedCountry","supportedCountries","indexOf","hasUserSelectedACountryUpdate","value1","value2"],"mappings":"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","sourcesContent":["import {\r\n\tgetInitialPhoneDigits,\r\n\tgetCountryForPartialE164Number,\r\n\tparsePhoneNumber\r\n} from './phoneInputHelpers.js'\r\n\r\nimport getInternationalPhoneNumberPrefix from './getInternationalPhoneNumberPrefix.js'\r\n\r\nimport {\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries\r\n} from './countries.js'\r\n\r\nexport default function getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\r\n\tconst {\r\n\t\tmetadata,\r\n\t\tcountries,\r\n\t\tdefaultCountry: newDefaultCountry,\r\n\t\tvalue: newValue,\r\n\t\treset: newReset,\r\n\t\tinternational,\r\n\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t// superceded by `initialValueFormat` property.\r\n\t\tdisplayInitialValueAsLocalNumber,\r\n\t\tinitialValueFormat\r\n\t} = props\r\n\r\n\tconst {\r\n\t\tdefaultCountry: prevDefaultCountry,\r\n\t\tvalue: prevValue,\r\n\t\treset: prevReset\r\n\t} = prevProps\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tvalue,\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\t\thasUserSelectedACountry\r\n\t} = state\r\n\r\n\tconst _getInitialPhoneDigits = (parameters) => getInitialPhoneDigits({\r\n\t\t...parameters,\r\n\t\tinternational,\r\n\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\tmetadata\r\n\t})\r\n\r\n\t// Some users requested a way to reset the component\r\n\t// (both number `<input/>` and country `<select/>`).\r\n\t// Whenever `reset` property changes both number `<input/>`\r\n\t// and country `<select/>` are reset.\r\n\t// It's not implemented as some instance `.reset()` method\r\n\t// because `ref` is forwarded to `<input/>`.\r\n\t// It's also not replaced with just resetting `country` on\r\n\t// external `value` reset, because a user could select a country\r\n\t// and then not input any `value`, and so the selected country\r\n\t// would be \"stuck\", if not using this `reset` property.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\tif (newReset !== prevReset) {\r\n\t\treturn {\r\n\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t}),\r\n\t\t\tvalue: undefined,\r\n\t\t\tcountry: newDefaultCountry,\r\n\t\t\thasUserSelectedACountry: undefined\r\n\t\t}\r\n\t}\r\n\r\n\t// `value` is the value currently shown in the component:\r\n\t// it's stored in the component's `state`, and it's not the `value` property.\r\n\t// `prevValue` is \"previous `value` property\".\r\n\t// `newValue` is \"new `value` property\".\r\n\r\n\t// If the default country changed\r\n\t// (e.g. in case of ajax GeoIP detection after page loaded)\r\n\t// then select it, but only if the user hasn't already manually\r\n\t// selected a country, and no phone number has been manually entered so far.\r\n\t// Because if the user has already started inputting a phone number\r\n\t// then they're okay with no country being selected at all (\"International\")\r\n\t// and they don't want to be disturbed, don't want their input to be screwed, etc.\r\n\tif (newDefaultCountry !== prevDefaultCountry) {\r\n\t\tconst isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata)\r\n\t\tconst noValueHasBeenEnteredByTheUser = (\r\n\t\t\t// By default, \"no value has been entered\" means `value` is `undefined`.\r\n\t\t\t!value ||\r\n\t\t\t// When `international` is `true`, and some country has been pre-selected,\r\n\t\t\t// then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\r\n\t\t\t// so in case of `international` being `true`, \"the user hasn't entered anything\" situation\r\n\t\t\t// doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\r\n\t\t\t(international && value === _getInitialPhoneDigits({\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdefaultCountry: prevDefaultCountry\r\n\t\t\t}))\r\n\t\t)\r\n\t\t// Only update the `defaultCountry` property if no phone number\r\n\t\t// has been entered by the user or pre-set by the application.\r\n\t\tconst noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser\r\n\t\tif (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\r\n\t\t\treturn {\r\n\t\t\t\tcountry: newDefaultCountry,\r\n\t\t\t\t// If `phoneDigits` is empty, then automatically select the new `country`\r\n\t\t\t\t// and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\t// The code assumes that \"no phone number has been entered by the user\",\r\n\t\t\t\t// and no `value` property has been passed, so the `phoneNumber` parameter\r\n\t\t\t\t// of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\r\n\t\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\t\tvalue: undefined,\r\n\t\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t\t}),\r\n\t\t\t\t// `value` is `undefined` and it stays so.\r\n\t\t\t\tvalue: undefined\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If a new `value` is set externally.\r\n\t// (e.g. as a result of an ajax API request\r\n\t//  to get user's phone after page loaded)\r\n\t// The first part — `newValue !== prevValue` —\r\n\t// is basically `props.value !== prevProps.value`\r\n\t// so it means \"if value property was changed externally\".\r\n\t// The second part — `newValue !== value` —\r\n\t// is for ignoring the `getDerivedStateFromProps()` call\r\n\t// which happens in `this.onChange()` right after `this.setState()`.\r\n\t// If this `getDerivedStateFromProps()` call isn't ignored\r\n\t// then the country flag would reset on each input.\r\n\tif (!valuesAreEqual(newValue, prevValue) && !valuesAreEqual(newValue, value)) {\r\n\t\tlet phoneNumber\r\n\t\tlet parsedCountry\r\n\t\tif (newValue) {\r\n\t\t\tphoneNumber = parsePhoneNumber(newValue, metadata)\r\n\t\t\tconst supportedCountries = getSupportedCountries(countries, metadata)\r\n\t\t\tif (phoneNumber && phoneNumber.country) {\r\n\t\t\t\t// Ignore `else` because all countries are supported in metadata.\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tif (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\r\n\t\t\t\t\tparsedCountry = phoneNumber.country\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tparsedCountry = getCountryForPartialE164Number(newValue, {\r\n\t\t\t\t\tcountry: undefined,\r\n\t\t\t\t\tcountries: supportedCountries,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t})\r\n\t\t\t\t// In cases when multiple countries correspond to the same country calling code,\r\n\t\t\t\t// the phone number digits of `newValue` have to be matched against country-specific\r\n\t\t\t\t// regular expressions in order to determine the exact country.\r\n\t\t\t\t// Sometimes, that algorithm can't decide for sure which country does the phone number belong to,\r\n\t\t\t\t// for example when the digits of `newValue` don't match any of those regular expressions.\r\n\t\t\t\t// and the country of the phone number couldn't be determined.\r\n\t\t\t\t// In those cases, people prefer the component to show the flag of the `defaultCountry`\r\n\t\t\t\t// if the phone number could potentially belong to that `defaultCountry`.\r\n\t\t\t\t// At least that's how the component behaves when a user pastes an international\r\n\t\t\t\t// phone number into the input field: for example, when `defaultCountry` is `\"US\"`\r\n\t\t\t\t// and the user pastes value \"+1 555 555 5555\" into the input field, it keep showing \"US\" flag.\r\n\t\t\t\t// So when setting new `value` property externally, the component should behave the same way:\r\n\t\t\t\t// it should select the `defaultCountry` when the new `value` could potentially belong\r\n\t\t\t\t// to that country in cases when the exact country can't be determined.\r\n\t\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/413#issuecomment-1536219404\r\n\t\t\t\tif (!parsedCountry) {\r\n\t\t\t\t\tif (newValue.indexOf(getInternationalPhoneNumberPrefix(newDefaultCountry, metadata)) === 0) {\r\n\t\t\t\t\t\tparsedCountry = newDefaultCountry\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet hasUserSelectedACountryUpdate\r\n\t\tif (!newValue) {\r\n\t\t\t// Reset `hasUserSelectedACountry` flag in `state`.\r\n\t\t\thasUserSelectedACountryUpdate = {\r\n\t\t\t\thasUserSelectedACountry: undefined\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\t...hasUserSelectedACountryUpdate,\r\n\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tvalue: newValue,\r\n\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t}),\r\n\t\t\tvalue: newValue,\r\n\t\t\tcountry: newValue ? parsedCountry : newDefaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\t// `defaultCountry` didn't change.\r\n\t// `value` didn't change.\r\n\t// `phoneDigits` didn't change, because `value` didn't change.\r\n\t//\r\n\t// So no need to update state.\r\n}\r\n\r\nfunction valuesAreEqual(value1, value2) {\r\n\t// If `value` has been set to `null` externally then convert it to `undefined`.\r\n\t//\r\n\t// For example, `react-hook-form` sets `value` to `null` when the user clears the input.\r\n\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/164\r\n\t// In that case, without this conversion of `null` to `undefined`, it would reset\r\n\t// the selected country to `defaultCountry` because in that case `newValue !== value`\r\n\t// because `null !== undefined`.\r\n\t//\r\n\t// Historically, empty `value` is encoded as `undefined`.\r\n\t// Perhaps empty `value` would be better encoded as `null` instead.\r\n\t// But because that would be a potentially breaking change for some people,\r\n\t// it's left as is for the current \"major\" version of this library.\r\n\t//\r\n\tif (value1 === null) {\r\n\t\tvalue1 = undefined\r\n\t}\r\n\tif (value2 === null) {\r\n\t\tvalue2 = undefined\r\n\t}\r\n\treturn value1 === value2\r\n}"]},"metadata":{},"sourceType":"module"}