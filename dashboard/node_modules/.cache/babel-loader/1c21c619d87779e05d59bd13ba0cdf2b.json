{"ast":null,"code":"import { createSlice, createAction } from '@reduxjs/toolkit';\nexport var defaultTheme = localStorage.getItem('theme') || 'dark';\nlocalStorage.setItem('theme', defaultTheme);\nvar initialState = {\n  theme: defaultTheme\n};\nexport var setTheme = createAction('theme/setTheme', function (theme) {\n  localStorage.setItem('theme', theme);\n  return {\n    payload: theme\n  };\n});\nexport var themeSlice = createSlice({\n  name: 'theme',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(setTheme, function (state, action) {\n      state.theme = action.payload;\n    });\n  }\n});\nexport default themeSlice.reducer;","map":{"version":3,"sources":["/home/tj/fl-carla/dashboard/src/store/slices/themeSlice.ts"],"names":["createSlice","createAction","defaultTheme","localStorage","getItem","setItem","initialState","theme","setTheme","payload","themeSlice","name","reducers","extraReducers","builder","addCase","state","action","reducer"],"mappings":"AACA,SAASA,WAAT,EAAsBC,YAAtB,QAAyD,kBAAzD;AAMA,OAAO,IAAMC,YAAY,GAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,IAAgD,MAArE;AAEPD,YAAY,CAACE,OAAb,CAAqB,OAArB,EAA8BH,YAA9B;AAEA,IAAMI,YAAwB,GAAG;AAC/BC,EAAAA,KAAK,EAAEL;AADwB,CAAjC;AAIA,OAAO,IAAMM,QAAQ,GAAGP,YAAY,CAA2B,gBAA3B,EAA6C,UAACM,KAAD,EAAsB;AACrGJ,EAAAA,YAAY,CAACE,OAAb,CAAqB,OAArB,EAA8BE,KAA9B;AACA,SAAO;AACLE,IAAAA,OAAO,EAAEF;AADJ,GAAP;AAGD,CALmC,CAA7B;AAOP,OAAO,IAAMG,UAAU,GAAGV,WAAW,CAAC;AACpCW,EAAAA,IAAI,EAAE,OAD8B;AAEpCL,EAAAA,YAAY,EAAZA,YAFoC;AAGpCM,EAAAA,QAAQ,EAAE,EAH0B;AAIpCC,EAAAA,aAAa,EAAE,uBAACC,OAAD,EAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBP,QAAhB,EAA0B,UAACQ,KAAD,EAAQC,MAAR,EAAmB;AAC3CD,MAAAA,KAAK,CAACT,KAAN,GAAcU,MAAM,CAACR,OAArB;AACD,KAFD;AAGD;AARmC,CAAD,CAA9B;AAWP,eAAeC,UAAU,CAACQ,OAA1B","sourcesContent":["import { ThemeType } from '@app/interfaces/interfaces';\nimport { createSlice, createAction, PrepareAction } from '@reduxjs/toolkit';\n\ninterface ThemeState {\n  theme: ThemeType;\n}\n\nexport const defaultTheme = (localStorage.getItem('theme') as ThemeType) || 'dark';\n\nlocalStorage.setItem('theme', defaultTheme);\n\nconst initialState: ThemeState = {\n  theme: defaultTheme,\n};\n\nexport const setTheme = createAction<PrepareAction<ThemeType>>('theme/setTheme', (theme: ThemeType) => {\n  localStorage.setItem('theme', theme);\n  return {\n    payload: theme,\n  };\n});\n\nexport const themeSlice = createSlice({\n  name: 'theme',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(setTheme, (state, action) => {\n      state.theme = action.payload;\n    });\n  },\n});\n\nexport default themeSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}