{"ast":null,"code":"import _objectSpread from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";\nimport _objectWithoutProperties from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectWithoutProperties.js\";\nvar _excluded = [\"bounds\", \"url\"];\nimport { createLayerComponent, updateMediaOverlay } from '@react-leaflet/core';\nimport { VideoOverlay as LeafletVideoOverlay } from 'leaflet';\nexport var VideoOverlay = createLayerComponent(function createVideoOverlay(_ref, ctx) {\n  var bounds = _ref.bounds,\n      url = _ref.url,\n      options = _objectWithoutProperties(_ref, _excluded);\n\n  var instance = new LeafletVideoOverlay(url, bounds, options);\n\n  if (options.play === true) {\n    var _instance$getElement;\n\n    (_instance$getElement = instance.getElement()) == null ? void 0 : _instance$getElement.play();\n  }\n\n  return {\n    instance: instance,\n    context: _objectSpread(_objectSpread({}, ctx), {}, {\n      overlayContainer: instance\n    })\n  };\n}, function updateVideoOverlay(overlay, props, prevProps) {\n  updateMediaOverlay(overlay, props, prevProps);\n\n  if (typeof props.url === 'string' && props.url !== prevProps.url) {\n    overlay.setUrl(props.url);\n  }\n\n  var video = overlay.getElement();\n\n  if (video != null) {\n    if (props.play === true && !prevProps.play) {\n      video.play();\n    } else if (!props.play && prevProps.play === true) {\n      video.pause();\n    }\n  }\n});","map":{"version":3,"sources":["D:/fl-carla/node_modules/react-leaflet/esm/VideoOverlay.js"],"names":["createLayerComponent","updateMediaOverlay","VideoOverlay","LeafletVideoOverlay","createVideoOverlay","_ref","ctx","bounds","url","options","instance","play","_instance$getElement","getElement","context","overlayContainer","updateVideoOverlay","overlay","props","prevProps","setUrl","video","pause"],"mappings":";;;AAAA,SAASA,oBAAT,EAA+BC,kBAA/B,QAAyD,qBAAzD;AACA,SAASC,YAAY,IAAIC,mBAAzB,QAAoD,SAApD;AACA,OAAO,IAAMD,YAAY,GAAGF,oBAAoB,CAAC,SAASI,kBAAT,CAA4BC,IAA5B,EAAkCC,GAAlC,EAAuC;AACtF,MACEC,MADF,GAIIF,IAJJ,CACEE,MADF;AAAA,MAEEC,GAFF,GAIIH,IAJJ,CAEEG,GAFF;AAAA,MAGKC,OAHL,4BAIIJ,IAJJ;;AAKA,MAAMK,QAAQ,GAAG,IAAIP,mBAAJ,CAAwBK,GAAxB,EAA6BD,MAA7B,EAAqCE,OAArC,CAAjB;;AAEA,MAAIA,OAAO,CAACE,IAAR,KAAiB,IAArB,EAA2B;AACzB,QAAIC,oBAAJ;;AAEA,KAACA,oBAAoB,GAAGF,QAAQ,CAACG,UAAT,EAAxB,KAAkD,IAAlD,GAAyD,KAAK,CAA9D,GAAkED,oBAAoB,CAACD,IAArB,EAAlE;AACD;;AAED,SAAO;AACLD,IAAAA,QAAQ,EAARA,QADK;AAELI,IAAAA,OAAO,kCAAOR,GAAP;AACLS,MAAAA,gBAAgB,EAAEL;AADb;AAFF,GAAP;AAMD,CApB+C,EAoB7C,SAASM,kBAAT,CAA4BC,OAA5B,EAAqCC,KAArC,EAA4CC,SAA5C,EAAuD;AACxDlB,EAAAA,kBAAkB,CAACgB,OAAD,EAAUC,KAAV,EAAiBC,SAAjB,CAAlB;;AAEA,MAAI,OAAOD,KAAK,CAACV,GAAb,KAAqB,QAArB,IAAiCU,KAAK,CAACV,GAAN,KAAcW,SAAS,CAACX,GAA7D,EAAkE;AAChES,IAAAA,OAAO,CAACG,MAAR,CAAeF,KAAK,CAACV,GAArB;AACD;;AAED,MAAMa,KAAK,GAAGJ,OAAO,CAACJ,UAAR,EAAd;;AAEA,MAAIQ,KAAK,IAAI,IAAb,EAAmB;AACjB,QAAIH,KAAK,CAACP,IAAN,KAAe,IAAf,IAAuB,CAACQ,SAAS,CAACR,IAAtC,EAA4C;AAC1CU,MAAAA,KAAK,CAACV,IAAN;AACD,KAFD,MAEO,IAAI,CAACO,KAAK,CAACP,IAAP,IAAeQ,SAAS,CAACR,IAAV,KAAmB,IAAtC,EAA4C;AACjDU,MAAAA,KAAK,CAACC,KAAN;AACD;AACF;AACF,CApC+C,CAAzC","sourcesContent":["import { createLayerComponent, updateMediaOverlay } from '@react-leaflet/core';\r\nimport { VideoOverlay as LeafletVideoOverlay } from 'leaflet';\r\nexport const VideoOverlay = createLayerComponent(function createVideoOverlay(_ref, ctx) {\r\n  let {\r\n    bounds,\r\n    url,\r\n    ...options\r\n  } = _ref;\r\n  const instance = new LeafletVideoOverlay(url, bounds, options);\r\n\r\n  if (options.play === true) {\r\n    var _instance$getElement;\r\n\r\n    (_instance$getElement = instance.getElement()) == null ? void 0 : _instance$getElement.play();\r\n  }\r\n\r\n  return {\r\n    instance,\r\n    context: { ...ctx,\r\n      overlayContainer: instance\r\n    }\r\n  };\r\n}, function updateVideoOverlay(overlay, props, prevProps) {\r\n  updateMediaOverlay(overlay, props, prevProps);\r\n\r\n  if (typeof props.url === 'string' && props.url !== prevProps.url) {\r\n    overlay.setUrl(props.url);\r\n  }\r\n\r\n  const video = overlay.getElement();\r\n\r\n  if (video != null) {\r\n    if (props.play === true && !prevProps.play) {\r\n      video.play();\r\n    } else if (!props.play && prevProps.play === true) {\r\n      video.pause();\r\n    }\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}