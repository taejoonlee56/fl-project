{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport compare from './tools/semver-compare.js'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n      // The test case could be found by searching for \"nonGeographical\".\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        // In that metadata, there was no concept of \"non-geographic\" metadata\n        // so metadata for `001` country code was stored along with other countries.\n        // The test case can be found by searching for:\n        // \"should work around `nonGeographic` metadata not existing\".\n        var countryCodes = this.countryCallingCodes()[callingCode];\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n  return Metadata;\n}();\nexport { Metadata as default };\nvar NumberingPlan = /*#__PURE__*/function () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    } // Is always present.\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    } // Is only present when a country supports multiple IDD prefixes.\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    } // \"possible length\" data is always present in Google's metadata.\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n  return NumberingPlan;\n}();\nvar Format = /*#__PURE__*/function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n    this._format = format;\n    this.metadata = metadata;\n  }\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() &&\n      // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\nvar Type = /*#__PURE__*/function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n    this.type = type;\n    this.metadata = metadata;\n  }\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n  return Type;\n}();\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n    case 'MOBILE':\n      return types[1];\n    case 'TOLL_FREE':\n      return types[2];\n    case 'PREMIUM_RATE':\n      return types[3];\n    case 'PERSONAL_NUMBER':\n      return types[4];\n    case 'VOICEMAIL':\n      return types[5];\n    case 'UAN':\n      return types[6];\n    case 'PAGER':\n      return types[7];\n    case 'VOIP':\n      return types[8];\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\nfunction setVersion(metadata) {\n  var version = metadata.version;\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }","map":{"version":3,"sources":["../source/metadata.js"],"names":["compare","V2","V3","V4","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","metadata","validateMetadata","setVersion","call","keys","countries","filter","_","countryCode","v1","v2","v3","nonGeographic","nonGeographical","country","getCountryMetadata","undefined","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","length","selectNumberingPlan","test","hasCountry","Error","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","type","ext","country_phone_code_to_countries","country_calling_codes","globalMetadataObject","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","getType","Type","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","is_object","Object","join","type_of","getExtPrefix","getCountryCallingCode","countryCallingCode","isSupportedCountry","version","v4"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,OAAP,MAAoB,2BAApB,C,CAEA;AACA;;AACA,IAAMC,EAAE,GAAG,QAAX,C,CAEA;;AACA,IAAMC,EAAE,GAAG,OAAX,C,CAEA;;AACA,IAAMC,EAAE,GAAG,QAAX;AAEA,IAAMC,kBAAkB,GAAG,QAA3B;AAEA,IAAMC,oBAAoB,GAAG,OAA7B;AAEA;AACA;AACA;;IACqBC,Q;EACpB,SAAA,QAAA,CAAYC,QAAZ,EAAsB;IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA;IACrBC,gBAAgB,CAACD,QAAD,CAAhBC;IACA,IAAA,CAAKD,QAAL,GAAgBA,QAAhB;IACAE,UAAU,CAACC,IAAXD,CAAgB,IAAhBA,EAAsBF,QAAtBE,CAAAA;EACA;;;WAED,SAAA,YAAA,CAAA,EAAe;MACd,OAAO,MAAM,CAACE,IAAP,CAAY,IAAA,CAAKJ,QAAL,CAAcK,SAA1B,CAAA,CAAqCC,MAArC,CAA4C,UAAA,CAAC,EAAA;QAAA,OAAIC,CAAC,KAAK,KAAV;MAAA,CAA7C,CAAP;IACA;;;WAED,SAAA,kBAAA,CAAmBC,WAAnB,EAAgC;MAC/B,OAAO,IAAA,CAAKR,QAAL,CAAcK,SAAd,CAAwBG,WAAxB,CAAP;IACA;;;WAED,SAAA,aAAA,CAAA,EAAgB;MACf,IAAI,IAAA,CAAKC,EAAL,IAAW,IAAA,CAAKC,EAAhB,IAAsB,IAAA,CAAKC,EAA/B,EAAmC,OADpB,CAEf;MACA;MACA;;MACA,OAAO,IAAA,CAAKX,QAAL,CAAcY,aAAd,IAA+B,IAAA,CAAKZ,QAAL,CAAca,eAApD;IACA;;;WAED,SAAA,UAAA,CAAWC,OAAX,EAAoB;MACnB,OAAO,IAAA,CAAKC,kBAAL,CAAwBD,OAAxB,CAAA,KAAqCE,SAA5C;IACA;;;WAED,SAAA,cAAA,CAAeC,WAAf,EAA4B;MAC3B,IAAI,IAAA,CAAKC,6BAAL,CAAmCD,WAAnC,CAAJ,EAAqD;QACpD,OAAO,IAAP;MACA;MACD,IAAI,IAAA,CAAKL,aAAL,CAAA,CAAJ,EAA0B;QACzB,IAAI,IAAA,CAAKA,aAAL,CAAA,CAAA,CAAqBK,WAArB,CAAJ,EAAuC;UACtC,OAAO,IAAP;QACA;MACD,CAJD,MAIO;QACN;QACA,IAAME,YAAY,GAAG,IAAA,CAAKC,mBAAL,CAAA,CAAA,CAA2BH,WAA3B,CAArB;QACA,IAAIE,YAAY,IAAIA,YAAY,CAACE,MAAbF,KAAwB,CAAxCA,IAA6CA,YAAY,CAAC,CAAD,CAAZA,KAAoB,KAArE,EAA4E;UAC3E,OAAO,IAAP;QACA;MACD;IACD;;;WAED,SAAA,0BAAA,CAA2BF,WAA3B,EAAwC;MACvC,IAAI,IAAA,CAAKL,aAAL,CAAA,CAAJ,EAA0B;QACzB,OAAO,IAAA,CAAKA,aAAL,CAAA,CAAA,CAAqBK,WAArB,CAAA,GAAoC,IAApC,GAA2C,KAAlD;MACA,CAFD,MAEO;QACN,OAAO,IAAA,CAAKC,6BAAL,CAAmCD,WAAnC,CAAA,GAAkD,KAAlD,GAA0D,IAAjE;MACA;IACD,C,CAED;;;WACA,SAAA,OAAA,CAAQT,WAAR,EAAqB;MACpB,OAAO,IAAA,CAAKc,mBAAL,CAAyBd,WAAzB,CAAP;IACA;;;WAED,SAAA,mBAAA,CAAoBA,WAApB,EAAiCS,WAAjC,EAA8C;MAC7C;MACA,IAAIT,WAAW,IAAIV,oBAAoB,CAACyB,IAArBzB,CAA0BU,WAA1BV,CAAnB,EAA2D;QAC1DmB,WAAW,GAAGT,WAAdS;QACAT,WAAW,GAAG,IAAdA;MACA;MACD,IAAIA,WAAW,IAAIA,WAAW,KAAK,KAAnC,EAA0C;QACzC,IAAI,CAAC,IAAA,CAAKgB,UAAL,CAAgBhB,WAAhB,CAAL,EAAmC;UAClC,MAAM,IAAIiB,KAAJ,CAAA,mBAAA,CAAA,MAAA,CAA8BjB,WAA9B,CAAA,CAAN;QACA;QACD,IAAA,CAAKkB,aAAL,GAAqB,IAAIC,aAAJ,CAAkB,IAAA,CAAKZ,kBAAL,CAAwBP,WAAxB,CAAlB,EAAwD,IAAxD,CAArB;MACA,CALD,MAKO,IAAIS,WAAJ,EAAiB;QACvB,IAAI,CAAC,IAAA,CAAKW,cAAL,CAAoBX,WAApB,CAAL,EAAuC;UACtC,MAAM,IAAIQ,KAAJ,CAAA,wBAAA,CAAA,MAAA,CAAmCR,WAAnC,CAAA,CAAN;QACA;QACD,IAAA,CAAKS,aAAL,GAAqB,IAAIC,aAAJ,CAAkB,IAAA,CAAKE,wBAAL,CAA8BZ,WAA9B,CAAlB,EAA8D,IAA9D,CAArB;MACA,CALM,MAKA;QACN,IAAA,CAAKS,aAAL,GAAqBV,SAArB;MACA;MACD,OAAO,IAAP;IACA;;;WAED,SAAA,6BAAA,CAA8BC,WAA9B,EAA2C;MAC1C,IAAME,YAAY,GAAG,IAAA,CAAKC,mBAAL,CAAA,CAAA,CAA2BH,WAA3B,CAArB;MACA,IAAIE,YAAJ,EAAkB;QACjB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,IAAIA,YAAY,CAACE,MAAbF,KAAwB,CAAxBA,IAA6BA,YAAY,CAAC,CAAD,CAAZA,CAAgBE,MAAhBF,KAA2B,CAA5D,EAA+D;UAC9D;QACA;QACD,OAAOA,YAAP;MACA;IACD;;;WAED,SAAA,4BAAA,CAA6BF,WAA7B,EAA0C;MACzC,IAAME,YAAY,GAAG,IAAA,CAAKD,6BAAL,CAAmCD,WAAnC,CAArB;MACA,IAAIE,YAAJ,EAAkB;QACjB,OAAOA,YAAY,CAAC,CAAD,CAAnB;MACA;IACD;;;WAED,SAAA,wBAAA,CAAyBF,WAAzB,EAAsC;MACrC,IAAMT,WAAW,GAAG,IAAA,CAAKsB,4BAAL,CAAkCb,WAAlC,CAApB;MACA,IAAIT,WAAJ,EAAiB;QAChB,OAAO,IAAA,CAAKO,kBAAL,CAAwBP,WAAxB,CAAP;MACA;MACD,IAAI,IAAA,CAAKI,aAAL,CAAA,CAAJ,EAA0B;QACzB,IAAMZ,QAAQ,GAAG,IAAA,CAAKY,aAAL,CAAA,CAAA,CAAqBK,WAArB,CAAjB;QACA,IAAIjB,QAAJ,EAAc;UACb,OAAOA,QAAP;QACA;MACD,CALD,MAKO;QACN;QACA;QACA;QACA;QACA;QACA,IAAMmB,YAAY,GAAG,IAAA,CAAKC,mBAAL,CAAA,CAAA,CAA2BH,WAA3B,CAArB;QACA,IAAIE,YAAY,IAAIA,YAAY,CAACE,MAAbF,KAAwB,CAAxCA,IAA6CA,YAAY,CAAC,CAAD,CAAZA,KAAoB,KAArE,EAA4E;UAC3E,OAAO,IAAA,CAAKnB,QAAL,CAAcK,SAAd,CAAwB,KAAxB,CAAP;QACA;MACD;IACD,C,CAED;;;WACA,SAAA,kBAAA,CAAA,EAAqB;MACpB,OAAO,IAAA,CAAKqB,aAAL,CAAmBT,WAAnB,CAAA,CAAP;IACA,C,CAED;;;WACA,SAAA,SAAA,CAAA,EAAY;MACX,OAAO,IAAA,CAAKS,aAAL,CAAmBK,SAAnB,CAAA,CAAP;IACA,C,CAED;;;WACA,SAAA,gBAAA,CAAA,EAAmB;MAClB,OAAO,IAAA,CAAKL,aAAL,CAAmBM,gBAAnB,CAAA,CAAP;IACA,C,CAED;;;WACA,SAAA,qBAAA,CAAA,EAAwB;MACvB,OAAO,IAAA,CAAKN,aAAL,CAAmBO,qBAAnB,CAAA,CAAP;IACA,C,CAED;;;WACA,SAAA,eAAA,CAAA,EAAkB;MACjB,OAAO,IAAA,CAAKP,aAAL,CAAmBQ,eAAnB,CAAA,CAAP;IACA,C,CAED;;;WACA,SAAA,OAAA,CAAA,EAAU;MACT,OAAO,IAAA,CAAKR,aAAL,CAAmBS,OAAnB,CAAA,CAAP;IACA,C,CAED;;;WACA,SAAA,wBAAA,CAAA,EAA2B;MAC1B,OAAO,IAAA,CAAKT,aAAL,CAAmBU,wBAAnB,CAAA,CAAP;IACA,C,CAED;;;WACA,SAAA,2BAAA,CAAA,EAA8B;MAC7B,OAAO,IAAA,CAAKV,aAAL,CAAmBW,2BAAnB,CAAA,CAAP;IACA,C,CAED;;;WACA,SAAA,aAAA,CAAA,EAAgB;MACf,OAAO,IAAA,CAAKX,aAAL,CAAmBY,aAAnB,CAAA,CAAP;IACA,C,CAED;;;WACA,SAAA,QAAA,CAAA,EAAW;MACV,OAAO,IAAA,CAAKZ,aAAL,CAAmBa,QAAnB,CAAA,CAAP;IACA,C,CAED;;;WACA,SAAA,IAAA,CAAKC,KAAL,EAAW;MACV,OAAO,IAAA,CAAKd,aAAL,CAAmBc,IAAnB,CAAwBA,KAAxB,CAAP;IACA,C,CAED;;;WACA,SAAA,GAAA,CAAA,EAAM;MACL,OAAO,IAAA,CAAKd,aAAL,CAAmBe,GAAnB,CAAA,CAAP;IACA;;;WAED,SAAA,mBAAA,CAAA,EAAsB;MACrB,IAAI,IAAA,CAAKhC,EAAT,EAAa,OAAO,IAAA,CAAKT,QAAL,CAAc0C,+BAArB;MACb,OAAO,IAAA,CAAK1C,QAAL,CAAc2C,qBAArB;IACA,C,CAED;;;WACA,SAAA,iCAAA,CAAkC1B,WAAlC,EAA+C;MAC9C,OAAO,IAAA,CAAKK,mBAAL,CAAyBL,WAAzB,CAAP;IACA;;;WAED,SAAA,wBAAA,CAAA,EAA2B;MAC1B,OAAO,IAAA,CAAKS,aAAL,KAAuBV,SAA9B;IACA;;;;SAxMmBjB,Q;IA2Mf4B,a;EACL,SAAA,aAAA,CAAY3B,QAAZ,EAAsB4C,oBAAtB,EAA4C;IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,CAAA;IAC3C,IAAA,CAAKA,oBAAL,GAA4BA,oBAA5B;IACA,IAAA,CAAK5C,QAAL,GAAgBA,QAAhB;IACAE,UAAU,CAACC,IAAXD,CAAgB,IAAhBA,EAAsB0C,oBAAoB,CAAC5C,QAA3CE,CAAAA;EACA;;;WAED,SAAA,WAAA,CAAA,EAAc;MACb,OAAO,IAAA,CAAKF,QAAL,CAAc,CAAd,CAAP;IACA,C,CAED;IACA;IACA;IACA;IACA;IACA;;;WACA,SAAA,kCAAA,CAAA,EAAqC;MACpC,OAAO,IAAA,CAAK4C,oBAAL,CAA0Bf,wBAA1B,CAAmD,IAAA,CAAKZ,WAAL,CAAA,CAAnD,CAAP;IACA,C,CAED;;;WACA,SAAA,SAAA,CAAA,EAAY;MACX,IAAI,IAAA,CAAKR,EAAL,IAAW,IAAA,CAAKC,EAApB,EAAwB;MACxB,OAAO,IAAA,CAAKV,QAAL,CAAc,CAAd,CAAP;IACA,C,CAED;;;WACA,SAAA,gBAAA,CAAA,EAAmB;MAClB,IAAI,IAAA,CAAKS,EAAL,IAAW,IAAA,CAAKC,EAApB,EAAwB;MACxB,OAAO,IAAA,CAAKV,QAAL,CAAc,EAAd,CAAP;IACA;;;WAED,SAAA,qBAAA,CAAA,EAAwB;MACvB,IAAI,IAAA,CAAKS,EAAL,IAAW,IAAA,CAAKC,EAApB,EAAwB,OAAO,IAAA,CAAKV,QAAL,CAAc,CAAd,CAAP;MACxB,OAAO,IAAA,CAAKA,QAAL,CAAc,CAAd,CAAP;IACA,C,CAED;;;WACA,SAAA,eAAA,CAAA,EAAkB;MACjB,IAAI,IAAA,CAAKS,EAAT,EAAa;MACb,OAAO,IAAA,CAAKT,QAAL,CAAc,IAAA,CAAKU,EAAL,GAAU,CAAV,GAAc,CAA5B,CAAP;IACA;;;WAED,SAAA,WAAA,CAAYV,QAAZ,EAAsB;MACrB,OAAOA,QAAQ,CAAC,IAAA,CAAKS,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,CAAV,GAAc,CAA7B,CAAf;IACA,C,CAED;IACA;IACA;;;WACA,SAAA,OAAA,CAAA,EAAU;MAAA,IAAA,KAAA,GAAA,IAAA;MACT,IAAMyB,OAAO,GAAG,IAAA,CAAKU,WAAL,CAAiB,IAAA,CAAK7C,QAAtB,CAAA,IAAmC,IAAA,CAAK6C,WAAL,CAAiB,IAAA,CAAKC,kCAAL,CAAA,CAAjB,CAAnC,IAAkG,EAAlH;MACA,OAAO,OAAO,CAACC,GAAR,CAAY,UAAA,CAAC,EAAA;QAAA,OAAI,IAAIC,MAAJ,CAAWzC,CAAX,EAAc,KAAd,CAAJ;MAAA,CAAb,CAAP;IACA;;;WAED,SAAA,cAAA,CAAA,EAAiB;MAChB,OAAO,IAAA,CAAKP,QAAL,CAAc,IAAA,CAAKS,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,CAAV,GAAc,CAA1C,CAAP;IACA;;;WAED,SAAA,gCAAA,CAAiCV,QAAjC,EAA2C;MAC1C,OAAOA,QAAQ,CAAC,IAAA,CAAKS,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,CAAV,GAAc,CAA7B,CAAf;IACA,C,CAED;IACA;IACA;;;WACA,SAAA,4BAAA,CAAA,EAA+B;MAC9B,OAAO,IAAA,CAAKuC,gCAAL,CAAsC,IAAA,CAAKjD,QAA3C,CAAA,IAAwD,IAAA,CAAKiD,gCAAL,CAAsC,IAAA,CAAKH,kCAAL,CAAA,CAAtC,CAA/D;IACA;;;WAED,SAAA,yBAAA,CAAA,EAA4B;MAC3B,OAAO,IAAA,CAAK9C,QAAL,CAAc,IAAA,CAAKS,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,CAAV,GAAc,CAA1C,CAAP;IACA;;;WAED,SAAA,wBAAA,CAAA,EAA2B;MAC1B;MACA;MACA,OAAO,IAAA,CAAKwC,yBAAL,CAAA,CAAA,IAAoC,IAAA,CAAKC,cAAL,CAAA,CAA3C;IACA;;;WAED,SAAA,2BAAA,CAAA,EAA8B;MAC7B,OAAO,IAAA,CAAKnD,QAAL,CAAc,IAAA,CAAKS,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,CAAV,GAAc,CAA1C,CAAP;IACA;;;WAED,SAAA,0CAAA,CAAA,EAA6C;MAC5C,OAAO,CAAC,CAAC,IAAA,CAAKV,QAAL,CAAc,IAAA,CAAKS,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,CAAV,GAAc,CAA1C,CAAT;IACA,C,CAED;IACA;IACA;IACA;;;WACA,SAAA,sDAAA,CAAA,EAAyD;MACxD,OAAO,IAAA,CAAK0C,0CAAL,CAAgD,IAAA,CAAKpD,QAArD,CAAA,IACN,IAAA,CAAKoD,0CAAL,CAAgD,IAAA,CAAKN,kCAAL,CAAA,CAAhD,CADD;IAEA;;;WAED,SAAA,aAAA,CAAA,EAAgB;MACf,OAAO,IAAA,CAAK9C,QAAL,CAAc,IAAA,CAAKS,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,CAAV,GAAc,EAA1C,CAAP;IACA;;;WAED,SAAA,KAAA,CAAA,EAAQ;MACP,OAAO,IAAA,CAAKV,QAAL,CAAc,IAAA,CAAKS,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,EAAV,GAAe,EAA3C,CAAP;IACA;;;WAED,SAAA,QAAA,CAAA,EAAW;MACV;;MACA;MACA,IAAI,IAAA,CAAK2C,KAAL,CAAA,CAAA,IAAgB,IAAA,CAAKA,KAAL,CAAA,CAAA,CAAahC,MAAb,KAAwB,CAA5C,EAA+C;QAC9C,OAAO,KAAP;MACA,CALS,CAMV;MACA;;MACA,OAAO,CAAC,CAAC,IAAA,CAAKgC,KAAL,CAAA,CAAT;IACA;;;WAED,SAAA,IAAA,CAAKb,MAAL,EAAW;MACV,IAAI,IAAA,CAAKD,QAAL,CAAA,CAAA,IAAmBe,OAAO,CAAC,IAAA,CAAKD,KAAL,CAAA,CAAD,EAAeb,MAAf,CAA9B,EAAoD;QACnD,OAAO,IAAIe,IAAJ,CAASD,OAAO,CAAC,IAAA,CAAKD,KAAL,CAAA,CAAD,EAAeb,MAAf,CAAhB,EAAsC,IAAtC,CAAP;MACA;IACD;;;WAED,SAAA,GAAA,CAAA,EAAM;MACL,IAAI,IAAA,CAAK/B,EAAL,IAAW,IAAA,CAAKC,EAApB,EAAwB,OAAOb,kBAAP;MACxB,OAAO,IAAA,CAAKG,QAAL,CAAc,EAAd,CAAA,IAAqBH,kBAA5B;IACA;;;;IAGImD,M;EACL,SAAA,MAAA,CAAYQ,MAAZ,EAAoBxD,QAApB,EAA8B;IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA;IAC7B,IAAA,CAAKyD,OAAL,GAAeD,MAAf;IACA,IAAA,CAAKxD,QAAL,GAAgBA,QAAhB;EACA;;;WAED,SAAA,OAAA,CAAA,EAAU;MACT,OAAO,IAAA,CAAKyD,OAAL,CAAa,CAAb,CAAP;IACA;;;WAED,SAAA,MAAA,CAAA,EAAS;MACR,OAAO,IAAA,CAAKA,OAAL,CAAa,CAAb,CAAP;IACA;;;WAED,SAAA,qBAAA,CAAA,EAAwB;MACvB,OAAO,IAAA,CAAKA,OAAL,CAAa,CAAb,CAAA,IAAmB,EAA1B;IACA;;;WAED,SAAA,4BAAA,CAAA,EAA+B;MAC9B,OAAO,IAAA,CAAKA,OAAL,CAAa,CAAb,CAAA,IAAmB,IAAA,CAAKzD,QAAL,CAAc0D,4BAAd,CAAA,CAA1B;IACA;;;WAED,SAAA,sDAAA,CAAA,EAAyD;MACxD,OAAO,CAAC,CAAC,IAAA,CAAKD,OAAL,CAAa,CAAb,CAAF,IAAqB,IAAA,CAAKzD,QAAL,CAAc2D,sDAAd,CAAA,CAA5B;IACA;;;WAED,SAAA,uDAAA,CAAA,EAA0D;MACzD;MACA;MACA;MACA;MACA;MACA,OAAO,IAAA,CAAKC,kBAAL,CAAA,CAAA,IAA6B,CAAC,IAAA,CAAKD,sDAAL,CAAA,CAArC;IACA,C,CAED;;;WACA,SAAA,kBAAA,CAAA,EAAqB;MACpB,OAAO,IAAA,CAAKD,4BAAL,CAAA,CAAA;MACN;MACA,CAACG,+BAA+B,CAACtC,IAAhCsC,CAAqC,IAAA,CAAKH,4BAAL,CAAA,CAArCG,CAFK,CAGN;MACA;MACA;MACA;MAAA,EACE,IAPI,GAQJ,KARH;IASA;;;WAED,SAAA,mBAAA,CAAA,EAAsB;MACrB,OAAO,IAAA,CAAKJ,OAAL,CAAa,CAAb,CAAA,IAAmB,IAAA,CAAKD,MAAL,CAAA,CAA1B;IACA;;;;AAGF;AACA;AACA;AACA;AACA;;AACA,IAAMK,+BAA+B,GAAG,aAAxC;IAEMN,I;EACL,SAAA,IAAA,CAAYf,IAAZ,EAAkBxC,QAAlB,EAA4B;IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,CAAA;IAC3B,IAAA,CAAKwC,IAAL,GAAYA,IAAZ;IACA,IAAA,CAAKxC,QAAL,GAAgBA,QAAhB;EACA;;;WAED,SAAA,OAAA,CAAA,EAAU;MACT,IAAI,IAAA,CAAKA,QAAL,CAAcS,EAAlB,EAAsB,OAAO,IAAA,CAAK+B,IAAZ;MACtB,OAAO,IAAA,CAAKA,IAAL,CAAU,CAAV,CAAP;IACA;;;WAED,SAAA,eAAA,CAAA,EAAkB;MACjB,IAAI,IAAA,CAAKxC,QAAL,CAAcS,EAAlB,EAAsB;MACtB,OAAO,IAAA,CAAK+B,IAAL,CAAU,CAAV,CAAA,IAAgB,IAAA,CAAKxC,QAAL,CAAckC,eAAd,CAAA,CAAvB;IACA;;;;AAGF,SAASoB,OAAT,CAAiBD,KAAjB,EAAwBb,IAAxB,EAA8B;EAC7B,QAAQA,IAAR;IACC,KAAK,YAAL;MACC,OAAOa,KAAK,CAAC,CAAD,CAAZ;IACD,KAAK,QAAL;MACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;IACD,KAAK,WAAL;MACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;IACD,KAAK,cAAL;MACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;IACD,KAAK,iBAAL;MACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;IACD,KAAK,WAAL;MACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;IACD,KAAK,KAAL;MACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;IACD,KAAK,OAAL;MACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;IACD,KAAK,MAAL;MACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;IACD,KAAK,aAAL;MACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;EApBF;AAsBA;AAED,OAAO,SAASpD,gBAAT,CAA0BD,QAA1B,EAAoC;EAC1C,IAAI,CAACA,QAAL,EAAe;IACd,MAAM,IAAIyB,KAAJ,CAAU,2EAAV,CAAN;EACA,CAHyC,CAK1C;EACA;;EACA,IAAI,CAACqC,SAAS,CAAC9D,QAAD,CAAV,IAAwB,CAAC8D,SAAS,CAAC9D,QAAQ,CAACK,SAAV,CAAtC,EAA4D;IAC3D,MAAM,IAAIoB,KAAJ,CAAA,qJAAA,CAAA,MAAA,CAAoKqC,SAAS,CAAC9D,QAAD,CAAT8D,GAAsB,wBAAA,GAA2BC,MAAM,CAAC3D,IAAP2D,CAAY/D,QAAZ+D,CAAAA,CAAsBC,IAAtBD,CAA2B,IAA3BA,CAA3B,GAA8D,IAApFD,GAA2F,IAAA,GAAOG,OAAO,CAACjE,QAAD,CAAd,GAA2B,IAA3B,GAAkCA,QAAjS,EAAA,GAAA,CAAA,CAAN;EACA;AACD,C,CAED;AACA;;AACA;;AACA,IAAM8D,SAAS,GAAG,SAAZA,SAAY,CAAA,CAAC,EAAA;EAAA,OAAI,OAAA,CAAOvD,CAAP,CAAA,KAAa,QAAjB;AAAA,CAAnB,C,CAEA;AACA;;AACA;;AACA,IAAM0D,OAAO,GAAG,SAAVA,OAAU,CAAA,CAAC,EAAA;EAAA,OAAA,OAAA,CAAW1D,CAAX,CAAA;AAAA,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS2D,YAAT,CAAsBpD,OAAtB,EAA+Bd,QAA/B,EAAyC;EAC/CA,QAAQ,GAAG,IAAID,QAAJ,CAAaC,QAAb,CAAXA;EACA,IAAIA,QAAQ,CAACwB,UAATxB,CAAoBc,OAApBd,CAAJ,EAAkC;IACjC,OAAOA,QAAQ,CAACc,OAATd,CAAiBc,OAAjBd,CAAAA,CAA0ByC,GAA1BzC,CAAAA,CAAP;EACA;EACD,OAAOH,kBAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASsE,qBAAT,CAA+BrD,OAA/B,EAAwCd,QAAxC,EAAkD;EACxDA,QAAQ,GAAG,IAAID,QAAJ,CAAaC,QAAb,CAAXA;EACA,IAAIA,QAAQ,CAACwB,UAATxB,CAAoBc,OAApBd,CAAJ,EAAkC;IACjC,OAAOA,QAAQ,CAACc,OAATd,CAAiBc,OAAjBd,CAAAA,CAA0BoE,kBAA1BpE,CAAAA,CAAP;EACA;EACD,MAAM,IAAIyB,KAAJ,CAAA,mBAAA,CAAA,MAAA,CAA8BX,OAA9B,CAAA,CAAN;AACA;AAED,OAAO,SAASuD,kBAAT,CAA4BvD,OAA5B,EAAqCd,QAArC,EAA+C;EACrD;EACA;EACA,OAAOA,QAAQ,CAACK,SAATL,CAAmBc,OAAnBd,CAAAA,KAAgCgB,SAAvC;AACA;AAED,SAASd,UAAT,CAAoBF,QAApB,EAA8B;EAC7B,IAAQsE,OAAR,GAAoBtE,QAApB,CAAQsE,OAAR;EACA,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;IAChC,IAAA,CAAK7D,EAAL,GAAU6D,OAAO,KAAK,CAAtB;IACA,IAAA,CAAK5D,EAAL,GAAU4D,OAAO,KAAK,CAAtB;IACA,IAAA,CAAK3D,EAAL,GAAU2D,OAAO,KAAK,CAAtB;IACA,IAAA,CAAKC,EAAL,GAAUD,OAAO,KAAK,CAAtB;EACA,CALD,MAKO;IACN,IAAI,CAACA,OAAL,EAAc;MACb,IAAA,CAAK7D,EAAL,GAAU,IAAV;IACA,CAFD,MAEO,IAAIhB,OAAO,CAAC6E,OAAD,EAAU3E,EAAV,CAAPF,KAAyB,CAAC,CAA9B,EAAiC;MACvC,IAAA,CAAKiB,EAAL,GAAU,IAAV;IACA,CAFM,MAEA,IAAIjB,OAAO,CAAC6E,OAAD,EAAU1E,EAAV,CAAPH,KAAyB,CAAC,CAA9B,EAAiC;MACvC,IAAA,CAAKkB,EAAL,GAAU,IAAV;IACA,CAFM,MAEA;MACN,IAAA,CAAK4D,EAAL,GAAU,IAAV;IACA;EACD;AACD,C,CAED;AACA;AACA;AACA","sourcesContent":["import compare from './tools/semver-compare.js'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\n// Moved `001` country code to \"nonGeographic\" section of metadata.\r\nconst V4 = '1.7.35'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nconst CALLING_CODE_REG_EXP = /^\\d+$/\r\n\r\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\r\nexport default class Metadata {\r\n\tconstructor(metadata) {\r\n\t\tvalidateMetadata(metadata)\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, metadata)\r\n\t}\r\n\r\n\tgetCountries() {\r\n\t\treturn Object.keys(this.metadata.countries).filter(_ => _ !== '001')\r\n\t}\r\n\r\n\tgetCountryMetadata(countryCode) {\r\n\t\treturn this.metadata.countries[countryCode]\r\n\t}\r\n\r\n\tnonGeographic() {\r\n\t\tif (this.v1 || this.v2 || this.v3) return\r\n\t\t// `nonGeographical` was a typo.\r\n\t\t// It's present in metadata generated from `1.7.35` to `1.7.37`.\r\n\t\t// The test case could be found by searching for \"nonGeographical\".\r\n\t\treturn this.metadata.nonGeographic || this.metadata.nonGeographical\r\n\t}\r\n\r\n\thasCountry(country) {\r\n\t\treturn this.getCountryMetadata(country) !== undefined\r\n\t}\r\n\r\n\thasCallingCode(callingCode) {\r\n\t\tif (this.getCountryCodesForCallingCode(callingCode)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tif (this.nonGeographic()[callingCode]) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisNonGeographicCallingCode(callingCode) {\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\treturn this.nonGeographic()[callingCode] ? true : false\r\n\t\t} else {\r\n\t\t\treturn this.getCountryCodesForCallingCode(callingCode) ? false : true\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountry(countryCode) {\r\n\t\treturn this.selectNumberingPlan(countryCode)\r\n\t}\r\n\r\n\tselectNumberingPlan(countryCode, callingCode) {\r\n\t\t// Supports just passing `callingCode` as the first argument.\r\n\t\tif (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\r\n\t\t\tcallingCode = countryCode\r\n\t\t\tcountryCode = null\r\n\t\t}\r\n\t\tif (countryCode && countryCode !== '001') {\r\n\t\t\tif (!this.hasCountry(countryCode)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${countryCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this)\r\n\t\t} else if (callingCode) {\r\n\t\t\tif (!this.hasCallingCode(callingCode)) {\r\n\t\t\t\tthrow new Error(`Unknown calling code: ${callingCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this)\r\n\t\t} else {\r\n\t\t\tthis.numberingPlan = undefined\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetCountryCodesForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\tif (countryCodes) {\r\n\t\t\t// Metadata before V4 included \"non-geographic entity\" calling codes\r\n\t\t\t// inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\r\n\t\t\t// Now the semantics of `country_calling_codes` has changed:\r\n\t\t\t// it's specifically for \"countries\" now.\r\n\t\t\t// Older versions of custom metadata will simply skip parsing\r\n\t\t\t// \"non-geographic entity\" phone numbers with new versions\r\n\t\t\t// of this library: it's not considered a bug,\r\n\t\t\t// because such numbers are extremely rare,\r\n\t\t\t// and developers extremely rarely use custom metadata.\r\n\t\t\tif (countryCodes.length === 1 && countryCodes[0].length === 3) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\treturn countryCodes\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountryCodeForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.getCountryCodesForCallingCode(callingCode)\r\n\t\tif (countryCodes) {\r\n\t\t\treturn countryCodes[0]\r\n\t\t}\r\n\t}\r\n\r\n\tgetNumberingPlanMetadata(callingCode) {\r\n\t\tconst countryCode = this.getCountryCodeForCallingCode(callingCode)\r\n\t\tif (countryCode) {\r\n\t\t\treturn this.getCountryMetadata(countryCode)\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tconst metadata = this.nonGeographic()[callingCode]\r\n\t\t\tif (metadata) {\r\n\t\t\t\treturn metadata\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\t// In that metadata, there was no concept of \"non-geographic\" metadata\r\n\t\t\t// so metadata for `001` country code was stored along with other countries.\r\n\t\t\t// The test case can be found by searching for:\r\n\t\t\t// \"should work around `nonGeographic` metadata not existing\".\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn this.metadata.countries['001']\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountryCallingCode() {\r\n\t\treturn this.numberingPlan.callingCode()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tIDDPrefix() {\r\n\t\treturn this.numberingPlan.IDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tdefaultIDDPrefix() {\r\n\t\treturn this.numberingPlan.defaultIDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalNumberPattern() {\r\n\t\treturn this.numberingPlan.nationalNumberPattern()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tpossibleLengths() {\r\n\t\treturn this.numberingPlan.possibleLengths()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tformats() {\r\n\t\treturn this.numberingPlan.formats()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixForParsing() {\r\n\t\treturn this.numberingPlan.nationalPrefixForParsing()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.numberingPlan.nationalPrefixTransformRule()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tleadingDigits() {\r\n\t\treturn this.numberingPlan.leadingDigits()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\thasTypes() {\r\n\t\treturn this.numberingPlan.hasTypes()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\ttype(type) {\r\n\t\treturn this.numberingPlan.type(type)\r\n\t}\r\n\r\n\t// Deprecated.\r\n\text() {\r\n\t\treturn this.numberingPlan.ext()\r\n\t}\r\n\r\n\tcountryCallingCodes() {\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tchooseCountryByCountryCallingCode(callingCode) {\r\n\t\treturn this.selectNumberingPlan(callingCode)\r\n\t}\r\n\r\n\thasSelectedNumberingPlan() {\r\n\t\treturn this.numberingPlan !== undefined\r\n\t}\r\n}\r\n\r\nclass NumberingPlan {\r\n\tconstructor(metadata, globalMetadataObject) {\r\n\t\tthis.globalMetadataObject = globalMetadataObject\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, globalMetadataObject.metadata)\r\n\t}\r\n\r\n\tcallingCode() {\r\n\t\treturn this.metadata[0]\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\tgetDefaultCountryMetadataForRegion() {\r\n\t\treturn this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())\r\n\t}\r\n\r\n\t// Is always present.\r\n\tIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[1]\r\n\t}\r\n\r\n\t// Is only present when a country supports multiple IDD prefixes.\r\n\tdefaultIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern() {\r\n\t\tif (this.v1 || this.v2) return this.metadata[1]\r\n\t\treturn this.metadata[2]\r\n\t}\r\n\r\n\t// \"possible length\" data is always present in Google's metadata.\r\n\tpossibleLengths() {\r\n\t\tif (this.v1) return\r\n\t\treturn this.metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(metadata) {\r\n\t\treturn metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats() {\r\n\t\tconst formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix() {\r\n\t\treturn this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(metadata) {\r\n\t\treturn metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\t_nationalPrefixForParsing() {\r\n\t\treturn this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7]\r\n\t}\r\n\r\n\tnationalPrefixForParsing() {\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this._nationalPrefixForParsing() || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting() {\r\n\t\treturn !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when formatting\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits() {\r\n\t\treturn this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes() {\r\n\t\treturn this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes() {\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type) {\r\n\t\tif (this.hasTypes() && getType(this.types(), type)) {\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text() {\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n}\r\n\r\nclass Format {\r\n\tconstructor(format, metadata) {\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat() {\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns() {\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix() {\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a \"dummy\" one.\r\n\t\t\t!FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule())\r\n\t\t\t// In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\r\n\t\t\t// when `national_prefix_formatting_rule` is not present.\r\n\t\t\t// So, `true` or `false` are returned explicitly here, so that\r\n\t\t\t// `0` number isn't returned.\r\n\t\t\t? true\r\n\t\t\t: false\r\n\t}\r\n\r\n\tinternationalFormat() {\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\r\nconst FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/\r\n\r\nclass Type {\r\n\tconstructor(type, metadata) {\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths() {\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type) {\r\n\tswitch (type) {\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata) {\r\n\tif (!metadata) {\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to\r\n\t// `country_calling_codes` in `1.0.18`.\r\n\tif (!is_object(metadata) || !is_object(metadata.countries)) {\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` child object property. Got ${is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst type_of = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata) {\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries[country] !== undefined\r\n}\r\n\r\nfunction setVersion(metadata) {\r\n\tconst { version } = metadata\r\n\tif (typeof version === 'number') {\r\n\t\tthis.v1 = version === 1\r\n\t\tthis.v2 = version === 2\r\n\t\tthis.v3 = version === 3\r\n\t\tthis.v4 = version === 4\r\n\t} else {\r\n\t\tif (!version) {\r\n\t\t\tthis.v1 = true\r\n\t\t} else if (compare(version, V3) === -1) {\r\n\t\t\tthis.v2 = true\r\n\t\t} else if (compare(version, V4) === -1) {\r\n\t\t\tthis.v3 = true\r\n\t\t} else {\r\n\t\t\tthis.v4 = true\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\r\n// function isCountryCode(countryCode) {\r\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\r\n// }"]},"metadata":{},"sourceType":"module"}