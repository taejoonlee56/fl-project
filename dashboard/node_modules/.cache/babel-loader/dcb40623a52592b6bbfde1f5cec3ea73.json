{"ast":null,"code":"import _slicedToArray from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\n\nvar _jsxFileName = \"D:\\\\fl-carla\\\\src\\\\components\\\\profile\\\\profileCard\\\\profileFormNav\\\\nav\\\\notifications\\\\CheckboxColumn\\\\CheckboxColumn.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Checkbox } from 'antd';\nimport * as S from './CheckboxColumn.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var CheckboxColumn = function CheckboxColumn(_ref) {\n  _s();\n\n  var column = _ref.column,\n      handleCheck = _ref.handleCheck,\n      setTriggered = _ref.setTriggered;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      checkedList = _React$useState2[0],\n      setCheckedList = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      indeterminate = _React$useState4[0],\n      setIndeterminate = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      checkAll = _React$useState6[0],\n      setCheckAll = _React$useState6[1];\n\n  var onChange = function onChange(list) {\n    setCheckedList(list);\n    setIndeterminate(!!list.length && list.length < column.data.length);\n    setCheckAll(list.length === column.data.length);\n    handleCheck(list);\n    setTriggered(true);\n  };\n\n  var onCheckAllChange = function onCheckAllChange(event) {\n    setCheckedList(event.target.checked ? column.data : []);\n    setIndeterminate(false);\n    setCheckAll(event.target.checked);\n    handleCheck(event.target.checked ? column.data : []);\n    setTriggered(true);\n  };\n\n  var props = {\n    indeterminate: indeterminate,\n    onChange: onCheckAllChange,\n    checked: checkAll\n  };\n  return /*#__PURE__*/_jsxDEV(S.Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(S.HeaderCol, {\n      children: column.headerRender ? column.headerRender(column.header, props) : column.header\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Checkbox.Group, {\n      value: checkedList,\n      onChange: onChange,\n      children: column.data.map(function (el, index) {\n        return /*#__PURE__*/_jsxDEV(S.Col, {\n          children: column.dataRender ? column.dataRender(el) : el\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CheckboxColumn, \"h0TsO4gF7pGNJGRAlwJGDhA8Suo=\");\n\n_c = CheckboxColumn;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckboxColumn\");","map":{"version":3,"sources":["D:/fl-carla/src/components/profile/profileCard/profileFormNav/nav/notifications/CheckboxColumn/CheckboxColumn.tsx"],"names":["React","Checkbox","S","CheckboxColumn","column","handleCheck","setTriggered","useState","checkedList","setCheckedList","indeterminate","setIndeterminate","checkAll","setCheckAll","onChange","list","length","data","onCheckAllChange","event","target","checked","props","headerRender","header","map","el","index","dataRender"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,MAAzB;AAIA,OAAO,KAAKC,CAAZ,MAAmB,yBAAnB;;AAQA,OAAO,IAAMC,cAA6C,GAAG,SAAhDA,cAAgD,OAA2C;AAAA;;AAAA,MAAxCC,MAAwC,QAAxCA,MAAwC;AAAA,MAAhCC,WAAgC,QAAhCA,WAAgC;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AACtG,wBAAsCN,KAAK,CAACO,QAAN,CAAoC,EAApC,CAAtC;AAAA;AAAA,MAAOC,WAAP;AAAA,MAAoBC,cAApB;;AACA,yBAA0CT,KAAK,CAACO,QAAN,CAAe,KAAf,CAA1C;AAAA;AAAA,MAAOG,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,yBAAgCX,KAAK,CAACO,QAAN,CAAe,KAAf,CAAhC;AAAA;AAAA,MAAOK,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAA+B;AAC9CN,IAAAA,cAAc,CAACM,IAAD,CAAd;AACAJ,IAAAA,gBAAgB,CAAC,CAAC,CAACI,IAAI,CAACC,MAAP,IAAiBD,IAAI,CAACC,MAAL,GAAcZ,MAAM,CAACa,IAAP,CAAYD,MAA5C,CAAhB;AACAH,IAAAA,WAAW,CAACE,IAAI,CAACC,MAAL,KAAgBZ,MAAM,CAACa,IAAP,CAAYD,MAA7B,CAAX;AACAX,IAAAA,WAAW,CAACU,IAAD,CAAX;AACAT,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAND;;AAQA,MAAMY,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAgC;AACvDV,IAAAA,cAAc,CAACU,KAAK,CAACC,MAAN,CAAaC,OAAb,GAAuBjB,MAAM,CAACa,IAA9B,GAAqC,EAAtC,CAAd;AACAN,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAE,IAAAA,WAAW,CAACM,KAAK,CAACC,MAAN,CAAaC,OAAd,CAAX;AACAhB,IAAAA,WAAW,CAACc,KAAK,CAACC,MAAN,CAAaC,OAAb,GAAuBjB,MAAM,CAACa,IAA9B,GAAqC,EAAtC,CAAX;AACAX,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAND;;AAQA,MAAMgB,KAAK,GAAG;AACZZ,IAAAA,aAAa,EAAbA,aADY;AAEZI,IAAAA,QAAQ,EAAEI,gBAFE;AAGZG,IAAAA,OAAO,EAAET;AAHG,GAAd;AAMA,sBACE,QAAC,CAAD,CAAG,OAAH;AAAA,4BACE,QAAC,CAAD,CAAG,SAAH;AAAA,gBAAcR,MAAM,CAACmB,YAAP,GAAsBnB,MAAM,CAACmB,YAAP,CAAoBnB,MAAM,CAACoB,MAA3B,EAAmCF,KAAnC,CAAtB,GAAkElB,MAAM,CAACoB;AAAvF;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,QAAD,CAAU,KAAV;AAAgB,MAAA,KAAK,EAAEhB,WAAvB;AAAoC,MAAA,QAAQ,EAAEM,QAA9C;AAAA,gBACGV,MAAM,CAACa,IAAP,CAAYQ,GAAZ,CAAgB,UAACC,EAAD,EAAKC,KAAL;AAAA,4BACf,QAAC,CAAD,CAAG,GAAH;AAAA,oBAAoBvB,MAAM,CAACwB,UAAP,GAAoBxB,MAAM,CAACwB,UAAP,CAAkBF,EAAlB,CAApB,GAA4CA;AAAhE,WAAYC,KAAZ;AAAA;AAAA;AAAA;AAAA,iBADe;AAAA,OAAhB;AADH;AAAA;AAAA;AAAA;AAAA,aAFF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAUD,CArCM;;GAAMxB,c;;KAAAA,c","sourcesContent":["import React from 'react';\r\nimport { Checkbox } from 'antd';\r\nimport { Option } from '../interfaces';\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\r\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\r\nimport * as S from './CheckboxColumn.styles';\r\n\r\ninterface CheckboxColumnProps {\r\n  column: Omit<Option, 'id'>;\r\n  handleCheck: (list: CheckboxValueType[]) => void;\r\n  setTriggered: (state: boolean) => void;\r\n}\r\n\r\nexport const CheckboxColumn: React.FC<CheckboxColumnProps> = ({ column, handleCheck, setTriggered }) => {\r\n  const [checkedList, setCheckedList] = React.useState<CheckboxValueType[]>([]);\r\n  const [indeterminate, setIndeterminate] = React.useState(false);\r\n  const [checkAll, setCheckAll] = React.useState(false);\r\n\r\n  const onChange = (list: CheckboxValueType[]) => {\r\n    setCheckedList(list);\r\n    setIndeterminate(!!list.length && list.length < column.data.length);\r\n    setCheckAll(list.length === column.data.length);\r\n    handleCheck(list);\r\n    setTriggered(true);\r\n  };\r\n\r\n  const onCheckAllChange = (event: CheckboxChangeEvent) => {\r\n    setCheckedList(event.target.checked ? column.data : []);\r\n    setIndeterminate(false);\r\n    setCheckAll(event.target.checked);\r\n    handleCheck(event.target.checked ? column.data : []);\r\n    setTriggered(true);\r\n  };\r\n\r\n  const props = {\r\n    indeterminate,\r\n    onChange: onCheckAllChange,\r\n    checked: checkAll,\r\n  };\r\n\r\n  return (\r\n    <S.Wrapper>\r\n      <S.HeaderCol>{column.headerRender ? column.headerRender(column.header, props) : column.header}</S.HeaderCol>\r\n      <Checkbox.Group value={checkedList} onChange={onChange}>\r\n        {column.data.map((el, index) => (\r\n          <S.Col key={index}>{column.dataRender ? column.dataRender(el) : el}</S.Col>\r\n        ))}\r\n      </Checkbox.Group>\r\n    </S.Wrapper>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}