{"ast":null,"code":"import _objectSpread from \"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/tj/fl-carla/src/components/forms/ControlForm/ControlForm.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Avatar } from 'antd';\nimport { SmileOutlined, UserOutlined } from '@ant-design/icons';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { AddUserFormModal } from './AddUserFormModal';\nimport { Input } from '../../common/inputs/Input/Input';\nimport { Button } from '../../common/buttons/Button/Button';\nimport { useTranslation } from 'react-i18next';\nimport * as S from './ControlForm.styles';\nimport { notificationController } from '@app/controllers/notificationController';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar layout = {\n  labelCol: {\n    span: 24\n  },\n  wrapperCol: {\n    span: 24\n  }\n};\nexport var ControlForm = function ControlForm() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setVisible = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFieldsChanged = _useState4[0],\n      setFieldsChanged = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var showUserModal = function showUserModal() {\n    setVisible(true);\n  };\n\n  var hideUserModal = function hideUserModal() {\n    setVisible(false);\n  };\n\n  var onFinish = function onFinish() {\n    var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    setLoading(true);\n    setTimeout(function () {\n      setFieldsChanged(false);\n      setLoading(false);\n      notificationController.success({\n        message: t('common.success')\n      });\n      console.log(values);\n    }, 1000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(BaseButtonsForm.Provider, {\n    onFormFinish: function onFormFinish(name, _ref) {\n      var values = _ref.values,\n          forms = _ref.forms;\n\n      if (name === 'userForm') {\n        var controlForm = forms.controlForm;\n        var users = controlForm.getFieldValue('users') || [];\n        controlForm.setFieldsValue({\n          users: [].concat(_toConsumableArray(users), [values])\n        });\n        setVisible(false);\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(BaseButtonsForm, _objectSpread(_objectSpread({}, layout), {}, {\n      name: \"controlForm\",\n      isFieldsChanged: isFieldsChanged,\n      footer: /*#__PURE__*/_jsxDEV(BaseButtonsForm.Item, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          htmlType: \"submit\",\n          type: \"primary\",\n          loading: isLoading,\n          children: t('common.submit')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(S.AddUserButton, {\n          type: \"default\",\n          htmlType: \"button\",\n          onClick: showUserModal,\n          children: t('forms.controlFormLabels.addUser')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, _this),\n      onFinish: onFinish,\n      onFieldsChange: function onFieldsChange() {\n        return setFieldsChanged(true);\n      },\n      children: [/*#__PURE__*/_jsxDEV(BaseButtonsForm.Item, {\n        name: \"group\",\n        label: t('forms.controlFormLabels.groupName'),\n        rules: [{\n          required: true,\n          message: t('forms.controlFormLabels.groupNameError')\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(S.UserList, {\n        label: t('forms.controlFormLabels.userList') // eslint-disable-next-line\n        ,\n        shouldUpdate: function shouldUpdate(prevValues, curValues) {\n          return prevValues.users !== curValues.users;\n        },\n        children: function children(_ref2) {\n          var getFieldValue = _ref2.getFieldValue;\n          var users = getFieldValue('users') || [];\n          return users.length ? /*#__PURE__*/_jsxDEV(S.List, {\n            children: users.map(function (user, index) {\n              return /*#__PURE__*/_jsxDEV(S.ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                  icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 92,\n                    columnNumber: 35\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 21\n                }, _this), /*#__PURE__*/_jsxDEV(S.User, {\n                  children: [user.name, \" - \", user.age]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 21\n                }, _this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 19\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, _this) : /*#__PURE__*/_jsxDEV(S.Text, {\n            children: [\"( \", /*#__PURE__*/_jsxDEV(SmileOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 19\n            }, _this), \" \", t('forms.controlFormLabels.noUser'), \" )\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, _this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, _this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(AddUserFormModal, {\n      visible: visible,\n      onCancel: hideUserModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ControlForm, \"S27mXMBkzluVIQgmK5es1Avr3N8=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ControlForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ControlForm\");","map":{"version":3,"sources":["/home/tj/fl-carla/src/components/forms/ControlForm/ControlForm.tsx"],"names":["React","useState","Avatar","SmileOutlined","UserOutlined","BaseButtonsForm","AddUserFormModal","Input","Button","useTranslation","S","notificationController","layout","labelCol","span","wrapperCol","ControlForm","visible","setVisible","isFieldsChanged","setFieldsChanged","isLoading","setLoading","t","showUserModal","hideUserModal","onFinish","values","setTimeout","success","message","console","log","name","forms","controlForm","users","getFieldValue","setFieldsValue","required","prevValues","curValues","length","map","user","index","age"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,mBAA5C;AACA,SAASC,eAAT,QAAgC,8DAAhC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,KAAT,QAAsB,iCAAtB;AACA,SAASC,MAAT,QAAuB,oCAAvB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAO,KAAKC,CAAZ,MAAmB,sBAAnB;AACA,SAASC,sBAAT,QAAuC,yCAAvC;;AAEA,IAAMC,MAAM,GAAG;AACbC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,IAAI,EAAE;AAAR,GADG;AAEbC,EAAAA,UAAU,EAAE;AAAED,IAAAA,IAAI,EAAE;AAAR;AAFC,CAAf;AAUA,OAAO,IAAME,WAAqB,GAAG,SAAxBA,WAAwB,GAAM;AAAA;;AACzC,kBAA8Bf,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOgB,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAA4CjB,QAAQ,CAAC,KAAD,CAApD;AAAA;AAAA,MAAOkB,eAAP;AAAA,MAAwBC,gBAAxB;;AACA,mBAAgCnB,QAAQ,CAAC,KAAD,CAAxC;AAAA;AAAA,MAAOoB,SAAP;AAAA,MAAkBC,UAAlB;;AACA,wBAAcb,cAAc,EAA5B;AAAA,MAAQc,CAAR,mBAAQA,CAAR;;AAEA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BN,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAFD;;AAIA,MAAMO,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BP,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAFD;;AAIA,MAAMQ,QAAQ,GAAG,SAAXA,QAAW,GAAiB;AAAA,QAAhBC,MAAgB,uEAAP,EAAO;AAChCL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAM,IAAAA,UAAU,CAAC,YAAM;AACfR,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAX,MAAAA,sBAAsB,CAACkB,OAAvB,CAA+B;AAAEC,QAAAA,OAAO,EAAEP,CAAC,CAAC,gBAAD;AAAZ,OAA/B;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACD,KALS,EAKP,IALO,CAAV;AAMD,GARD;;AAUA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,YAAY,EAAE,sBAACM,IAAD,QAA6B;AAAA,UAApBN,MAAoB,QAApBA,MAAoB;AAAA,UAAZO,KAAY,QAAZA,KAAY;;AACzC,UAAID,IAAI,KAAK,UAAb,EAAyB;AACvB,YAAQE,WAAR,GAAwBD,KAAxB,CAAQC,WAAR;AACA,YAAMC,KAAK,GAAGD,WAAW,CAACE,aAAZ,CAA0B,OAA1B,KAAsC,EAApD;AACAF,QAAAA,WAAW,CAACG,cAAZ,CAA2B;AAAEF,UAAAA,KAAK,+BAAMA,KAAN,IAAaT,MAAb;AAAP,SAA3B;AACAT,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KARH;AAAA,4BAUE,QAAC,eAAD,kCACMN,MADN;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,MAAA,eAAe,EAAEO,eAHnB;AAIE,MAAA,MAAM,eACJ,QAAC,eAAD,CAAiB,IAAjB;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,QAAQ,EAAC,QAAjB;AAA0B,UAAA,IAAI,EAAC,SAA/B;AAAyC,UAAA,OAAO,EAAEE,SAAlD;AAAA,oBACGE,CAAC,CAAC,eAAD;AADJ;AAAA;AAAA;AAAA;AAAA,iBADF,eAIE,QAAC,CAAD,CAAG,aAAH;AAAiB,UAAA,IAAI,EAAC,SAAtB;AAAgC,UAAA,QAAQ,EAAC,QAAzC;AAAkD,UAAA,OAAO,EAAEC,aAA3D;AAAA,oBACGD,CAAC,CAAC,iCAAD;AADJ;AAAA;AAAA;AAAA;AAAA,iBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,eALJ;AAcE,MAAA,QAAQ,EAAEG,QAdZ;AAeE,MAAA,cAAc,EAAE;AAAA,eAAMN,gBAAgB,CAAC,IAAD,CAAtB;AAAA,OAflB;AAAA,8BAiBE,QAAC,eAAD,CAAiB,IAAjB;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,KAAK,EAAEG,CAAC,CAAC,mCAAD,CAFV;AAGE,QAAA,KAAK,EAAE,CAAC;AAAEgB,UAAAA,QAAQ,EAAE,IAAZ;AAAkBT,UAAAA,OAAO,EAAEP,CAAC,CAAC,wCAAD;AAA5B,SAAD,CAHT;AAAA,+BAKE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,eAjBF,eAwBE,QAAC,CAAD,CAAG,QAAH;AACE,QAAA,KAAK,EAAEA,CAAC,CAAC,kCAAD,CADV,CAEE;AAFF;AAGE,QAAA,YAAY,EAAE,sBAACiB,UAAD,EAAkBC,SAAlB;AAAA,iBAAqCD,UAAU,CAACJ,KAAX,KAAqBK,SAAS,CAACL,KAApE;AAAA,SAHhB;AAAA,kBAKG,yBAAuB;AAAA,cAApBC,aAAoB,SAApBA,aAAoB;AACtB,cAAMD,KAAiB,GAAGC,aAAa,CAAC,OAAD,CAAb,IAA0B,EAApD;AACA,iBAAOD,KAAK,CAACM,MAAN,gBACL,QAAC,CAAD,CAAG,IAAH;AAAA,sBACGN,KAAK,CAACO,GAAN,CAAU,UAACC,IAAD,EAAOC,KAAP;AAAA,kCACT,QAAC,CAAD,CAAG,QAAH;AAAA,wCACE,QAAC,MAAD;AAAQ,kBAAA,IAAI,eAAE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAd;AAAA;AAAA;AAAA;AAAA,yBADF,eAEE,QAAC,CAAD,CAAG,IAAH;AAAA,6BACGD,IAAI,CAACX,IADR,SACiBW,IAAI,CAACE,GADtB;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFF;AAAA,iBAAiBD,KAAjB;AAAA;AAAA;AAAA;AAAA,uBADS;AAAA,aAAV;AADH;AAAA;AAAA;AAAA;AAAA,mBADK,gBAYL,QAAC,CAAD,CAAG,IAAH;AAAA,0CACI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,qBADJ,OACuBtB,CAAC,CAAC,gCAAD,CADxB;AAAA;AAAA;AAAA;AAAA;AAAA,mBAZF;AAgBD;AAvBH;AAAA;AAAA;AAAA;AAAA,eAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,aAVF,eA4DE,QAAC,gBAAD;AAAkB,MAAA,OAAO,EAAEN,OAA3B;AAAoC,MAAA,QAAQ,EAAEQ;AAA9C;AAAA;AAAA;AAAA;AAAA,aA5DF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAgED,CAxFM;;GAAMT,W;UAIGP,c;;;KAJHO,W","sourcesContent":["import React, { useState } from 'react';\nimport { Avatar } from 'antd';\nimport { SmileOutlined, UserOutlined } from '@ant-design/icons';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { AddUserFormModal } from './AddUserFormModal';\nimport { Input } from '../../common/inputs/Input/Input';\nimport { Button } from '../../common/buttons/Button/Button';\nimport { useTranslation } from 'react-i18next';\nimport * as S from './ControlForm.styles';\nimport { notificationController } from '@app/controllers/notificationController';\n\nconst layout = {\n  labelCol: { span: 24 },\n  wrapperCol: { span: 24 },\n};\n\ninterface UserType {\n  name: string;\n  age: string;\n}\n\nexport const ControlForm: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const [isFieldsChanged, setFieldsChanged] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const { t } = useTranslation();\n\n  const showUserModal = () => {\n    setVisible(true);\n  };\n\n  const hideUserModal = () => {\n    setVisible(false);\n  };\n\n  const onFinish = (values = {}) => {\n    setLoading(true);\n    setTimeout(() => {\n      setFieldsChanged(false);\n      setLoading(false);\n      notificationController.success({ message: t('common.success') });\n      console.log(values);\n    }, 1000);\n  };\n\n  return (\n    <BaseButtonsForm.Provider\n      onFormFinish={(name, { values, forms }) => {\n        if (name === 'userForm') {\n          const { controlForm } = forms;\n          const users = controlForm.getFieldValue('users') || [];\n          controlForm.setFieldsValue({ users: [...users, values] });\n          setVisible(false);\n        }\n      }}\n    >\n      <BaseButtonsForm\n        {...layout}\n        name=\"controlForm\"\n        isFieldsChanged={isFieldsChanged}\n        footer={\n          <BaseButtonsForm.Item>\n            <Button htmlType=\"submit\" type=\"primary\" loading={isLoading}>\n              {t('common.submit')}\n            </Button>\n            <S.AddUserButton type=\"default\" htmlType=\"button\" onClick={showUserModal}>\n              {t('forms.controlFormLabels.addUser')}\n            </S.AddUserButton>\n          </BaseButtonsForm.Item>\n        }\n        onFinish={onFinish}\n        onFieldsChange={() => setFieldsChanged(true)}\n      >\n        <BaseButtonsForm.Item\n          name=\"group\"\n          label={t('forms.controlFormLabels.groupName')}\n          rules={[{ required: true, message: t('forms.controlFormLabels.groupNameError') }]}\n        >\n          <Input />\n        </BaseButtonsForm.Item>\n        <S.UserList\n          label={t('forms.controlFormLabels.userList')}\n          // eslint-disable-next-line\n          shouldUpdate={(prevValues: any, curValues: any) => prevValues.users !== curValues.users}\n        >\n          {({ getFieldValue }) => {\n            const users: UserType[] = getFieldValue('users') || [];\n            return users.length ? (\n              <S.List>\n                {users.map((user, index) => (\n                  <S.ListItem key={index}>\n                    <Avatar icon={<UserOutlined />} />\n                    <S.User>\n                      {user.name} - {user.age}\n                    </S.User>\n                  </S.ListItem>\n                ))}\n              </S.List>\n            ) : (\n              <S.Text>\n                ( <SmileOutlined /> {t('forms.controlFormLabels.noUser')} )\n              </S.Text>\n            );\n          }}\n        </S.UserList>\n      </BaseButtonsForm>\n      <AddUserFormModal visible={visible} onCancel={hideUserModal} />\n    </BaseButtonsForm.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}