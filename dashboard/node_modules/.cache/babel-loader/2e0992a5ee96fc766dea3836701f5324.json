{"ast":null,"code":"import _objectSpread from \"/home/tj/fl-carla/dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/tj/fl-carla/dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/home/tj/fl-carla/dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/tj/fl-carla/dashboard/src/components/tj/MapControlForm/MapControlForm.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"/home/tj/fl-carla/dashboard/node_modules/@babel/runtime/regenerator/index.js\";\nimport { useTranslation } from 'react-i18next';\nimport { useState } from 'react';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { Button } from '@app/components/common/buttons/Button/Button';\nimport { RadioButton, RadioGroup } from '@app/components/common/Radio/Radio';\nimport { notificationController } from '@app/controllers/notificationController';\nimport { Upload } from '@app/components/common/Upload/Upload';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar formItemLayout = {\n  labelCol: {\n    span: 24\n  },\n  wrapperCol: {\n    span: 24\n  }\n};\nexport var MapControlForm = function MapControlForm() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFieldsChanged = _useState2[0],\n      setFieldsChanged = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var onFinish = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var values,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              values = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              setLoading(true);\n              setTimeout(function () {\n                setLoading(false);\n                setFieldsChanged(false);\n                notificationController.success({\n                  message: t('common.success')\n                });\n                console.log(values);\n              }, 1000);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onFinish() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(BaseButtonsForm, _objectSpread(_objectSpread({}, formItemLayout), {}, {\n      isFieldsChanged: isFieldsChanged,\n      onFieldsChange: function onFieldsChange() {\n        return setFieldsChanged(true);\n      },\n      name: \"validateForm\",\n      initialValues: {\n        'input-number': 10,\n        'checkbox-group': ['A', 'B'],\n        rate: 3.5\n      },\n      footer: /*#__PURE__*/_jsxDEV(BaseButtonsForm.Item, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          loading: isLoading,\n          children: t('common.submit')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, _this),\n      onFinish: onFinish,\n      children: [/*#__PURE__*/_jsxDEV(BaseButtonsForm.Item, {\n        name: \"map-button\" // label={t('forms.validationFormLabels.radioButton')}\n        ,\n        label: t('Map'),\n        rules: [{\n          required: true,\n          message: t('Choose Map')\n        }],\n        children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n          children: [/*#__PURE__*/_jsxDEV(RadioButton, {\n            value: \"Town10HD\",\n            children: t('Big City')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(RadioButton, {\n            value: \"Town05\",\n            children: t('Small City')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(RadioButton, {\n            value: \"Town01\",\n            children: t('Big Town')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(RadioButton, {\n            value: \"Town07\",\n            children: t('Small Town')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(BaseButtonsForm.Item, {\n        name: \"weather-button\" // label={t('forms.validationFormLabels.radioButton')}\n        ,\n        label: t('Weather'),\n        rules: [{\n          required: true,\n          message: t('Choose Weather')\n        }],\n        children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n          children: [/*#__PURE__*/_jsxDEV(RadioButton, {\n            value: \"ClearSunset\",\n            children: t('Sunny')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(RadioButton, {\n            value: \"CloudySunset\",\n            children: t('Cloudy')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(RadioButton, {\n            value: \"HardRainSunset\",\n            children: t('Rainy')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(RadioButton, {\n            value: \"WetSunset\",\n            children: t('Snowy')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, _this)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Upload, {\n      title: \"t\",\n      action: \"https://www.mocky.io/v2/5cc8019d300000980a055e76\",\n      directory: true,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 23\n        }, _this),\n        children: t('uploads.directory')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(MapControlForm, \"+2qt9+VyOzDr/RwsnFeHV8e7uTw=\", false, function () {\n  return [useTranslation];\n});\n\n_c = MapControlForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapControlForm\");","map":{"version":3,"sources":["/home/tj/fl-carla/dashboard/src/components/tj/MapControlForm/MapControlForm.tsx"],"names":["useTranslation","useState","BaseButtonsForm","Button","RadioButton","RadioGroup","notificationController","Upload","UploadOutlined","formItemLayout","labelCol","span","wrapperCol","MapControlForm","isFieldsChanged","setFieldsChanged","isLoading","setLoading","t","onFinish","values","setTimeout","success","message","console","log","rate","required"],"mappings":";;;;;;;;;AAAA,SAASA,cAAT,QAA+B,eAA/B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,eAAT,QAAgC,8DAAhC;AACA,SAASC,MAAT,QAAuB,8CAAvB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,oCAAxC;AACA,SAASC,sBAAT,QAAuC,yCAAvC;AACA,SAASC,MAAT,QAAsC,sCAAtC;AACA,SAASC,cAAT,QAA8C,mBAA9C;;;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,IAAI,EAAE;AAAR,GADW;AAErBC,EAAAA,UAAU,EAAE;AAAED,IAAAA,IAAI,EAAE;AAAR;AAFS,CAAvB;AAKA,OAAO,IAAME,cAAwB,GAAG,SAA3BA,cAA2B,GAAM;AAAA;;AAC5C,kBAA4CZ,QAAQ,CAAC,KAAD,CAApD;AAAA;AAAA,MAAOa,eAAP;AAAA,MAAwBC,gBAAxB;;AACA,mBAAgCd,QAAQ,CAAC,KAAD,CAAxC;AAAA;AAAA,MAAOe,SAAP;AAAA,MAAkBC,UAAlB;;AACA,wBAAcjB,cAAc,EAA5B;AAAA,MAAQkB,CAAR,mBAAQA,CAAR;;AAEA,MAAMC,QAAQ;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOC,cAAAA,MAAP,2DAAgB,EAAhB;AACfH,cAAAA,UAAU,CAAC,IAAD,CAAV;AACAI,cAAAA,UAAU,CAAC,YAAM;AACfJ,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,gBAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAT,gBAAAA,sBAAsB,CAACgB,OAAvB,CAA+B;AAAEC,kBAAAA,OAAO,EAAEL,CAAC,CAAC,gBAAD;AAAZ,iBAA/B;AACAM,gBAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACD,eALS,EAKP,IALO,CAAV;;AAFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAARD,QAAQ;AAAA;AAAA;AAAA,KAAd;;AAUA,sBACE;AAAA,4BACE,QAAC,eAAD,kCACMV,cADN;AAEE,MAAA,eAAe,EAAEK,eAFnB;AAGE,MAAA,cAAc,EAAE;AAAA,eAAMC,gBAAgB,CAAC,IAAD,CAAtB;AAAA,OAHlB;AAIE,MAAA,IAAI,EAAC,cAJP;AAKE,MAAA,aAAa,EAAE;AACb,wBAAgB,EADH;AAEb,0BAAkB,CAAC,GAAD,EAAM,GAAN,CAFL;AAGbW,QAAAA,IAAI,EAAE;AAHO,OALjB;AAUE,MAAA,MAAM,eACJ,QAAC,eAAD,CAAiB,IAAjB;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,SAAb;AAAuB,UAAA,QAAQ,EAAC,QAAhC;AAAyC,UAAA,OAAO,EAAEV,SAAlD;AAAA,oBACGE,CAAC,CAAC,eAAD;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,eAXJ;AAiBE,MAAA,QAAQ,EAAEC,QAjBZ;AAAA,8BAmBE,QAAC,eAAD,CAAiB,IAAjB;AACE,QAAA,IAAI,EAAC,YADP,CAEE;AAFF;AAGE,QAAA,KAAK,EAAED,CAAC,CAAC,KAAD,CAHV;AAIE,QAAA,KAAK,EAAE,CAAC;AAAES,UAAAA,QAAQ,EAAE,IAAZ;AAAkBJ,UAAAA,OAAO,EAAEL,CAAC,CAAC,YAAD;AAA5B,SAAD,CAJT;AAAA,+BAME,QAAC,UAAD;AAAA,kCACE,QAAC,WAAD;AAAa,YAAA,KAAK,EAAC,UAAnB;AAAA,sBAA+BA,CAAC,CAAC,UAAD;AAAhC;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE,QAAC,WAAD;AAAa,YAAA,KAAK,EAAC,QAAnB;AAAA,sBAA6BA,CAAC,CAAC,YAAD;AAA9B;AAAA;AAAA;AAAA;AAAA,mBAFF,eAGE,QAAC,WAAD;AAAa,YAAA,KAAK,EAAC,QAAnB;AAAA,sBAA6BA,CAAC,CAAC,UAAD;AAA9B;AAAA;AAAA;AAAA;AAAA,mBAHF,eAIE,QAAC,WAAD;AAAa,YAAA,KAAK,EAAC,QAAnB;AAAA,sBAA6BA,CAAC,CAAC,YAAD;AAA9B;AAAA;AAAA;AAAA;AAAA,mBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,eAnBF,eAiCE,QAAC,eAAD,CAAiB,IAAjB;AACE,QAAA,IAAI,EAAC,gBADP,CAEE;AAFF;AAGE,QAAA,KAAK,EAAEA,CAAC,CAAC,SAAD,CAHV;AAIE,QAAA,KAAK,EAAE,CAAC;AAAES,UAAAA,QAAQ,EAAE,IAAZ;AAAkBJ,UAAAA,OAAO,EAAEL,CAAC,CAAC,gBAAD;AAA5B,SAAD,CAJT;AAAA,+BAME,QAAC,UAAD;AAAA,kCACE,QAAC,WAAD;AAAa,YAAA,KAAK,EAAC,aAAnB;AAAA,sBAAkCA,CAAC,CAAC,OAAD;AAAnC;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE,QAAC,WAAD;AAAa,YAAA,KAAK,EAAC,cAAnB;AAAA,sBAAmCA,CAAC,CAAC,QAAD;AAApC;AAAA;AAAA;AAAA;AAAA,mBAFF,eAGE,QAAC,WAAD;AAAa,YAAA,KAAK,EAAC,gBAAnB;AAAA,sBAAqCA,CAAC,CAAC,OAAD;AAAtC;AAAA;AAAA;AAAA;AAAA,mBAHF,eAIE,QAAC,WAAD;AAAa,YAAA,KAAK,EAAC,WAAnB;AAAA,sBAAgCA,CAAC,CAAC,OAAD;AAAjC;AAAA;AAAA;AAAA;AAAA,mBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,eAjCF;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAiDE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,GAAd;AAAkB,MAAA,MAAM,EAAC,kDAAzB;AAA4E,MAAA,SAAS,MAArF;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,IAAI,eAAE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,iBAAd;AAAA,kBAAmCA,CAAC,CAAC,mBAAD;AAApC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aAjDF;AAAA,kBADF;AAuDD,CAtEM;;GAAML,c;UAGGb,c;;;KAHHa,c","sourcesContent":["import { useTranslation } from 'react-i18next';\nimport { useState } from 'react';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { Button } from '@app/components/common/buttons/Button/Button';\nimport { RadioButton, RadioGroup } from '@app/components/common/Radio/Radio';\nimport { notificationController } from '@app/controllers/notificationController';\nimport { Upload, UploadDragger } from '@app/components/common/Upload/Upload';\nimport { UploadOutlined, InboxOutlined } from '@ant-design/icons';\n\nconst formItemLayout = {\n  labelCol: { span: 24 },\n  wrapperCol: { span: 24 }, \n};\n\nexport const MapControlForm: React.FC = () => {\n  const [isFieldsChanged, setFieldsChanged] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const { t } = useTranslation();\n  \n  const onFinish = async (values = {}) => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setFieldsChanged(false);\n      notificationController.success({ message: t('common.success') });\n      console.log(values);\n    }, 1000);\n  };\n\n  return (\n    <>\n      <BaseButtonsForm\n        {...formItemLayout}\n        isFieldsChanged={isFieldsChanged}\n        onFieldsChange={() => setFieldsChanged(true)}\n        name=\"validateForm\"\n        initialValues={{\n          'input-number': 10,\n          'checkbox-group': ['A', 'B'],\n          rate: 3.5,\n        }}\n        footer={\n          <BaseButtonsForm.Item>\n            <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n              {t('common.submit')}\n            </Button>\n          </BaseButtonsForm.Item>\n        }\n        onFinish={onFinish}\n      >\n        <BaseButtonsForm.Item\n          name=\"map-button\"\n          // label={t('forms.validationFormLabels.radioButton')}\n          label={t('Map')}\n          rules={[{ required: true, message: t('Choose Map') }]}\n        >\n          <RadioGroup>\n            <RadioButton value=\"Town10HD\">{t('Big City')}</RadioButton>\n            <RadioButton value=\"Town05\">{t('Small City')}</RadioButton>\n            <RadioButton value=\"Town01\">{t('Big Town')}</RadioButton>\n            <RadioButton value=\"Town07\">{t('Small Town')}</RadioButton>\n          </RadioGroup>\n        </BaseButtonsForm.Item>\n\n        <BaseButtonsForm.Item\n          name=\"weather-button\"\n          // label={t('forms.validationFormLabels.radioButton')}\n          label={t('Weather')}\n          rules={[{ required: true, message: t('Choose Weather') }]}\n        >\n          <RadioGroup>\n            <RadioButton value=\"ClearSunset\">{t('Sunny')}</RadioButton>\n            <RadioButton value=\"CloudySunset\">{t('Cloudy')}</RadioButton>\n            <RadioButton value=\"HardRainSunset\">{t('Rainy')}</RadioButton>\n            <RadioButton value=\"WetSunset\">{t('Snowy')}</RadioButton>\n          </RadioGroup>\n        </BaseButtonsForm.Item>\n      </BaseButtonsForm>\n      \n      <Upload title='t' action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\" directory >\n        <Button icon={<UploadOutlined />}>{t('uploads.directory')}</Button>\n      </Upload>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}