{"ast":null,"code":"import _objectSpread from \"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"size\", \"children\"];\n\nvar _jsxFileName = \"/home/tj/fl-carla/src/components/common/Modal/Modal.tsx\",\n    _this = this;\n\nimport React from 'react';\nimport { Modal as AntdModal } from 'antd';\nimport { modalSizes } from 'constants/modalSizes';\nimport * as S from './Modal.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar InfoModal = AntdModal.info,\n    SuccessModal = AntdModal.success,\n    WarningModal = AntdModal.warning,\n    ErrorModal = AntdModal.error;\nexport { InfoModal, SuccessModal, WarningModal, ErrorModal };\nexport var Modal = function Modal(_ref) {\n  var _Object$entries$find;\n\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'medium' : _ref$size,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var modalSize = (_Object$entries$find = Object.entries(modalSizes).find(function (sz) {\n    return sz[0] === size;\n  })) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[1];\n  return /*#__PURE__*/_jsxDEV(S.Modal, _objectSpread(_objectSpread({\n    width: modalSize\n  }, props), {}, {\n    children: children\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, _this);\n};\n_c = Modal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"sources":["/home/tj/fl-carla/src/components/common/Modal/Modal.tsx"],"names":["React","Modal","AntdModal","modalSizes","S","InfoModal","info","SuccessModal","success","WarningModal","warning","ErrorModal","error","size","children","props","modalSize","Object","entries","find","sz"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAK,IAAIC,SAAlB,QAAgE,MAAhE;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,OAAO,KAAKC,CAAZ,MAAmB,gBAAnB;;AAEO,IAAcC,SAAd,GAA6FH,SAA7F,CAAQI,IAAR;AAAA,IAAkCC,YAAlC,GAA6FL,SAA7F,CAAyBM,OAAzB;AAAA,IAAyDC,YAAzD,GAA6FP,SAA7F,CAAgDQ,OAAhD;AAAA,IAA8EC,UAA9E,GAA6FT,SAA7F,CAAuEU,KAAvE;;AAMP,OAAO,IAAMX,KAA2B,GAAG,SAA9BA,KAA8B,OAA6C;AAAA;;AAAA,uBAA1CY,IAA0C;AAAA,MAA1CA,IAA0C,0BAAnC,QAAmC;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAZC,KAAY;;AACtF,MAAMC,SAAS,2BAAGC,MAAM,CAACC,OAAP,CAAef,UAAf,EAA2BgB,IAA3B,CAAgC,UAACC,EAAD;AAAA,WAAQA,EAAE,CAAC,CAAD,CAAF,KAAUP,IAAlB;AAAA,GAAhC,CAAH,yDAAG,qBAA0D,CAA1D,CAAlB;AAEA,sBACE,QAAC,CAAD,CAAG,KAAH;AAAS,IAAA,KAAK,EAAEG;AAAhB,KAA+BD,KAA/B;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CARM;KAAMb,K","sourcesContent":["import React from 'react';\nimport { Modal as AntdModal, ModalProps as AntModalProps } from 'antd';\nimport { modalSizes } from 'constants/modalSizes';\nimport * as S from './Modal.styles';\n\nexport const { info: InfoModal, success: SuccessModal, warning: WarningModal, error: ErrorModal } = AntdModal;\n\ninterface ModalProps extends AntModalProps {\n  size?: 'small' | 'medium' | 'large';\n}\n\nexport const Modal: React.FC<ModalProps> = ({ size = 'medium', children, ...props }) => {\n  const modalSize = Object.entries(modalSizes).find((sz) => sz[0] === size)?.[1];\n\n  return (\n    <S.Modal width={modalSize} {...props}>\n      {children}\n    </S.Modal>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}