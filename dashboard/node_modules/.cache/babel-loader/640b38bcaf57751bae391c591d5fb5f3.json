{"ast":null,"code":"import _objectSpread from \"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _taggedTemplateLiteral from \"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";\n\nvar _jsxFileName = \"/home/tj/fl-carla/src/controllers/notificationController.tsx\",\n    _templateObject,\n    _templateObject2,\n    _this = this;\n\nimport React from 'react';\nimport { notification } from 'antd';\nimport styled from 'styled-components';\nimport { CheckCircleFilled, ExclamationCircleFilled, InfoCircleFilled, StopFilled } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar IconWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  font-size: \", \";\\n  line-height: 2rem;\\n\"])), function (props) {\n  return props.$isOnlyTitle ? '2rem' : '3rem';\n});\n_c = IconWrapper;\nvar EmptyDescription = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  margin-top: -0.75rem;\\n\"])));\n_c2 = EmptyDescription;\n\nvar openSuccessNotification = function openSuccessNotification(config) {\n  notification.success(_objectSpread(_objectSpread({}, config), {}, {\n    icon: /*#__PURE__*/_jsxDEV(IconWrapper, {\n      $isOnlyTitle: !config.description,\n      children: /*#__PURE__*/_jsxDEV(CheckCircleFilled, {\n        className: \"success-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, _this),\n    message: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title \".concat(!config.description && \"title-only\"),\n      children: config.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 14\n    }, _this),\n    description: config.description ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: config.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 39\n    }, _this) : /*#__PURE__*/_jsxDEV(EmptyDescription, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 97\n    }, _this),\n    className: config.description ? '' : 'notification-without-description'\n  }));\n};\n\nvar openInfoNotification = function openInfoNotification(config) {\n  notification.info(_objectSpread(_objectSpread({}, config), {}, {\n    icon: /*#__PURE__*/_jsxDEV(IconWrapper, {\n      $isOnlyTitle: !config.description,\n      children: /*#__PURE__*/_jsxDEV(InfoCircleFilled, {\n        className: \"info-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, _this),\n    message: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title \".concat(!config.description && \"title-only\"),\n      children: config.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 14\n    }, _this),\n    description: config.description ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: config.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 39\n    }, _this) : /*#__PURE__*/_jsxDEV(EmptyDescription, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 97\n    }, _this),\n    className: config.description ? '' : 'notification-without-description'\n  }));\n};\n\nvar openWarningNotification = function openWarningNotification(config) {\n  notification.warning(_objectSpread(_objectSpread({}, config), {}, {\n    icon: /*#__PURE__*/_jsxDEV(IconWrapper, {\n      $isOnlyTitle: !config.description,\n      children: /*#__PURE__*/_jsxDEV(ExclamationCircleFilled, {\n        className: \"warning-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, _this),\n    message: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title \".concat(!config.description && \"title-only\"),\n      children: config.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 14\n    }, _this),\n    description: config.description ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: config.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 39\n    }, _this) : /*#__PURE__*/_jsxDEV(EmptyDescription, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 97\n    }, _this),\n    className: config.description ? '' : 'notification-without-description'\n  }));\n};\n\nvar openErrorNotification = function openErrorNotification(config) {\n  notification.error(_objectSpread(_objectSpread({}, config), {}, {\n    icon: /*#__PURE__*/_jsxDEV(IconWrapper, {\n      $isOnlyTitle: !config.description,\n      children: /*#__PURE__*/_jsxDEV(StopFilled, {\n        className: \"error-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, _this),\n    message: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title \".concat(!config.description && \"title-only\"),\n      children: config.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 14\n    }, _this),\n    description: config.description ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: config.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 39\n    }, _this) : /*#__PURE__*/_jsxDEV(EmptyDescription, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 97\n    }, _this),\n    className: config.description ? '' : 'notification-without-description'\n  }));\n};\n\nexport var notificationController = {\n  success: openSuccessNotification,\n  info: openInfoNotification,\n  warning: openWarningNotification,\n  error: openErrorNotification\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"IconWrapper\");\n$RefreshReg$(_c2, \"EmptyDescription\");","map":{"version":3,"sources":["/home/tj/fl-carla/src/controllers/notificationController.tsx"],"names":["React","notification","styled","CheckCircleFilled","ExclamationCircleFilled","InfoCircleFilled","StopFilled","IconWrapper","div","props","$isOnlyTitle","EmptyDescription","openSuccessNotification","config","success","icon","description","message","className","openInfoNotification","info","openWarningNotification","warning","openErrorNotification","error","notificationController"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { notification } from 'antd';\nimport styled from 'styled-components';\nimport { CheckCircleFilled, ExclamationCircleFilled, InfoCircleFilled, StopFilled } from '@ant-design/icons';\nimport { ArgsProps } from 'antd/lib/notification';\n\ninterface IconWrapperProps {\n  $isOnlyTitle: boolean;\n}\n\nconst IconWrapper = styled.div<IconWrapperProps>`\n  font-size: ${(props) => (props.$isOnlyTitle ? '2rem' : '3rem')};\n  line-height: 2rem;\n`;\n\nconst EmptyDescription = styled.div`\n  margin-top: -0.75rem;\n`;\n\ntype NotificationProps = ArgsProps;\n\nconst openSuccessNotification = (config: NotificationProps): void => {\n  notification.success({\n    ...config,\n    icon: (\n      <IconWrapper $isOnlyTitle={!config.description}>\n        <CheckCircleFilled className=\"success-icon\" />\n      </IconWrapper>\n    ),\n    message: <div className={`title ${!config.description && `title-only`}`}>{config.message}</div>,\n    description: config.description ? <div className=\"description\">{config.description}</div> : <EmptyDescription />,\n    className: config.description ? '' : 'notification-without-description',\n  });\n};\n\nconst openInfoNotification = (config: NotificationProps): void => {\n  notification.info({\n    ...config,\n    icon: (\n      <IconWrapper $isOnlyTitle={!config.description}>\n        <InfoCircleFilled className=\"info-icon\" />\n      </IconWrapper>\n    ),\n    message: <div className={`title ${!config.description && `title-only`}`}>{config.message}</div>,\n    description: config.description ? <div className=\"description\">{config.description}</div> : <EmptyDescription />,\n    className: config.description ? '' : 'notification-without-description',\n  });\n};\n\nconst openWarningNotification = (config: NotificationProps): void => {\n  notification.warning({\n    ...config,\n    icon: (\n      <IconWrapper $isOnlyTitle={!config.description}>\n        <ExclamationCircleFilled className=\"warning-icon\" />\n      </IconWrapper>\n    ),\n    message: <div className={`title ${!config.description && `title-only`}`}>{config.message}</div>,\n    description: config.description ? <div className=\"description\">{config.description}</div> : <EmptyDescription />,\n    className: config.description ? '' : 'notification-without-description',\n  });\n};\n\nconst openErrorNotification = (config: NotificationProps): void => {\n  notification.error({\n    ...config,\n    icon: (\n      <IconWrapper $isOnlyTitle={!config.description}>\n        <StopFilled className=\"error-icon\" />\n      </IconWrapper>\n    ),\n    message: <div className={`title ${!config.description && `title-only`}`}>{config.message}</div>,\n    description: config.description ? <div className=\"description\">{config.description}</div> : <EmptyDescription />,\n    className: config.description ? '' : 'notification-without-description',\n  });\n};\n\nexport const notificationController = {\n  success: openSuccessNotification,\n  info: openInfoNotification,\n  warning: openWarningNotification,\n  error: openErrorNotification,\n};\n"]},"metadata":{},"sourceType":"module"}