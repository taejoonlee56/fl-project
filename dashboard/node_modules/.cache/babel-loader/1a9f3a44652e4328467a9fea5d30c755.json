{"ast":null,"code":"import { count_occurences } from './helpers.js';\nexport default function closeBraces(retained_template, template) {\n  var placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n  var empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n  var cut_before = retained_template.length;\n  var opening_braces = count_occurences('(', retained_template);\n  var closing_braces = count_occurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n  while (dangling_braces > 0 && cut_before < template.length) {\n    retained_template += template[cut_before].replace(placeholder, empty_placeholder);\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n    cut_before++;\n  }\n  return retained_template;\n}","map":{"version":3,"sources":["../source/closeBraces.js"],"names":["count_occurences","closeBraces","retained_template","template","placeholder","empty_placeholder","cut_before","length","opening_braces","closing_braces","dangling_braces","replace"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,cAAjC;AAEA,eAAe,SAASC,WAAT,CAAqBC,iBAArB,EAAwCC,QAAxC,EACf;EAAA,IADiEC,WACjE,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAD+E,GAC/E;EAAA,IADoFC,iBACpF,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADwG,GACxG;EACC,IAAIC,UAAU,GAAGJ,iBAAiB,CAACK,MAAnC;EAEA,IAAMC,cAAc,GAAGR,gBAAgB,CAAC,GAAD,EAAME,iBAAN,CAAvC;EACA,IAAMO,cAAc,GAAGT,gBAAgB,CAAC,GAAD,EAAME,iBAAN,CAAvC;EAEA,IAAIQ,eAAe,GAAGF,cAAc,GAAGC,cAAvC;EAEA,OAAOC,eAAe,GAAG,CAAlBA,IAAuBJ,UAAU,GAAGH,QAAQ,CAACI,MAApD,EACA;IACCL,iBAAiB,IAAIC,QAAQ,CAACG,UAAD,CAARH,CAAqBQ,OAArBR,CAA6BC,WAA7BD,EAA0CE,iBAA1CF,CAArBD;IAEA,IAAIC,QAAQ,CAACG,UAAD,CAARH,KAAyB,GAA7B,EACA;MACCO,eAAe,EAAA;IACf;IAEDJ,UAAU,EAAA;EACV;EAED,OAAOJ,iBAAP;AACA","sourcesContent":["import { count_occurences } from './helpers.js'\r\n\r\nexport default function closeBraces(retained_template, template, placeholder = 'x', empty_placeholder = ' ')\r\n{\r\n\tlet cut_before = retained_template.length\r\n\r\n\tconst opening_braces = count_occurences('(', retained_template)\r\n\tconst closing_braces = count_occurences(')', retained_template)\r\n\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\r\n\twhile (dangling_braces > 0 && cut_before < template.length)\r\n\t{\r\n\t\tretained_template += template[cut_before].replace(placeholder, empty_placeholder)\r\n\r\n\t\tif (template[cut_before] === ')')\r\n\t\t{\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\r\n\t\tcut_before++\r\n\t}\r\n\r\n\treturn retained_template\r\n}\r\n"]},"metadata":{},"sourceType":"module"}