{"ast":null,"code":"import _objectSpread from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";\nimport _slicedToArray from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\n\nvar _jsxFileName = \"D:\\\\fl-carla\\\\src\\\\components\\\\tj\\\\BasicTable\\\\BasicTable.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { getBasicTableData } from '@app/components/tj/BasicTable/tj_table.api';\nimport { Table } from 'components/common/Table/Table';\nimport { useTranslation } from 'react-i18next';\nimport { useMounted } from '@app/hooks/useMounted';\nimport { useTheme } from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar initialPagination = {\n  current: 1,\n  ptrainSize: 5\n};\nexport var BasicTable = function BasicTable() {\n  _s();\n\n  var _useState = useState({\n    data: [],\n    pagination: initialPagination,\n    loading: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      tableData = _useState2[0],\n      setTableData = _useState2[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useMounted = useMounted(),\n      isMounted = _useMounted.isMounted;\n\n  var theme = useTheme();\n  var fetch = useCallback(function (pagination) {\n    setTableData(function (tableData) {\n      return _objectSpread(_objectSpread({}, tableData), {}, {\n        loading: true\n      });\n    });\n    getBasicTableData(pagination).then(function (res) {\n      if (isMounted.current) {\n        setTableData({\n          data: res.data,\n          pagination: res.pagination,\n          loading: false\n        });\n      }\n    });\n  }, [isMounted]);\n  useEffect(function () {\n    fetch(initialPagination);\n  }, [fetch]);\n\n  var handleTableChange = function handleTableChange(pagination) {\n    fetch(pagination);\n  };\n\n  var handleDeleteRow = function handleDeleteRow(rowId) {\n    setTableData(_objectSpread(_objectSpread({}, tableData), {}, {\n      data: tableData.data.filter(function (item) {\n        return item.key !== rowId;\n      }),\n      pagination: _objectSpread(_objectSpread({}, tableData.pagination), {}, {\n        // total: tableData.pagination.total ? tableData.pagination.total - 1 : tableData.pagination.total,\n        total: tableData.pagination.total\n      })\n    }));\n  };\n\n  var columns = [{\n    title: t('common.name'),\n    dataIndex: 'name',\n    render: function render(text) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 33\n      }, _this);\n    },\n    filterMode: 'tree',\n    filterSearch: true,\n    filters: [{\n      text: t('common.firstName'),\n      value: 'firstName',\n      children: [{\n        text: 'TJ',\n        value: 'TJ'\n      }, {\n        text: 'TJ',\n        value: 'TJ'\n      }, {\n        text: 'TJ',\n        value: 'TJ'\n      }, {\n        text: 'TJ',\n        value: 'TJ'\n      }]\n    }, {\n      text: t('common.lastName'),\n      value: 'lastName',\n      children: [{\n        text: 'Green',\n        value: 'Green'\n      }, {\n        text: 'Black',\n        value: 'Black'\n      }, {\n        text: 'Brown',\n        value: 'Brown'\n      }]\n    }],\n    onFilter: function onFilter(value, record) {\n      return record.name.includes(value.toString());\n    }\n  }, {\n    // title: t('common.train'),\n    title: t('Train'),\n    dataIndex: 'train',\n    sorter: function sorter(a, b) {\n      return a.train - b.train;\n    },\n    showSorterTooltip: false\n  }, {\n    // title: t('common.train'),\n    title: t('Valid'),\n    dataIndex: 'valid',\n    sorter: function sorter(a, b) {\n      return a.valid - b.valid;\n    },\n    showSorterTooltip: false\n  }, {\n    title: t('common.address'),\n    dataIndex: 'address'\n  } // {\n  //   title: t('common.tags'),\n  //   key: 'tags',\n  //   dataIndex: 'tags',\n  //   render: (tags: Tag[]) => (\n  //     <Row gutter={[10, 10]}>\n  //       {tags.map((tag: Tag) => {\n  //         return (\n  //           <Col key={tag.value}>\n  //             <Status color={defineColorByPriority(tag.priority, theme)} text={tag.value.toUpperCase()} />\n  //           </Col>\n  //         );\n  //       })}\n  //     </Row>\n  //   ),\n  // },\n  // {\n  //   title: t('tables.actions'),\n  //   dataIndex: 'actions',\n  //   width: '15%',\n  //   render: (text: string, record: { name: string; key: number }) => {\n  //     return (\n  //       <Space>\n  //         <Button\n  //           type=\"ghost\"\n  //           onClick={() => {\n  //             notificationController.info({ messtrain: t('tables.inviteMesstrain', { name: record.name }) });\n  //           }}\n  //         >\n  //           {t('tables.invite')}\n  //         </Button>\n  //         <Button type=\"default\" danger onClick={() => handleDeleteRow(record.key)}>\n  //           {t('tables.delete')}\n  //         </Button>\n  //       </Space>\n  //     );\n  //   },\n  // },\n  ];\n  return /*#__PURE__*/_jsxDEV(Table, {\n    columns: columns,\n    dataSource: tableData.data,\n    pagination: tableData.pagination,\n    loading: tableData.loading,\n    onChange: handleTableChange,\n    scroll: {\n      x: 100\n    },\n    bordered: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(BasicTable, \"6x1ACGYtIiu1a4ITLQbqo0YFUbI=\", false, function () {\n  return [useTranslation, useMounted, useTheme];\n});\n\n_c = BasicTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicTable\");","map":{"version":3,"sources":["D:/fl-carla/src/components/tj/BasicTable/BasicTable.tsx"],"names":["React","useEffect","useState","useCallback","getBasicTableData","Table","useTranslation","useMounted","useTheme","initialPagination","current","ptrainSize","BasicTable","data","pagination","loading","tableData","setTableData","t","isMounted","theme","fetch","then","res","handleTableChange","handleDeleteRow","rowId","filter","item","key","total","columns","title","dataIndex","render","text","filterMode","filterSearch","filters","value","children","onFilter","record","name","includes","toString","sorter","a","b","train","showSorterTooltip","valid","x"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport { Col, Row, Space, TablePaginationConfig } from 'antd';\r\nimport { BasicTableRow, getBasicTableData, Pagination, Tag } from '@app/components/tj/BasicTable/tj_table.api';\r\nimport { Table } from 'components/common/Table/Table';\r\nimport { ColumnsType } from 'antd/es/table';\r\nimport { Button } from 'components/common/buttons/Button/Button';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { defineColorByPriority } from '@app/utils/utils';\r\nimport { notificationController } from 'controllers/notificationController';\r\nimport { Status } from '@app/components/profile/profileCard/profileFormNav/nav/payments/paymentHistory/Status/Status';\r\nimport { useMounted } from '@app/hooks/useMounted';\r\nimport { useTheme } from 'styled-components';\r\n\r\nconst initialPagination: Pagination = {\r\n  current: 1,\r\n  ptrainSize: 5,\r\n};\r\n\r\nexport const BasicTable: React.FC = () => {\r\n  const [tableData, setTableData] = useState<{ data: BasicTableRow[]; pagination: Pagination; loading: boolean }>({\r\n    data: [],\r\n    pagination: initialPagination,\r\n    loading: false,\r\n  });\r\n  const { t } = useTranslation();\r\n  const { isMounted } = useMounted();\r\n\r\n  const theme = useTheme();\r\n\r\n  const fetch = useCallback(\r\n    (pagination: Pagination) => {\r\n      setTableData((tableData) => ({ ...tableData, loading: true }));\r\n      getBasicTableData(pagination).then((res) => {\r\n        if (isMounted.current) {\r\n          setTableData({ data: res.data, pagination: res.pagination, loading: false });\r\n        }\r\n      });\r\n    },\r\n    [isMounted],\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetch(initialPagination);\r\n  }, [fetch]);\r\n\r\n  const handleTableChange = (pagination: TablePaginationConfig) => {\r\n    fetch(pagination);\r\n  };\r\n\r\n  const handleDeleteRow = (rowId: number) => {\r\n    setTableData({\r\n      ...tableData,\r\n      data: tableData.data.filter((item) => item.key !== rowId),\r\n      pagination: {\r\n        ...tableData.pagination,\r\n        // total: tableData.pagination.total ? tableData.pagination.total - 1 : tableData.pagination.total,\r\n        total: tableData.pagination.total,\r\n      },\r\n    });\r\n  };\r\n\r\n  const columns: ColumnsType<BasicTableRow> = [\r\n    {\r\n      title: t('common.name'),\r\n      dataIndex: 'name',\r\n      render: (text: string) => <span>{text}</span>,\r\n      filterMode: 'tree',\r\n      filterSearch: true,\r\n      filters: [\r\n        {\r\n          text: t('common.firstName'),\r\n          value: 'firstName',\r\n          children: [\r\n            {\r\n              text: 'TJ',\r\n              value: 'TJ',\r\n            },\r\n            {\r\n              text: 'TJ',\r\n              value: 'TJ',\r\n            },\r\n            {\r\n              text: 'TJ',\r\n              value: 'TJ',\r\n            },\r\n            {\r\n              text: 'TJ',\r\n              value: 'TJ',\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          text: t('common.lastName'),\r\n          value: 'lastName',\r\n          children: [\r\n            {\r\n              text: 'Green',\r\n              value: 'Green',\r\n            },\r\n            {\r\n              text: 'Black',\r\n              value: 'Black',\r\n            },\r\n            {\r\n              text: 'Brown',\r\n              value: 'Brown',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n      onFilter: (value: string | number | boolean, record: BasicTableRow) => record.name.includes(value.toString()),\r\n    },\r\n    {\r\n      // title: t('common.train'),\r\n      title: t('Train'),\r\n      dataIndex: 'train',\r\n      sorter: (a: BasicTableRow, b: BasicTableRow) => a.train - b.train,\r\n      showSorterTooltip: false,\r\n    },\r\n    {\r\n      // title: t('common.train'),\r\n      title: t('Valid'),\r\n      dataIndex: 'valid',\r\n      sorter: (a: BasicTableRow, b: BasicTableRow) => a.valid - b.valid,\r\n      showSorterTooltip: false,\r\n    },\r\n    {\r\n      title: t('common.address'),\r\n      dataIndex: 'address',\r\n    },\r\n    // {\r\n    //   title: t('common.tags'),\r\n    //   key: 'tags',\r\n    //   dataIndex: 'tags',\r\n    //   render: (tags: Tag[]) => (\r\n    //     <Row gutter={[10, 10]}>\r\n    //       {tags.map((tag: Tag) => {\r\n    //         return (\r\n    //           <Col key={tag.value}>\r\n    //             <Status color={defineColorByPriority(tag.priority, theme)} text={tag.value.toUpperCase()} />\r\n    //           </Col>\r\n    //         );\r\n    //       })}\r\n    //     </Row>\r\n    //   ),\r\n    // },\r\n    // {\r\n    //   title: t('tables.actions'),\r\n    //   dataIndex: 'actions',\r\n    //   width: '15%',\r\n    //   render: (text: string, record: { name: string; key: number }) => {\r\n    //     return (\r\n    //       <Space>\r\n    //         <Button\r\n    //           type=\"ghost\"\r\n    //           onClick={() => {\r\n    //             notificationController.info({ messtrain: t('tables.inviteMesstrain', { name: record.name }) });\r\n    //           }}\r\n    //         >\r\n    //           {t('tables.invite')}\r\n    //         </Button>\r\n    //         <Button type=\"default\" danger onClick={() => handleDeleteRow(record.key)}>\r\n    //           {t('tables.delete')}\r\n    //         </Button>\r\n    //       </Space>\r\n    //     );\r\n    //   },\r\n    // },\r\n  ];\r\n\r\n  return (\r\n    <Table\r\n      columns={columns}\r\n      dataSource={tableData.data}\r\n      pagination={tableData.pagination}\r\n      loading={tableData.loading}\r\n      onChange={handleTableChange}\r\n      scroll={{ x: 100 }}\r\n      bordered\r\n    />\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}