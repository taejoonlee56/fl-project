{"ast":null,"code":"var _jsxFileName = \"D:\\\\fl-carla\\\\src\\\\index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './i18n';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport 'config/config';\nimport { Provider } from 'react-redux';\nimport { store } from '@app/store/store';\nimport { ThemeSwitcherProvider } from 'react-css-theme-switcher';\nimport { defaultTheme } from '@app/store/slices/themeSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar themes = {\n  dark: \"\".concat(process.env.PUBLIC_URL, \"/themes/main-dark.css\"),\n  light: \"\".concat(process.env.PUBLIC_URL, \"/themes/main-light.css\")\n};\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(ThemeSwitcherProvider, {\n      themeMap: themes,\n      defaultTheme: defaultTheme,\n      insertionPoint: document.getElementById('inject-styles-here'),\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 23,\n  columnNumber: 3\n}, this), document.getElementById('root'));\nserviceWorkerRegistration.register({\n  onUpdate: function onUpdate(registration) {\n    var waitingServiceWorker = registration.waiting;\n\n    if (waitingServiceWorker) {\n      waitingServiceWorker.addEventListener('statechange', function (event) {\n        if (event.target.state === 'activated') window.location.reload();\n      });\n      waitingServiceWorker.postMessage({\n        type: 'SKIP_WAITING'\n      });\n    }\n  }\n}); // app will reload if new version of app is available\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"sources":["D:/fl-carla/src/index.tsx"],"names":["React","ReactDOM","App","reportWebVitals","serviceWorkerRegistration","Provider","store","ThemeSwitcherProvider","defaultTheme","themes","dark","process","env","PUBLIC_URL","light","render","document","getElementById","register","onUpdate","registration","waitingServiceWorker","waiting","addEventListener","event","target","state","window","location","reload","postMessage","type"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAO,QAAP;AACA,OAAO,KAAKC,yBAAZ,MAA2C,6BAA3C;AACA,OAAO,eAAP;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,SAASC,YAAT,QAA6B,8BAA7B;;AAMA,IAAMC,MAAM,GAAG;AACbC,EAAAA,IAAI,YAAKC,OAAO,CAACC,GAAR,CAAYC,UAAjB,0BADS;AAEbC,EAAAA,KAAK,YAAKH,OAAO,CAACC,GAAR,CAAYC,UAAjB;AAFQ,CAAf;AAKAZ,QAAQ,CAACc,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,QAAD;AAAU,IAAA,KAAK,EAAET,KAAjB;AAAA,2BACE,QAAC,qBAAD;AACE,MAAA,QAAQ,EAAEG,MADZ;AAEE,MAAA,YAAY,EAAED,YAFhB;AAGE,MAAA,cAAc,EAAEQ,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,CAHlB;AAAA,6BAKE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAYED,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAZF;AAeAb,yBAAyB,CAACc,QAA1B,CAAmC;AACjCC,EAAAA,QAAQ,EAAE,kBAACC,YAAD,EAAkB;AAC1B,QAAMC,oBAAoB,GAAGD,YAAY,CAACE,OAA1C;;AAEA,QAAID,oBAAJ,EAA0B;AACxBA,MAAAA,oBAAoB,CAACE,gBAArB,CAAsC,aAAtC,EAAqD,UAACC,KAAD,EAAW;AAC9D,YAAKA,KAAK,CAACC,MAAP,CAA8BC,KAA9B,KAAwC,WAA5C,EAAyDC,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AAC1D,OAFD;AAGAR,MAAAA,oBAAoB,CAACS,WAArB,CAAiC;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAjC;AACD;AACF;AAVgC,CAAnC,E,CAWI;AAEJ;AACA;AACA;;AACA5B,eAAe","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './i18n';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport 'config/config';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from '@app/store/store';\r\nimport { ThemeSwitcherProvider } from 'react-css-theme-switcher';\r\nimport { defaultTheme } from '@app/store/slices/themeSlice';\r\n\r\ninterface EventTarget {\r\n  state?: 'activated';\r\n}\r\n\r\nconst themes = {\r\n  dark: `${process.env.PUBLIC_URL}/themes/main-dark.css`,\r\n  light: `${process.env.PUBLIC_URL}/themes/main-light.css`,\r\n};\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeSwitcherProvider\r\n        themeMap={themes}\r\n        defaultTheme={defaultTheme}\r\n        insertionPoint={document.getElementById('inject-styles-here')}\r\n      >\r\n        <App />\r\n      </ThemeSwitcherProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\nserviceWorkerRegistration.register({\r\n  onUpdate: (registration) => {\r\n    const waitingServiceWorker = registration.waiting;\r\n\r\n    if (waitingServiceWorker) {\r\n      waitingServiceWorker.addEventListener('statechange', (event) => {\r\n        if ((event.target as EventTarget).state === 'activated') window.location.reload();\r\n      });\r\n      waitingServiceWorker.postMessage({ type: 'SKIP_WAITING' });\r\n    }\r\n  },\r\n}); // app will reload if new version of app is available\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"]},"metadata":{},"sourceType":"module"}