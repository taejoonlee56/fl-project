{"ast":null,"code":"import _classCallCheck from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _assertThisInitialized from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\assertThisInitialized.js\";\nimport _inherits from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport { Socket as Engine, installTimerFunctions, nextTick } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nexport var Manager = /*#__PURE__*/function (_Emitter) {\n  _inherits(Manager, _Emitter);\n\n  var _super = _createSuper(Manager);\n\n  function Manager(uri, opts) {\n    var _this;\n\n    _classCallCheck(this, Manager);\n\n    var _a;\n\n    _this = _super.call(this);\n    _this.nsps = {};\n    _this.subs = [];\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = undefined;\n    }\n\n    opts = opts || {};\n    opts.path = opts.path || \"/socket.io\";\n    _this.opts = opts;\n    installTimerFunctions(_assertThisInitialized(_this), opts);\n\n    _this.reconnection(opts.reconnection !== false);\n\n    _this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n\n    _this.reconnectionDelay(opts.reconnectionDelay || 1000);\n\n    _this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n\n    _this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n\n    _this.backoff = new Backoff({\n      min: _this.reconnectionDelay(),\n      max: _this.reconnectionDelayMax(),\n      jitter: _this.randomizationFactor()\n    });\n\n    _this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n\n    _this._readyState = \"closed\";\n    _this.uri = uri;\n\n    var _parser = opts.parser || parser;\n\n    _this.encoder = new _parser.Encoder();\n    _this.decoder = new _parser.Decoder();\n    _this._autoConnect = opts.autoConnect !== false;\n    if (_this._autoConnect) _this.open();\n    return _this;\n  }\n\n  _createClass(Manager, [{\n    key: \"reconnection\",\n    value: function reconnection(v) {\n      if (!arguments.length) return this._reconnection;\n      this._reconnection = !!v;\n      return this;\n    }\n  }, {\n    key: \"reconnectionAttempts\",\n    value: function reconnectionAttempts(v) {\n      if (v === undefined) return this._reconnectionAttempts;\n      this._reconnectionAttempts = v;\n      return this;\n    }\n  }, {\n    key: \"reconnectionDelay\",\n    value: function reconnectionDelay(v) {\n      var _a;\n\n      if (v === undefined) return this._reconnectionDelay;\n      this._reconnectionDelay = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n      return this;\n    }\n  }, {\n    key: \"randomizationFactor\",\n    value: function randomizationFactor(v) {\n      var _a;\n\n      if (v === undefined) return this._randomizationFactor;\n      this._randomizationFactor = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n      return this;\n    }\n  }, {\n    key: \"reconnectionDelayMax\",\n    value: function reconnectionDelayMax(v) {\n      var _a;\n\n      if (v === undefined) return this._reconnectionDelayMax;\n      this._reconnectionDelayMax = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n      return this;\n    }\n  }, {\n    key: \"timeout\",\n    value: function timeout(v) {\n      if (!arguments.length) return this._timeout;\n      this._timeout = v;\n      return this;\n    }\n    /**\r\n     * Starts trying to reconnect if reconnection is enabled and we have not\r\n     * started reconnecting yet\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"maybeReconnectOnOpen\",\n    value: function maybeReconnectOnOpen() {\n      // Only try to reconnect if it's the first time we're connecting\n      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n        // keeps reconnection from firing twice for the same reconnection loop\n        this.reconnect();\n      }\n    }\n    /**\r\n     * Sets the current transport `socket`.\r\n     *\r\n     * @param {Function} fn - optional, callback\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"open\",\n    value: function open(fn) {\n      var _this2 = this;\n\n      if (~this._readyState.indexOf(\"open\")) return this;\n      this.engine = new Engine(this.uri, this.opts);\n      var socket = this.engine;\n      var self = this;\n      this._readyState = \"opening\";\n      this.skipReconnect = false; // emit `open`\n\n      var openSubDestroy = on(socket, \"open\", function () {\n        self.onopen();\n        fn && fn();\n      }); // emit `error`\n\n      var errorSub = on(socket, \"error\", function (err) {\n        self.cleanup();\n        self._readyState = \"closed\";\n\n        _this2.emitReserved(\"error\", err);\n\n        if (fn) {\n          fn(err);\n        } else {\n          // Only do this if there is no fn to handle the error\n          self.maybeReconnectOnOpen();\n        }\n      });\n\n      if (false !== this._timeout) {\n        var timeout = this._timeout;\n\n        if (timeout === 0) {\n          openSubDestroy(); // prevents a race condition with the 'open' event\n        } // set timer\n\n\n        var timer = this.setTimeoutFn(function () {\n          openSubDestroy();\n          socket.close(); // @ts-ignore\n\n          socket.emit(\"error\", new Error(\"timeout\"));\n        }, timeout);\n\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n\n        this.subs.push(function subDestroy() {\n          clearTimeout(timer);\n        });\n      }\n\n      this.subs.push(openSubDestroy);\n      this.subs.push(errorSub);\n      return this;\n    }\n    /**\r\n     * Alias for open()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(fn) {\n      return this.open(fn);\n    }\n    /**\r\n     * Called upon transport open.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      // clear old subs\n      this.cleanup(); // mark as open\n\n      this._readyState = \"open\";\n      this.emitReserved(\"open\"); // add new subs\n\n      var socket = this.engine;\n      this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\r\n     * Called upon a ping.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onping\",\n    value: function onping() {\n      this.emitReserved(\"ping\");\n    }\n    /**\r\n     * Called with data.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"ondata\",\n    value: function ondata(data) {\n      try {\n        this.decoder.add(data);\n      } catch (e) {\n        this.onclose(\"parse error\", e);\n      }\n    }\n    /**\r\n     * Called when parser fully decodes a packet.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"ondecoded\",\n    value: function ondecoded(packet) {\n      var _this3 = this;\n\n      // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n      nextTick(function () {\n        _this3.emitReserved(\"packet\", packet);\n      }, this.setTimeoutFn);\n    }\n    /**\r\n     * Called upon socket error.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      this.emitReserved(\"error\", err);\n    }\n    /**\r\n     * Creates a new socket for the given `nsp`.\r\n     *\r\n     * @return {Socket}\r\n     * @public\r\n     */\n\n  }, {\n    key: \"socket\",\n    value: function socket(nsp, opts) {\n      var socket = this.nsps[nsp];\n\n      if (!socket) {\n        socket = new Socket(this, nsp, opts);\n        this.nsps[nsp] = socket;\n      }\n\n      return socket;\n    }\n    /**\r\n     * Called upon a socket close.\r\n     *\r\n     * @param socket\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy(socket) {\n      var nsps = Object.keys(this.nsps);\n\n      for (var _i = 0, _nsps = nsps; _i < _nsps.length; _i++) {\n        var nsp = _nsps[_i];\n        var _socket = this.nsps[nsp];\n\n        if (_socket.active) {\n          return;\n        }\n      }\n\n      this._close();\n    }\n    /**\r\n     * Writes a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_packet\",\n    value: function _packet(packet) {\n      var encodedPackets = this.encoder.encode(packet);\n\n      for (var i = 0; i < encodedPackets.length; i++) {\n        this.engine.write(encodedPackets[i], packet.options);\n      }\n    }\n    /**\r\n     * Clean up transport subscriptions and packet buffer.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      this.subs.forEach(function (subDestroy) {\n        return subDestroy();\n      });\n      this.subs.length = 0;\n      this.decoder.destroy();\n    }\n    /**\r\n     * Close the current socket.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_close\",\n    value: function _close() {\n      this.skipReconnect = true;\n      this._reconnecting = false;\n      this.onclose(\"forced close\");\n      if (this.engine) this.engine.close();\n    }\n    /**\r\n     * Alias for close()\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      return this._close();\n    }\n    /**\r\n     * Called upon engine close.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason, description) {\n      this.cleanup();\n      this.backoff.reset();\n      this._readyState = \"closed\";\n      this.emitReserved(\"close\", reason, description);\n\n      if (this._reconnection && !this.skipReconnect) {\n        this.reconnect();\n      }\n    }\n    /**\r\n     * Attempt a reconnection.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      var _this4 = this;\n\n      if (this._reconnecting || this.skipReconnect) return this;\n      var self = this;\n\n      if (this.backoff.attempts >= this._reconnectionAttempts) {\n        this.backoff.reset();\n        this.emitReserved(\"reconnect_failed\");\n        this._reconnecting = false;\n      } else {\n        var delay = this.backoff.duration();\n        this._reconnecting = true;\n        var timer = this.setTimeoutFn(function () {\n          if (self.skipReconnect) return;\n\n          _this4.emitReserved(\"reconnect_attempt\", self.backoff.attempts); // check again for the case socket closed in above events\n\n\n          if (self.skipReconnect) return;\n          self.open(function (err) {\n            if (err) {\n              self._reconnecting = false;\n              self.reconnect();\n\n              _this4.emitReserved(\"reconnect_error\", err);\n            } else {\n              self.onreconnect();\n            }\n          });\n        }, delay);\n\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n\n        this.subs.push(function subDestroy() {\n          clearTimeout(timer);\n        });\n      }\n    }\n    /**\r\n     * Called upon successful reconnect.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onreconnect\",\n    value: function onreconnect() {\n      var attempt = this.backoff.attempts;\n      this._reconnecting = false;\n      this.backoff.reset();\n      this.emitReserved(\"reconnect\", attempt);\n    }\n  }]);\n\n  return Manager;\n}(Emitter);","map":{"version":3,"sources":["D:/fl-carla/node_modules/socket.io-client/build/esm/manager.js"],"names":["Socket","Engine","installTimerFunctions","nextTick","parser","on","Backoff","Emitter","Manager","uri","opts","_a","nsps","subs","undefined","path","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","min","max","jitter","timeout","_readyState","_parser","encoder","Encoder","decoder","Decoder","_autoConnect","autoConnect","open","v","arguments","length","_reconnection","_reconnectionAttempts","_reconnectionDelay","setMin","_randomizationFactor","setJitter","_reconnectionDelayMax","setMax","_timeout","_reconnecting","attempts","reconnect","fn","indexOf","engine","socket","self","skipReconnect","openSubDestroy","onopen","errorSub","err","cleanup","emitReserved","maybeReconnectOnOpen","timer","setTimeoutFn","close","emit","Error","autoUnref","unref","push","subDestroy","clearTimeout","onping","bind","ondata","onerror","onclose","ondecoded","data","add","e","packet","nsp","Object","keys","active","_close","encodedPackets","encode","i","write","options","forEach","destroy","reason","description","reset","delay","duration","onreconnect","attempt"],"mappings":"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","sourcesContent":["import { Socket as Engine, installTimerFunctions, nextTick, } from \"engine.io-client\";\r\nimport { Socket } from \"./socket.js\";\r\nimport * as parser from \"socket.io-parser\";\r\nimport { on } from \"./on.js\";\r\nimport { Backoff } from \"./contrib/backo2.js\";\r\nimport { Emitter, } from \"@socket.io/component-emitter\";\r\nexport class Manager extends Emitter {\r\n    constructor(uri, opts) {\r\n        var _a;\r\n        super();\r\n        this.nsps = {};\r\n        this.subs = [];\r\n        if (uri && \"object\" === typeof uri) {\r\n            opts = uri;\r\n            uri = undefined;\r\n        }\r\n        opts = opts || {};\r\n        opts.path = opts.path || \"/socket.io\";\r\n        this.opts = opts;\r\n        installTimerFunctions(this, opts);\r\n        this.reconnection(opts.reconnection !== false);\r\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\r\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\r\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\r\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\r\n        this.backoff = new Backoff({\r\n            min: this.reconnectionDelay(),\r\n            max: this.reconnectionDelayMax(),\r\n            jitter: this.randomizationFactor(),\r\n        });\r\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\r\n        this._readyState = \"closed\";\r\n        this.uri = uri;\r\n        const _parser = opts.parser || parser;\r\n        this.encoder = new _parser.Encoder();\r\n        this.decoder = new _parser.Decoder();\r\n        this._autoConnect = opts.autoConnect !== false;\r\n        if (this._autoConnect)\r\n            this.open();\r\n    }\r\n    reconnection(v) {\r\n        if (!arguments.length)\r\n            return this._reconnection;\r\n        this._reconnection = !!v;\r\n        return this;\r\n    }\r\n    reconnectionAttempts(v) {\r\n        if (v === undefined)\r\n            return this._reconnectionAttempts;\r\n        this._reconnectionAttempts = v;\r\n        return this;\r\n    }\r\n    reconnectionDelay(v) {\r\n        var _a;\r\n        if (v === undefined)\r\n            return this._reconnectionDelay;\r\n        this._reconnectionDelay = v;\r\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\r\n        return this;\r\n    }\r\n    randomizationFactor(v) {\r\n        var _a;\r\n        if (v === undefined)\r\n            return this._randomizationFactor;\r\n        this._randomizationFactor = v;\r\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\r\n        return this;\r\n    }\r\n    reconnectionDelayMax(v) {\r\n        var _a;\r\n        if (v === undefined)\r\n            return this._reconnectionDelayMax;\r\n        this._reconnectionDelayMax = v;\r\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\r\n        return this;\r\n    }\r\n    timeout(v) {\r\n        if (!arguments.length)\r\n            return this._timeout;\r\n        this._timeout = v;\r\n        return this;\r\n    }\r\n    /**\r\n     * Starts trying to reconnect if reconnection is enabled and we have not\r\n     * started reconnecting yet\r\n     *\r\n     * @private\r\n     */\r\n    maybeReconnectOnOpen() {\r\n        // Only try to reconnect if it's the first time we're connecting\r\n        if (!this._reconnecting &&\r\n            this._reconnection &&\r\n            this.backoff.attempts === 0) {\r\n            // keeps reconnection from firing twice for the same reconnection loop\r\n            this.reconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Sets the current transport `socket`.\r\n     *\r\n     * @param {Function} fn - optional, callback\r\n     * @return self\r\n     * @public\r\n     */\r\n    open(fn) {\r\n        if (~this._readyState.indexOf(\"open\"))\r\n            return this;\r\n        this.engine = new Engine(this.uri, this.opts);\r\n        const socket = this.engine;\r\n        const self = this;\r\n        this._readyState = \"opening\";\r\n        this.skipReconnect = false;\r\n        // emit `open`\r\n        const openSubDestroy = on(socket, \"open\", function () {\r\n            self.onopen();\r\n            fn && fn();\r\n        });\r\n        // emit `error`\r\n        const errorSub = on(socket, \"error\", (err) => {\r\n            self.cleanup();\r\n            self._readyState = \"closed\";\r\n            this.emitReserved(\"error\", err);\r\n            if (fn) {\r\n                fn(err);\r\n            }\r\n            else {\r\n                // Only do this if there is no fn to handle the error\r\n                self.maybeReconnectOnOpen();\r\n            }\r\n        });\r\n        if (false !== this._timeout) {\r\n            const timeout = this._timeout;\r\n            if (timeout === 0) {\r\n                openSubDestroy(); // prevents a race condition with the 'open' event\r\n            }\r\n            // set timer\r\n            const timer = this.setTimeoutFn(() => {\r\n                openSubDestroy();\r\n                socket.close();\r\n                // @ts-ignore\r\n                socket.emit(\"error\", new Error(\"timeout\"));\r\n            }, timeout);\r\n            if (this.opts.autoUnref) {\r\n                timer.unref();\r\n            }\r\n            this.subs.push(function subDestroy() {\r\n                clearTimeout(timer);\r\n            });\r\n        }\r\n        this.subs.push(openSubDestroy);\r\n        this.subs.push(errorSub);\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for open()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    connect(fn) {\r\n        return this.open(fn);\r\n    }\r\n    /**\r\n     * Called upon transport open.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        // clear old subs\r\n        this.cleanup();\r\n        // mark as open\r\n        this._readyState = \"open\";\r\n        this.emitReserved(\"open\");\r\n        // add new subs\r\n        const socket = this.engine;\r\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\r\n    }\r\n    /**\r\n     * Called upon a ping.\r\n     *\r\n     * @private\r\n     */\r\n    onping() {\r\n        this.emitReserved(\"ping\");\r\n    }\r\n    /**\r\n     * Called with data.\r\n     *\r\n     * @private\r\n     */\r\n    ondata(data) {\r\n        try {\r\n            this.decoder.add(data);\r\n        }\r\n        catch (e) {\r\n            this.onclose(\"parse error\", e);\r\n        }\r\n    }\r\n    /**\r\n     * Called when parser fully decodes a packet.\r\n     *\r\n     * @private\r\n     */\r\n    ondecoded(packet) {\r\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\r\n        nextTick(() => {\r\n            this.emitReserved(\"packet\", packet);\r\n        }, this.setTimeoutFn);\r\n    }\r\n    /**\r\n     * Called upon socket error.\r\n     *\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        this.emitReserved(\"error\", err);\r\n    }\r\n    /**\r\n     * Creates a new socket for the given `nsp`.\r\n     *\r\n     * @return {Socket}\r\n     * @public\r\n     */\r\n    socket(nsp, opts) {\r\n        let socket = this.nsps[nsp];\r\n        if (!socket) {\r\n            socket = new Socket(this, nsp, opts);\r\n            this.nsps[nsp] = socket;\r\n        }\r\n        return socket;\r\n    }\r\n    /**\r\n     * Called upon a socket close.\r\n     *\r\n     * @param socket\r\n     * @private\r\n     */\r\n    _destroy(socket) {\r\n        const nsps = Object.keys(this.nsps);\r\n        for (const nsp of nsps) {\r\n            const socket = this.nsps[nsp];\r\n            if (socket.active) {\r\n                return;\r\n            }\r\n        }\r\n        this._close();\r\n    }\r\n    /**\r\n     * Writes a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    _packet(packet) {\r\n        const encodedPackets = this.encoder.encode(packet);\r\n        for (let i = 0; i < encodedPackets.length; i++) {\r\n            this.engine.write(encodedPackets[i], packet.options);\r\n        }\r\n    }\r\n    /**\r\n     * Clean up transport subscriptions and packet buffer.\r\n     *\r\n     * @private\r\n     */\r\n    cleanup() {\r\n        this.subs.forEach((subDestroy) => subDestroy());\r\n        this.subs.length = 0;\r\n        this.decoder.destroy();\r\n    }\r\n    /**\r\n     * Close the current socket.\r\n     *\r\n     * @private\r\n     */\r\n    _close() {\r\n        this.skipReconnect = true;\r\n        this._reconnecting = false;\r\n        this.onclose(\"forced close\");\r\n        if (this.engine)\r\n            this.engine.close();\r\n    }\r\n    /**\r\n     * Alias for close()\r\n     *\r\n     * @private\r\n     */\r\n    disconnect() {\r\n        return this._close();\r\n    }\r\n    /**\r\n     * Called upon engine close.\r\n     *\r\n     * @private\r\n     */\r\n    onclose(reason, description) {\r\n        this.cleanup();\r\n        this.backoff.reset();\r\n        this._readyState = \"closed\";\r\n        this.emitReserved(\"close\", reason, description);\r\n        if (this._reconnection && !this.skipReconnect) {\r\n            this.reconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Attempt a reconnection.\r\n     *\r\n     * @private\r\n     */\r\n    reconnect() {\r\n        if (this._reconnecting || this.skipReconnect)\r\n            return this;\r\n        const self = this;\r\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\r\n            this.backoff.reset();\r\n            this.emitReserved(\"reconnect_failed\");\r\n            this._reconnecting = false;\r\n        }\r\n        else {\r\n            const delay = this.backoff.duration();\r\n            this._reconnecting = true;\r\n            const timer = this.setTimeoutFn(() => {\r\n                if (self.skipReconnect)\r\n                    return;\r\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\r\n                // check again for the case socket closed in above events\r\n                if (self.skipReconnect)\r\n                    return;\r\n                self.open((err) => {\r\n                    if (err) {\r\n                        self._reconnecting = false;\r\n                        self.reconnect();\r\n                        this.emitReserved(\"reconnect_error\", err);\r\n                    }\r\n                    else {\r\n                        self.onreconnect();\r\n                    }\r\n                });\r\n            }, delay);\r\n            if (this.opts.autoUnref) {\r\n                timer.unref();\r\n            }\r\n            this.subs.push(function subDestroy() {\r\n                clearTimeout(timer);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Called upon successful reconnect.\r\n     *\r\n     * @private\r\n     */\r\n    onreconnect() {\r\n        const attempt = this.backoff.attempts;\r\n        this._reconnecting = false;\r\n        this.backoff.reset();\r\n        this.emitReserved(\"reconnect\", attempt);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}