{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _get = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _inherits = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Polling = void 0;\n\nvar transport_1 = require(\"../transport\");\n\nvar zlib_1 = require(\"zlib\");\n\nvar accepts = require(\"accepts\");\n\nvar debug_1 = require(\"debug\");\n\nvar debug = (0, debug_1.default)(\"engine:polling\");\nvar compressionMethods = {\n  gzip: zlib_1.createGzip,\n  deflate: zlib_1.createDeflate\n};\n\nvar Polling = /*#__PURE__*/function (_transport_1$Transpor) {\n  _inherits(Polling, _transport_1$Transpor);\n\n  var _super = _createSuper(Polling);\n\n  /**\n   * HTTP polling constructor.\n   *\n   * @api public.\n   */\n  function Polling(req) {\n    var _this;\n\n    _classCallCheck(this, Polling);\n\n    _this = _super.call(this, req);\n    _this.closeTimeout = 30 * 1000;\n    return _this;\n  }\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n\n  _createClass(Polling, [{\n    key: \"name\",\n    get: function get() {\n      return \"polling\";\n    }\n  }, {\n    key: \"supportsFraming\",\n    get: function get() {\n      return false;\n    }\n    /**\n     * Overrides onRequest.\n     *\n     * @param {http.IncomingMessage}\n     * @api private\n     */\n\n  }, {\n    key: \"onRequest\",\n    value: function onRequest(req) {\n      var res = req.res;\n\n      if (\"GET\" === req.method) {\n        this.onPollRequest(req, res);\n      } else if (\"POST\" === req.method) {\n        this.onDataRequest(req, res);\n      } else {\n        res.writeHead(500);\n        res.end();\n      }\n    }\n    /**\n     * The client sends a request awaiting for us to send data.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onPollRequest\",\n    value: function onPollRequest(req, res) {\n      var _this2 = this;\n\n      if (this.req) {\n        debug(\"request overlap\"); // assert: this.res, '.req and .res should be (un)set together'\n\n        this.onError(\"overlap from client\");\n        res.writeHead(500);\n        res.end();\n        return;\n      }\n\n      debug(\"setting request\");\n      this.req = req;\n      this.res = res;\n\n      var onClose = function onClose() {\n        _this2.onError(\"poll connection closed prematurely\");\n      };\n\n      var cleanup = function cleanup() {\n        req.removeListener(\"close\", onClose);\n        _this2.req = _this2.res = null;\n      };\n\n      req.cleanup = cleanup;\n      req.on(\"close\", onClose);\n      this.writable = true;\n      this.emit(\"drain\"); // if we're still writable but had a pending close, trigger an empty send\n\n      if (this.writable && this.shouldClose) {\n        debug(\"triggering empty send to append close packet\");\n        this.send([{\n          type: \"noop\"\n        }]);\n      }\n    }\n    /**\n     * The client sends a request with data.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onDataRequest\",\n    value: function onDataRequest(req, res) {\n      var _this3 = this;\n\n      if (this.dataReq) {\n        // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'\n        this.onError(\"data request overlap from client\");\n        res.writeHead(500);\n        res.end();\n        return;\n      }\n\n      var isBinary = \"application/octet-stream\" === req.headers[\"content-type\"];\n\n      if (isBinary && this.protocol === 4) {\n        return this.onError(\"invalid content\");\n      }\n\n      this.dataReq = req;\n      this.dataRes = res;\n      var chunks = isBinary ? Buffer.concat([]) : \"\";\n\n      var cleanup = function cleanup() {\n        req.removeListener(\"data\", onData);\n        req.removeListener(\"end\", onEnd);\n        req.removeListener(\"close\", onClose);\n        _this3.dataReq = _this3.dataRes = chunks = null;\n      };\n\n      var onClose = function onClose() {\n        cleanup();\n\n        _this3.onError(\"data request connection closed prematurely\");\n      };\n\n      var onData = function onData(data) {\n        var contentLength;\n\n        if (isBinary) {\n          chunks = Buffer.concat([chunks, data]);\n          contentLength = chunks.length;\n        } else {\n          chunks += data;\n          contentLength = Buffer.byteLength(chunks);\n        }\n\n        if (contentLength > _this3.maxHttpBufferSize) {\n          res.writeHead(413).end();\n          cleanup();\n        }\n      };\n\n      var onEnd = function onEnd() {\n        _this3.onData(chunks);\n\n        var headers = {\n          // text/html is required instead of text/plain to avoid an\n          // unwanted download dialog on certain user-agents (GH-43)\n          \"Content-Type\": \"text/html\",\n          \"Content-Length\": 2\n        };\n        res.writeHead(200, _this3.headers(req, headers));\n        res.end(\"ok\");\n        cleanup();\n      };\n\n      req.on(\"close\", onClose);\n      if (!isBinary) req.setEncoding(\"utf8\");\n      req.on(\"data\", onData);\n      req.on(\"end\", onEnd);\n    }\n    /**\n     * Processes the incoming data payload.\n     *\n     * @param {String} encoded payload\n     * @api private\n     */\n\n  }, {\n    key: \"onData\",\n    value: function onData(data) {\n      var _this4 = this;\n\n      debug('received \"%s\"', data);\n\n      var callback = function callback(packet) {\n        if (\"close\" === packet.type) {\n          debug(\"got xhr close packet\");\n\n          _this4.onClose();\n\n          return false;\n        }\n\n        _this4.onPacket(packet);\n      };\n\n      if (this.protocol === 3) {\n        this.parser.decodePayload(data, callback);\n      } else {\n        this.parser.decodePayload(data).forEach(callback);\n      }\n    }\n    /**\n     * Overrides onClose.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      if (this.writable) {\n        // close pending poll request\n        this.send([{\n          type: \"noop\"\n        }]);\n      }\n\n      _get(_getPrototypeOf(Polling.prototype), \"onClose\", this).call(this);\n    }\n    /**\n     * Writes a packet payload.\n     *\n     * @param {Object} packet\n     * @api private\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(packets) {\n      var _this5 = this;\n\n      this.writable = false;\n\n      if (this.shouldClose) {\n        debug(\"appending close packet to payload\");\n        packets.push({\n          type: \"close\"\n        });\n        this.shouldClose();\n        this.shouldClose = null;\n      }\n\n      var doWrite = function doWrite(data) {\n        var compress = packets.some(function (packet) {\n          return packet.options && packet.options.compress;\n        });\n\n        _this5.write(data, {\n          compress: compress\n        });\n      };\n\n      if (this.protocol === 3) {\n        this.parser.encodePayload(packets, this.supportsBinary, doWrite);\n      } else {\n        this.parser.encodePayload(packets, doWrite);\n      }\n    }\n    /**\n     * Writes data as response to poll request.\n     *\n     * @param {String} data\n     * @param {Object} options\n     * @api private\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(data, options) {\n      var _this6 = this;\n\n      debug('writing \"%s\"', data);\n      this.doWrite(data, options, function () {\n        _this6.req.cleanup();\n      });\n    }\n    /**\n     * Performs the write.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"doWrite\",\n    value: function doWrite(data, options, callback) {\n      var _this7 = this;\n\n      // explicit UTF-8 is required for pages not served under utf\n      var isString = typeof data === \"string\";\n      var contentType = isString ? \"text/plain; charset=UTF-8\" : \"application/octet-stream\";\n      var headers = {\n        \"Content-Type\": contentType\n      };\n\n      var respond = function respond(data) {\n        headers[\"Content-Length\"] = \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n\n        _this7.res.writeHead(200, _this7.headers(_this7.req, headers));\n\n        _this7.res.end(data);\n\n        callback();\n      };\n\n      if (!this.httpCompression || !options.compress) {\n        respond(data);\n        return;\n      }\n\n      var len = isString ? Buffer.byteLength(data) : data.length;\n\n      if (len < this.httpCompression.threshold) {\n        respond(data);\n        return;\n      }\n\n      var encoding = accepts(this.req).encodings([\"gzip\", \"deflate\"]);\n\n      if (!encoding) {\n        respond(data);\n        return;\n      }\n\n      this.compress(data, encoding, function (err, data) {\n        if (err) {\n          _this7.res.writeHead(500);\n\n          _this7.res.end();\n\n          callback(err);\n          return;\n        }\n\n        headers[\"Content-Encoding\"] = encoding;\n        respond(data);\n      });\n    }\n    /**\n     * Compresses data.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(data, encoding, callback) {\n      debug(\"compressing\");\n      var buffers = [];\n      var nread = 0;\n      compressionMethods[encoding](this.httpCompression).on(\"error\", callback).on(\"data\", function (chunk) {\n        buffers.push(chunk);\n        nread += chunk.length;\n      }).on(\"end\", function () {\n        callback(null, Buffer.concat(buffers, nread));\n      }).end(data);\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"doClose\",\n    value: function doClose(fn) {\n      var _this8 = this;\n\n      debug(\"closing\");\n      var closeTimeoutTimer;\n\n      if (this.dataReq) {\n        debug(\"aborting ongoing data request\");\n        this.dataReq.destroy();\n      }\n\n      var onClose = function onClose() {\n        clearTimeout(closeTimeoutTimer);\n        fn();\n\n        _this8.onClose();\n      };\n\n      if (this.writable) {\n        debug(\"transport writable - closing right away\");\n        this.send([{\n          type: \"close\"\n        }]);\n        onClose();\n      } else if (this.discarded) {\n        debug(\"transport discarded - closing right away\");\n        onClose();\n      } else {\n        debug(\"transport not writable - buffering orderly close\");\n        this.shouldClose = onClose;\n        closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);\n      }\n    }\n    /**\n     * Returns headers for a response.\n     *\n     * @param {http.IncomingMessage} request\n     * @param {Object} extra headers\n     * @api private\n     */\n\n  }, {\n    key: \"headers\",\n    value: function headers(req, _headers) {\n      _headers = _headers || {}; // prevent XSS warnings on IE\n      // https://github.com/LearnBoost/socket.io/pull/1333\n\n      var ua = req.headers[\"user-agent\"];\n\n      if (ua && (~ua.indexOf(\";MSIE\") || ~ua.indexOf(\"Trident/\"))) {\n        _headers[\"X-XSS-Protection\"] = \"0\";\n      }\n\n      this.emit(\"headers\", _headers, req);\n      return _headers;\n    }\n  }]);\n\n  return Polling;\n}(transport_1.Transport);\n\nexports.Polling = Polling;","map":{"version":3,"sources":["/home/tj/fl-carla/node_modules/engine.io/build/transports/polling.js"],"names":["Object","defineProperty","exports","value","Polling","transport_1","require","zlib_1","accepts","debug_1","debug","default","compressionMethods","gzip","createGzip","deflate","createDeflate","req","closeTimeout","res","method","onPollRequest","onDataRequest","writeHead","end","onError","onClose","cleanup","removeListener","on","writable","emit","shouldClose","send","type","dataReq","isBinary","headers","protocol","dataRes","chunks","Buffer","concat","onData","onEnd","data","contentLength","length","byteLength","maxHttpBufferSize","setEncoding","callback","packet","onPacket","parser","decodePayload","forEach","packets","push","doWrite","compress","some","options","write","encodePayload","supportsBinary","isString","contentType","respond","httpCompression","len","threshold","encoding","encodings","err","buffers","nread","chunk","fn","closeTimeoutTimer","destroy","clearTimeout","discarded","setTimeout","ua","indexOf","Transport"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Polling = void 0;\nconst transport_1 = require(\"../transport\");\nconst zlib_1 = require(\"zlib\");\nconst accepts = require(\"accepts\");\nconst debug_1 = require(\"debug\");\nconst debug = (0, debug_1.default)(\"engine:polling\");\nconst compressionMethods = {\n    gzip: zlib_1.createGzip,\n    deflate: zlib_1.createDeflate\n};\nclass Polling extends transport_1.Transport {\n    /**\n     * HTTP polling constructor.\n     *\n     * @api public.\n     */\n    constructor(req) {\n        super(req);\n        this.closeTimeout = 30 * 1000;\n    }\n    /**\n     * Transport name\n     *\n     * @api public\n     */\n    get name() {\n        return \"polling\";\n    }\n    get supportsFraming() {\n        return false;\n    }\n    /**\n     * Overrides onRequest.\n     *\n     * @param {http.IncomingMessage}\n     * @api private\n     */\n    onRequest(req) {\n        const res = req.res;\n        if (\"GET\" === req.method) {\n            this.onPollRequest(req, res);\n        }\n        else if (\"POST\" === req.method) {\n            this.onDataRequest(req, res);\n        }\n        else {\n            res.writeHead(500);\n            res.end();\n        }\n    }\n    /**\n     * The client sends a request awaiting for us to send data.\n     *\n     * @api private\n     */\n    onPollRequest(req, res) {\n        if (this.req) {\n            debug(\"request overlap\");\n            // assert: this.res, '.req and .res should be (un)set together'\n            this.onError(\"overlap from client\");\n            res.writeHead(500);\n            res.end();\n            return;\n        }\n        debug(\"setting request\");\n        this.req = req;\n        this.res = res;\n        const onClose = () => {\n            this.onError(\"poll connection closed prematurely\");\n        };\n        const cleanup = () => {\n            req.removeListener(\"close\", onClose);\n            this.req = this.res = null;\n        };\n        req.cleanup = cleanup;\n        req.on(\"close\", onClose);\n        this.writable = true;\n        this.emit(\"drain\");\n        // if we're still writable but had a pending close, trigger an empty send\n        if (this.writable && this.shouldClose) {\n            debug(\"triggering empty send to append close packet\");\n            this.send([{ type: \"noop\" }]);\n        }\n    }\n    /**\n     * The client sends a request with data.\n     *\n     * @api private\n     */\n    onDataRequest(req, res) {\n        if (this.dataReq) {\n            // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'\n            this.onError(\"data request overlap from client\");\n            res.writeHead(500);\n            res.end();\n            return;\n        }\n        const isBinary = \"application/octet-stream\" === req.headers[\"content-type\"];\n        if (isBinary && this.protocol === 4) {\n            return this.onError(\"invalid content\");\n        }\n        this.dataReq = req;\n        this.dataRes = res;\n        let chunks = isBinary ? Buffer.concat([]) : \"\";\n        const cleanup = () => {\n            req.removeListener(\"data\", onData);\n            req.removeListener(\"end\", onEnd);\n            req.removeListener(\"close\", onClose);\n            this.dataReq = this.dataRes = chunks = null;\n        };\n        const onClose = () => {\n            cleanup();\n            this.onError(\"data request connection closed prematurely\");\n        };\n        const onData = data => {\n            let contentLength;\n            if (isBinary) {\n                chunks = Buffer.concat([chunks, data]);\n                contentLength = chunks.length;\n            }\n            else {\n                chunks += data;\n                contentLength = Buffer.byteLength(chunks);\n            }\n            if (contentLength > this.maxHttpBufferSize) {\n                res.writeHead(413).end();\n                cleanup();\n            }\n        };\n        const onEnd = () => {\n            this.onData(chunks);\n            const headers = {\n                // text/html is required instead of text/plain to avoid an\n                // unwanted download dialog on certain user-agents (GH-43)\n                \"Content-Type\": \"text/html\",\n                \"Content-Length\": 2\n            };\n            res.writeHead(200, this.headers(req, headers));\n            res.end(\"ok\");\n            cleanup();\n        };\n        req.on(\"close\", onClose);\n        if (!isBinary)\n            req.setEncoding(\"utf8\");\n        req.on(\"data\", onData);\n        req.on(\"end\", onEnd);\n    }\n    /**\n     * Processes the incoming data payload.\n     *\n     * @param {String} encoded payload\n     * @api private\n     */\n    onData(data) {\n        debug('received \"%s\"', data);\n        const callback = packet => {\n            if (\"close\" === packet.type) {\n                debug(\"got xhr close packet\");\n                this.onClose();\n                return false;\n            }\n            this.onPacket(packet);\n        };\n        if (this.protocol === 3) {\n            this.parser.decodePayload(data, callback);\n        }\n        else {\n            this.parser.decodePayload(data).forEach(callback);\n        }\n    }\n    /**\n     * Overrides onClose.\n     *\n     * @api private\n     */\n    onClose() {\n        if (this.writable) {\n            // close pending poll request\n            this.send([{ type: \"noop\" }]);\n        }\n        super.onClose();\n    }\n    /**\n     * Writes a packet payload.\n     *\n     * @param {Object} packet\n     * @api private\n     */\n    send(packets) {\n        this.writable = false;\n        if (this.shouldClose) {\n            debug(\"appending close packet to payload\");\n            packets.push({ type: \"close\" });\n            this.shouldClose();\n            this.shouldClose = null;\n        }\n        const doWrite = data => {\n            const compress = packets.some(packet => {\n                return packet.options && packet.options.compress;\n            });\n            this.write(data, { compress });\n        };\n        if (this.protocol === 3) {\n            this.parser.encodePayload(packets, this.supportsBinary, doWrite);\n        }\n        else {\n            this.parser.encodePayload(packets, doWrite);\n        }\n    }\n    /**\n     * Writes data as response to poll request.\n     *\n     * @param {String} data\n     * @param {Object} options\n     * @api private\n     */\n    write(data, options) {\n        debug('writing \"%s\"', data);\n        this.doWrite(data, options, () => {\n            this.req.cleanup();\n        });\n    }\n    /**\n     * Performs the write.\n     *\n     * @api private\n     */\n    doWrite(data, options, callback) {\n        // explicit UTF-8 is required for pages not served under utf\n        const isString = typeof data === \"string\";\n        const contentType = isString\n            ? \"text/plain; charset=UTF-8\"\n            : \"application/octet-stream\";\n        const headers = {\n            \"Content-Type\": contentType\n        };\n        const respond = data => {\n            headers[\"Content-Length\"] =\n                \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n            this.res.writeHead(200, this.headers(this.req, headers));\n            this.res.end(data);\n            callback();\n        };\n        if (!this.httpCompression || !options.compress) {\n            respond(data);\n            return;\n        }\n        const len = isString ? Buffer.byteLength(data) : data.length;\n        if (len < this.httpCompression.threshold) {\n            respond(data);\n            return;\n        }\n        const encoding = accepts(this.req).encodings([\"gzip\", \"deflate\"]);\n        if (!encoding) {\n            respond(data);\n            return;\n        }\n        this.compress(data, encoding, (err, data) => {\n            if (err) {\n                this.res.writeHead(500);\n                this.res.end();\n                callback(err);\n                return;\n            }\n            headers[\"Content-Encoding\"] = encoding;\n            respond(data);\n        });\n    }\n    /**\n     * Compresses data.\n     *\n     * @api private\n     */\n    compress(data, encoding, callback) {\n        debug(\"compressing\");\n        const buffers = [];\n        let nread = 0;\n        compressionMethods[encoding](this.httpCompression)\n            .on(\"error\", callback)\n            .on(\"data\", function (chunk) {\n            buffers.push(chunk);\n            nread += chunk.length;\n        })\n            .on(\"end\", function () {\n            callback(null, Buffer.concat(buffers, nread));\n        })\n            .end(data);\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api private\n     */\n    doClose(fn) {\n        debug(\"closing\");\n        let closeTimeoutTimer;\n        if (this.dataReq) {\n            debug(\"aborting ongoing data request\");\n            this.dataReq.destroy();\n        }\n        const onClose = () => {\n            clearTimeout(closeTimeoutTimer);\n            fn();\n            this.onClose();\n        };\n        if (this.writable) {\n            debug(\"transport writable - closing right away\");\n            this.send([{ type: \"close\" }]);\n            onClose();\n        }\n        else if (this.discarded) {\n            debug(\"transport discarded - closing right away\");\n            onClose();\n        }\n        else {\n            debug(\"transport not writable - buffering orderly close\");\n            this.shouldClose = onClose;\n            closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);\n        }\n    }\n    /**\n     * Returns headers for a response.\n     *\n     * @param {http.IncomingMessage} request\n     * @param {Object} extra headers\n     * @api private\n     */\n    headers(req, headers) {\n        headers = headers || {};\n        // prevent XSS warnings on IE\n        // https://github.com/LearnBoost/socket.io/pull/1333\n        const ua = req.headers[\"user-agent\"];\n        if (ua && (~ua.indexOf(\";MSIE\") || ~ua.indexOf(\"Trident/\"))) {\n            headers[\"X-XSS-Protection\"] = \"0\";\n        }\n        this.emit(\"headers\", headers, req);\n        return headers;\n    }\n}\nexports.Polling = Polling;\n"]},"metadata":{},"sourceType":"script"}