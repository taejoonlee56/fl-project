{"ast":null,"code":"import _slicedToArray from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\n\nvar _jsxFileName = \"D:\\\\fl-carla\\\\src\\\\components\\\\auth\\\\NewPasswordForm\\\\NewPasswordForm.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { BaseForm } from '@app/components/common/forms/BaseForm/BaseForm';\nimport { notificationController } from '@app/controllers/notificationController';\nimport { useAppDispatch } from '@app/hooks/reduxHooks';\nimport { doSetNewPassword } from '@app/store/slices/authSlice';\nimport * as S from './NewPasswordForm.styles';\nimport * as Auth from '@app/components/layouts/AuthLayout/AuthLayout.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar initStates = {\n  password: 'new-password',\n  confirmPassword: 'new-password'\n};\nexport var NewPasswordForm = function NewPasswordForm() {\n  _s();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var navigate = useNavigate();\n  var dispatch = useAppDispatch();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var handleSubmit = function handleSubmit(values) {\n    setLoading(true);\n    dispatch(doSetNewPassword({\n      newPassword: values.password\n    })).unwrap().then(function () {\n      navigate('/auth/login');\n      notificationController.success({\n        message: t('newPassword.successMessage'),\n        description: t('newPassword.successDescription')\n      });\n    }).catch(function (err) {\n      notificationController.error({\n        message: err.message\n      });\n      setLoading(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Auth.FormWrapper, {\n    children: /*#__PURE__*/_jsxDEV(BaseForm, {\n      layout: \"vertical\",\n      onFinish: handleSubmit,\n      requiredMark: \"optional\",\n      initialValues: initStates,\n      children: [/*#__PURE__*/_jsxDEV(Auth.BackWrapper, {\n        onClick: function onClick() {\n          return navigate(-1);\n        },\n        children: [/*#__PURE__*/_jsxDEV(Auth.BackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, _this), t('common.back')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Auth.FormTitle, {\n        children: t('newPassword.title')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(S.Description, {\n        children: t('newPassword.description')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Auth.FormItem, {\n        name: \"password\",\n        label: t('common.password'),\n        rules: [{\n          required: true,\n          message: t('common.requiredField')\n        }],\n        children: /*#__PURE__*/_jsxDEV(Auth.FormInputPassword, {\n          placeholder: t('common.password')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Auth.FormItem, {\n        name: \"confirmPassword\",\n        label: t('common.confirmPassword'),\n        dependencies: ['password'],\n        rules: [{\n          required: true,\n          message: t('common.requiredField')\n        }, function (_ref) {\n          var getFieldValue = _ref.getFieldValue;\n          return {\n            validator: function validator(_, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n\n              return Promise.reject(new Error(t('common.confirmPasswordError')));\n            }\n          };\n        }],\n        hasFeedback: true,\n        children: /*#__PURE__*/_jsxDEV(Auth.FormInputPassword, {\n          placeholder: t('common.confirmPassword')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(BaseForm.Item, {\n        noStyle: true,\n        children: /*#__PURE__*/_jsxDEV(S.SubmitButton, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          loading: isLoading,\n          children: t('common.resetPassword')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(NewPasswordForm, \"azDs0u2xwfLQHfNwyECB+6lAD3U=\", false, function () {\n  return [useTranslation, useNavigate, useAppDispatch];\n});\n\n_c = NewPasswordForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPasswordForm\");","map":{"version":3,"sources":["D:/fl-carla/src/components/auth/NewPasswordForm/NewPasswordForm.tsx"],"names":["React","useState","useNavigate","useTranslation","BaseForm","notificationController","useAppDispatch","doSetNewPassword","S","Auth","initStates","password","confirmPassword","NewPasswordForm","t","navigate","dispatch","isLoading","setLoading","handleSubmit","values","newPassword","unwrap","then","success","message","description","catch","err","error","required","getFieldValue","validator","_","value","Promise","resolve","reject","Error"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { BaseForm } from '@app/components/common/forms/BaseForm/BaseForm';\r\nimport { notificationController } from '@app/controllers/notificationController';\r\nimport { useAppDispatch } from '@app/hooks/reduxHooks';\r\nimport { doSetNewPassword } from '@app/store/slices/authSlice';\r\nimport * as S from './NewPasswordForm.styles';\r\nimport * as Auth from '@app/components/layouts/AuthLayout/AuthLayout.styles';\r\n\r\ninterface NewPasswordFormData {\r\n  password: string;\r\n  confirmPassword: string;\r\n}\r\n\r\nconst initStates = {\r\n  password: 'new-password',\r\n  confirmPassword: 'new-password',\r\n};\r\n\r\nexport const NewPasswordForm: React.FC = () => {\r\n  const { t } = useTranslation();\r\n  const navigate = useNavigate();\r\n  const dispatch = useAppDispatch();\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  const handleSubmit = (values: NewPasswordFormData) => {\r\n    setLoading(true);\r\n    dispatch(doSetNewPassword({ newPassword: values.password }))\r\n      .unwrap()\r\n      .then(() => {\r\n        navigate('/auth/login');\r\n        notificationController.success({\r\n          message: t('newPassword.successMessage'),\r\n          description: t('newPassword.successDescription'),\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        notificationController.error({ message: err.message });\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Auth.FormWrapper>\r\n      <BaseForm layout=\"vertical\" onFinish={handleSubmit} requiredMark=\"optional\" initialValues={initStates}>\r\n        <Auth.BackWrapper onClick={() => navigate(-1)}>\r\n          <Auth.BackIcon />\r\n          {t('common.back')}\r\n        </Auth.BackWrapper>\r\n        <Auth.FormTitle>{t('newPassword.title')}</Auth.FormTitle>\r\n        <S.Description>{t('newPassword.description')}</S.Description>\r\n        <Auth.FormItem\r\n          name=\"password\"\r\n          label={t('common.password')}\r\n          rules={[{ required: true, message: t('common.requiredField') }]}\r\n        >\r\n          <Auth.FormInputPassword placeholder={t('common.password')} />\r\n        </Auth.FormItem>\r\n        <Auth.FormItem\r\n          name=\"confirmPassword\"\r\n          label={t('common.confirmPassword')}\r\n          dependencies={['password']}\r\n          rules={[\r\n            { required: true, message: t('common.requiredField') },\r\n            ({ getFieldValue }) => ({\r\n              validator(_, value) {\r\n                if (!value || getFieldValue('password') === value) {\r\n                  return Promise.resolve();\r\n                }\r\n                return Promise.reject(new Error(t('common.confirmPasswordError')));\r\n              },\r\n            }),\r\n          ]}\r\n          hasFeedback\r\n        >\r\n          <Auth.FormInputPassword placeholder={t('common.confirmPassword')} />\r\n        </Auth.FormItem>\r\n        <BaseForm.Item noStyle>\r\n          <S.SubmitButton type=\"primary\" htmlType=\"submit\" loading={isLoading}>\r\n            {t('common.resetPassword')}\r\n          </S.SubmitButton>\r\n        </BaseForm.Item>\r\n      </BaseForm>\r\n    </Auth.FormWrapper>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}