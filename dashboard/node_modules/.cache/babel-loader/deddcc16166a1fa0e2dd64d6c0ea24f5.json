{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _get = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _inherits = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Polling = void 0;\n\nvar transport_1 = require(\"../transport\");\n\nvar zlib_1 = require(\"zlib\");\n\nvar accepts = require(\"accepts\");\n\nvar debug_1 = require(\"debug\");\n\nvar debug = (0, debug_1.default)(\"engine:polling\");\nvar compressionMethods = {\n  gzip: zlib_1.createGzip,\n  deflate: zlib_1.createDeflate\n};\n\nvar Polling = /*#__PURE__*/function (_transport_1$Transpor) {\n  _inherits(Polling, _transport_1$Transpor);\n\n  var _super = _createSuper(Polling);\n\n  /**\n   * HTTP polling constructor.\n   *\n   * @api public.\n   */\n  function Polling(req) {\n    var _this;\n\n    _classCallCheck(this, Polling);\n\n    _this = _super.call(this, req);\n    _this.closeTimeout = 30 * 1000;\n    return _this;\n  }\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n\n  _createClass(Polling, [{\n    key: \"name\",\n    get: function get() {\n      return \"polling\";\n    }\n  }, {\n    key: \"supportsFraming\",\n    get: function get() {\n      return false;\n    }\n    /**\n     * Overrides onRequest.\n     *\n     * @param req\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onRequest\",\n    value: function onRequest(req) {\n      var res = req.res;\n\n      if (req.getMethod() === \"get\") {\n        this.onPollRequest(req, res);\n      } else if (req.getMethod() === \"post\") {\n        this.onDataRequest(req, res);\n      } else {\n        res.writeStatus(\"500 Internal Server Error\");\n        res.end();\n      }\n    }\n    /**\n     * The client sends a request awaiting for us to send data.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onPollRequest\",\n    value: function onPollRequest(req, res) {\n      var _this2 = this;\n\n      if (this.req) {\n        debug(\"request overlap\"); // assert: this.res, '.req and .res should be (un)set together'\n\n        this.onError(\"overlap from client\");\n        res.writeStatus(\"500 Internal Server Error\");\n        res.end();\n        return;\n      }\n\n      debug(\"setting request\");\n      this.req = req;\n      this.res = res;\n\n      var onClose = function onClose() {\n        _this2.writable = false;\n\n        _this2.onError(\"poll connection closed prematurely\");\n      };\n\n      var cleanup = function cleanup() {\n        _this2.req = _this2.res = null;\n      };\n\n      req.cleanup = cleanup;\n      res.onAborted(onClose);\n      this.writable = true;\n      this.emit(\"drain\"); // if we're still writable but had a pending close, trigger an empty send\n\n      if (this.writable && this.shouldClose) {\n        debug(\"triggering empty send to append close packet\");\n        this.send([{\n          type: \"noop\"\n        }]);\n      }\n    }\n    /**\n     * The client sends a request with data.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onDataRequest\",\n    value: function onDataRequest(req, res) {\n      var _this3 = this;\n\n      if (this.dataReq) {\n        // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'\n        this.onError(\"data request overlap from client\");\n        res.writeStatus(\"500 Internal Server Error\");\n        res.end();\n        return;\n      }\n\n      var expectedContentLength = Number(req.headers[\"content-length\"]);\n\n      if (!expectedContentLength) {\n        this.onError(\"content-length header required\");\n        res.writeStatus(\"411 Length Required\").end();\n        return;\n      }\n\n      if (expectedContentLength > this.maxHttpBufferSize) {\n        this.onError(\"payload too large\");\n        res.writeStatus(\"413 Payload Too Large\").end();\n        return;\n      }\n\n      var isBinary = \"application/octet-stream\" === req.headers[\"content-type\"];\n\n      if (isBinary && this.protocol === 4) {\n        return this.onError(\"invalid content\");\n      }\n\n      this.dataReq = req;\n      this.dataRes = res;\n      var buffer;\n      var offset = 0;\n      var headers = {\n        // text/html is required instead of text/plain to avoid an\n        // unwanted download dialog on certain user-agents (GH-43)\n        \"Content-Type\": \"text/html\"\n      };\n      this.headers(req, headers);\n\n      for (var key in headers) {\n        res.writeHeader(key, String(headers[key]));\n      }\n\n      var onEnd = function onEnd(buffer) {\n        _this3.onData(buffer.toString());\n\n        _this3.onDataRequestCleanup();\n\n        res.end(\"ok\");\n      };\n\n      res.onAborted(function () {\n        _this3.onDataRequestCleanup();\n\n        _this3.onError(\"data request connection closed prematurely\");\n      });\n      res.onData(function (arrayBuffer, isLast) {\n        var totalLength = offset + arrayBuffer.byteLength;\n\n        if (totalLength > expectedContentLength) {\n          _this3.onError(\"content-length mismatch\");\n\n          res.close(); // calls onAborted\n\n          return;\n        }\n\n        if (!buffer) {\n          if (isLast) {\n            onEnd(Buffer.from(arrayBuffer));\n            return;\n          }\n\n          buffer = Buffer.allocUnsafe(expectedContentLength);\n        }\n\n        Buffer.from(arrayBuffer).copy(buffer, offset);\n\n        if (isLast) {\n          if (totalLength != expectedContentLength) {\n            _this3.onError(\"content-length mismatch\");\n\n            res.writeStatus(\"400 Content-Length Mismatch\").end();\n\n            _this3.onDataRequestCleanup();\n\n            return;\n          }\n\n          onEnd(buffer);\n          return;\n        }\n\n        offset = totalLength;\n      });\n    }\n    /**\n     * Cleanup request.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onDataRequestCleanup\",\n    value: function onDataRequestCleanup() {\n      this.dataReq = this.dataRes = null;\n    }\n    /**\n     * Processes the incoming data payload.\n     *\n     * @param {String} encoded payload\n     * @api private\n     */\n\n  }, {\n    key: \"onData\",\n    value: function onData(data) {\n      var _this4 = this;\n\n      debug('received \"%s\"', data);\n\n      var callback = function callback(packet) {\n        if (\"close\" === packet.type) {\n          debug(\"got xhr close packet\");\n\n          _this4.onClose();\n\n          return false;\n        }\n\n        _this4.onPacket(packet);\n      };\n\n      if (this.protocol === 3) {\n        this.parser.decodePayload(data, callback);\n      } else {\n        this.parser.decodePayload(data).forEach(callback);\n      }\n    }\n    /**\n     * Overrides onClose.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      if (this.writable) {\n        // close pending poll request\n        this.send([{\n          type: \"noop\"\n        }]);\n      }\n\n      _get(_getPrototypeOf(Polling.prototype), \"onClose\", this).call(this);\n    }\n    /**\n     * Writes a packet payload.\n     *\n     * @param {Object} packet\n     * @api private\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(packets) {\n      var _this5 = this;\n\n      this.writable = false;\n\n      if (this.shouldClose) {\n        debug(\"appending close packet to payload\");\n        packets.push({\n          type: \"close\"\n        });\n        this.shouldClose();\n        this.shouldClose = null;\n      }\n\n      var doWrite = function doWrite(data) {\n        var compress = packets.some(function (packet) {\n          return packet.options && packet.options.compress;\n        });\n\n        _this5.write(data, {\n          compress: compress\n        });\n      };\n\n      if (this.protocol === 3) {\n        this.parser.encodePayload(packets, this.supportsBinary, doWrite);\n      } else {\n        this.parser.encodePayload(packets, doWrite);\n      }\n    }\n    /**\n     * Writes data as response to poll request.\n     *\n     * @param {String} data\n     * @param {Object} options\n     * @api private\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(data, options) {\n      var _this6 = this;\n\n      debug('writing \"%s\"', data);\n      this.doWrite(data, options, function () {\n        _this6.req.cleanup();\n      });\n    }\n    /**\n     * Performs the write.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"doWrite\",\n    value: function doWrite(data, options, callback) {\n      var _this7 = this;\n\n      // explicit UTF-8 is required for pages not served under utf\n      var isString = typeof data === \"string\";\n      var contentType = isString ? \"text/plain; charset=UTF-8\" : \"application/octet-stream\";\n      var headers = {\n        \"Content-Type\": contentType\n      };\n\n      var respond = function respond(data) {\n        _this7.headers(_this7.req, headers);\n\n        Object.keys(headers).forEach(function (key) {\n          _this7.res.writeHeader(key, String(headers[key]));\n        });\n\n        _this7.res.end(data);\n\n        callback();\n      };\n\n      if (!this.httpCompression || !options.compress) {\n        respond(data);\n        return;\n      }\n\n      var len = isString ? Buffer.byteLength(data) : data.length;\n\n      if (len < this.httpCompression.threshold) {\n        respond(data);\n        return;\n      }\n\n      var encoding = accepts(this.req).encodings([\"gzip\", \"deflate\"]);\n\n      if (!encoding) {\n        respond(data);\n        return;\n      }\n\n      this.compress(data, encoding, function (err, data) {\n        if (err) {\n          _this7.res.writeStatus(\"500 Internal Server Error\");\n\n          _this7.res.end();\n\n          callback(err);\n          return;\n        }\n\n        headers[\"Content-Encoding\"] = encoding;\n        respond(data);\n      });\n    }\n    /**\n     * Compresses data.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(data, encoding, callback) {\n      debug(\"compressing\");\n      var buffers = [];\n      var nread = 0;\n      compressionMethods[encoding](this.httpCompression).on(\"error\", callback).on(\"data\", function (chunk) {\n        buffers.push(chunk);\n        nread += chunk.length;\n      }).on(\"end\", function () {\n        callback(null, Buffer.concat(buffers, nread));\n      }).end(data);\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"doClose\",\n    value: function doClose(fn) {\n      var _this8 = this;\n\n      debug(\"closing\");\n      var closeTimeoutTimer;\n\n      var onClose = function onClose() {\n        clearTimeout(closeTimeoutTimer);\n        fn();\n\n        _this8.onClose();\n      };\n\n      if (this.writable) {\n        debug(\"transport writable - closing right away\");\n        this.send([{\n          type: \"close\"\n        }]);\n        onClose();\n      } else if (this.discarded) {\n        debug(\"transport discarded - closing right away\");\n        onClose();\n      } else {\n        debug(\"transport not writable - buffering orderly close\");\n        this.shouldClose = onClose;\n        closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);\n      }\n    }\n    /**\n     * Returns headers for a response.\n     *\n     * @param req - request\n     * @param {Object} extra headers\n     * @api private\n     */\n\n  }, {\n    key: \"headers\",\n    value: function headers(req, _headers) {\n      _headers = _headers || {}; // prevent XSS warnings on IE\n      // https://github.com/LearnBoost/socket.io/pull/1333\n\n      var ua = req.headers[\"user-agent\"];\n\n      if (ua && (~ua.indexOf(\";MSIE\") || ~ua.indexOf(\"Trident/\"))) {\n        _headers[\"X-XSS-Protection\"] = \"0\";\n      }\n\n      this.emit(\"headers\", _headers, req);\n      return _headers;\n    }\n  }]);\n\n  return Polling;\n}(transport_1.Transport);\n\nexports.Polling = Polling;","map":{"version":3,"sources":["/home/tj/fl-carla/node_modules/engine.io/build/transports-uws/polling.js"],"names":["Object","defineProperty","exports","value","Polling","transport_1","require","zlib_1","accepts","debug_1","debug","default","compressionMethods","gzip","createGzip","deflate","createDeflate","req","closeTimeout","res","getMethod","onPollRequest","onDataRequest","writeStatus","end","onError","onClose","writable","cleanup","onAborted","emit","shouldClose","send","type","dataReq","expectedContentLength","Number","headers","maxHttpBufferSize","isBinary","protocol","dataRes","buffer","offset","key","writeHeader","String","onEnd","onData","toString","onDataRequestCleanup","arrayBuffer","isLast","totalLength","byteLength","close","Buffer","from","allocUnsafe","copy","data","callback","packet","onPacket","parser","decodePayload","forEach","packets","push","doWrite","compress","some","options","write","encodePayload","supportsBinary","isString","contentType","respond","keys","httpCompression","len","length","threshold","encoding","encodings","err","buffers","nread","on","chunk","concat","fn","closeTimeoutTimer","clearTimeout","discarded","setTimeout","ua","indexOf","Transport"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Polling = void 0;\nconst transport_1 = require(\"../transport\");\nconst zlib_1 = require(\"zlib\");\nconst accepts = require(\"accepts\");\nconst debug_1 = require(\"debug\");\nconst debug = (0, debug_1.default)(\"engine:polling\");\nconst compressionMethods = {\n    gzip: zlib_1.createGzip,\n    deflate: zlib_1.createDeflate\n};\nclass Polling extends transport_1.Transport {\n    /**\n     * HTTP polling constructor.\n     *\n     * @api public.\n     */\n    constructor(req) {\n        super(req);\n        this.closeTimeout = 30 * 1000;\n    }\n    /**\n     * Transport name\n     *\n     * @api public\n     */\n    get name() {\n        return \"polling\";\n    }\n    get supportsFraming() {\n        return false;\n    }\n    /**\n     * Overrides onRequest.\n     *\n     * @param req\n     *\n     * @api private\n     */\n    onRequest(req) {\n        const res = req.res;\n        if (req.getMethod() === \"get\") {\n            this.onPollRequest(req, res);\n        }\n        else if (req.getMethod() === \"post\") {\n            this.onDataRequest(req, res);\n        }\n        else {\n            res.writeStatus(\"500 Internal Server Error\");\n            res.end();\n        }\n    }\n    /**\n     * The client sends a request awaiting for us to send data.\n     *\n     * @api private\n     */\n    onPollRequest(req, res) {\n        if (this.req) {\n            debug(\"request overlap\");\n            // assert: this.res, '.req and .res should be (un)set together'\n            this.onError(\"overlap from client\");\n            res.writeStatus(\"500 Internal Server Error\");\n            res.end();\n            return;\n        }\n        debug(\"setting request\");\n        this.req = req;\n        this.res = res;\n        const onClose = () => {\n            this.writable = false;\n            this.onError(\"poll connection closed prematurely\");\n        };\n        const cleanup = () => {\n            this.req = this.res = null;\n        };\n        req.cleanup = cleanup;\n        res.onAborted(onClose);\n        this.writable = true;\n        this.emit(\"drain\");\n        // if we're still writable but had a pending close, trigger an empty send\n        if (this.writable && this.shouldClose) {\n            debug(\"triggering empty send to append close packet\");\n            this.send([{ type: \"noop\" }]);\n        }\n    }\n    /**\n     * The client sends a request with data.\n     *\n     * @api private\n     */\n    onDataRequest(req, res) {\n        if (this.dataReq) {\n            // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'\n            this.onError(\"data request overlap from client\");\n            res.writeStatus(\"500 Internal Server Error\");\n            res.end();\n            return;\n        }\n        const expectedContentLength = Number(req.headers[\"content-length\"]);\n        if (!expectedContentLength) {\n            this.onError(\"content-length header required\");\n            res.writeStatus(\"411 Length Required\").end();\n            return;\n        }\n        if (expectedContentLength > this.maxHttpBufferSize) {\n            this.onError(\"payload too large\");\n            res.writeStatus(\"413 Payload Too Large\").end();\n            return;\n        }\n        const isBinary = \"application/octet-stream\" === req.headers[\"content-type\"];\n        if (isBinary && this.protocol === 4) {\n            return this.onError(\"invalid content\");\n        }\n        this.dataReq = req;\n        this.dataRes = res;\n        let buffer;\n        let offset = 0;\n        const headers = {\n            // text/html is required instead of text/plain to avoid an\n            // unwanted download dialog on certain user-agents (GH-43)\n            \"Content-Type\": \"text/html\"\n        };\n        this.headers(req, headers);\n        for (let key in headers) {\n            res.writeHeader(key, String(headers[key]));\n        }\n        const onEnd = buffer => {\n            this.onData(buffer.toString());\n            this.onDataRequestCleanup();\n            res.end(\"ok\");\n        };\n        res.onAborted(() => {\n            this.onDataRequestCleanup();\n            this.onError(\"data request connection closed prematurely\");\n        });\n        res.onData((arrayBuffer, isLast) => {\n            const totalLength = offset + arrayBuffer.byteLength;\n            if (totalLength > expectedContentLength) {\n                this.onError(\"content-length mismatch\");\n                res.close(); // calls onAborted\n                return;\n            }\n            if (!buffer) {\n                if (isLast) {\n                    onEnd(Buffer.from(arrayBuffer));\n                    return;\n                }\n                buffer = Buffer.allocUnsafe(expectedContentLength);\n            }\n            Buffer.from(arrayBuffer).copy(buffer, offset);\n            if (isLast) {\n                if (totalLength != expectedContentLength) {\n                    this.onError(\"content-length mismatch\");\n                    res.writeStatus(\"400 Content-Length Mismatch\").end();\n                    this.onDataRequestCleanup();\n                    return;\n                }\n                onEnd(buffer);\n                return;\n            }\n            offset = totalLength;\n        });\n    }\n    /**\n     * Cleanup request.\n     *\n     * @api private\n     */\n    onDataRequestCleanup() {\n        this.dataReq = this.dataRes = null;\n    }\n    /**\n     * Processes the incoming data payload.\n     *\n     * @param {String} encoded payload\n     * @api private\n     */\n    onData(data) {\n        debug('received \"%s\"', data);\n        const callback = packet => {\n            if (\"close\" === packet.type) {\n                debug(\"got xhr close packet\");\n                this.onClose();\n                return false;\n            }\n            this.onPacket(packet);\n        };\n        if (this.protocol === 3) {\n            this.parser.decodePayload(data, callback);\n        }\n        else {\n            this.parser.decodePayload(data).forEach(callback);\n        }\n    }\n    /**\n     * Overrides onClose.\n     *\n     * @api private\n     */\n    onClose() {\n        if (this.writable) {\n            // close pending poll request\n            this.send([{ type: \"noop\" }]);\n        }\n        super.onClose();\n    }\n    /**\n     * Writes a packet payload.\n     *\n     * @param {Object} packet\n     * @api private\n     */\n    send(packets) {\n        this.writable = false;\n        if (this.shouldClose) {\n            debug(\"appending close packet to payload\");\n            packets.push({ type: \"close\" });\n            this.shouldClose();\n            this.shouldClose = null;\n        }\n        const doWrite = data => {\n            const compress = packets.some(packet => {\n                return packet.options && packet.options.compress;\n            });\n            this.write(data, { compress });\n        };\n        if (this.protocol === 3) {\n            this.parser.encodePayload(packets, this.supportsBinary, doWrite);\n        }\n        else {\n            this.parser.encodePayload(packets, doWrite);\n        }\n    }\n    /**\n     * Writes data as response to poll request.\n     *\n     * @param {String} data\n     * @param {Object} options\n     * @api private\n     */\n    write(data, options) {\n        debug('writing \"%s\"', data);\n        this.doWrite(data, options, () => {\n            this.req.cleanup();\n        });\n    }\n    /**\n     * Performs the write.\n     *\n     * @api private\n     */\n    doWrite(data, options, callback) {\n        // explicit UTF-8 is required for pages not served under utf\n        const isString = typeof data === \"string\";\n        const contentType = isString\n            ? \"text/plain; charset=UTF-8\"\n            : \"application/octet-stream\";\n        const headers = {\n            \"Content-Type\": contentType\n        };\n        const respond = data => {\n            this.headers(this.req, headers);\n            Object.keys(headers).forEach(key => {\n                this.res.writeHeader(key, String(headers[key]));\n            });\n            this.res.end(data);\n            callback();\n        };\n        if (!this.httpCompression || !options.compress) {\n            respond(data);\n            return;\n        }\n        const len = isString ? Buffer.byteLength(data) : data.length;\n        if (len < this.httpCompression.threshold) {\n            respond(data);\n            return;\n        }\n        const encoding = accepts(this.req).encodings([\"gzip\", \"deflate\"]);\n        if (!encoding) {\n            respond(data);\n            return;\n        }\n        this.compress(data, encoding, (err, data) => {\n            if (err) {\n                this.res.writeStatus(\"500 Internal Server Error\");\n                this.res.end();\n                callback(err);\n                return;\n            }\n            headers[\"Content-Encoding\"] = encoding;\n            respond(data);\n        });\n    }\n    /**\n     * Compresses data.\n     *\n     * @api private\n     */\n    compress(data, encoding, callback) {\n        debug(\"compressing\");\n        const buffers = [];\n        let nread = 0;\n        compressionMethods[encoding](this.httpCompression)\n            .on(\"error\", callback)\n            .on(\"data\", function (chunk) {\n            buffers.push(chunk);\n            nread += chunk.length;\n        })\n            .on(\"end\", function () {\n            callback(null, Buffer.concat(buffers, nread));\n        })\n            .end(data);\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api private\n     */\n    doClose(fn) {\n        debug(\"closing\");\n        let closeTimeoutTimer;\n        const onClose = () => {\n            clearTimeout(closeTimeoutTimer);\n            fn();\n            this.onClose();\n        };\n        if (this.writable) {\n            debug(\"transport writable - closing right away\");\n            this.send([{ type: \"close\" }]);\n            onClose();\n        }\n        else if (this.discarded) {\n            debug(\"transport discarded - closing right away\");\n            onClose();\n        }\n        else {\n            debug(\"transport not writable - buffering orderly close\");\n            this.shouldClose = onClose;\n            closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);\n        }\n    }\n    /**\n     * Returns headers for a response.\n     *\n     * @param req - request\n     * @param {Object} extra headers\n     * @api private\n     */\n    headers(req, headers) {\n        headers = headers || {};\n        // prevent XSS warnings on IE\n        // https://github.com/LearnBoost/socket.io/pull/1333\n        const ua = req.headers[\"user-agent\"];\n        if (ua && (~ua.indexOf(\";MSIE\") || ~ua.indexOf(\"Trident/\"))) {\n            headers[\"X-XSS-Protection\"] = \"0\";\n        }\n        this.emit(\"headers\", headers, req);\n        return headers;\n    }\n}\nexports.Polling = Polling;\n"]},"metadata":{},"sourceType":"script"}