{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport normalizeArguments from './normalizeArguments.js';\nimport parsePhoneNumber from './parsePhoneNumber_.js';\nexport default function isValidPhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n    text = _normalizeArguments.text,\n    options = _normalizeArguments.options,\n    metadata = _normalizeArguments.metadata;\n  options = _objectSpread(_objectSpread({}, options), {}, {\n    extract: false\n  });\n  var phoneNumber = parsePhoneNumber(text, options, metadata);\n  return phoneNumber && phoneNumber.isValid() || false;\n}","map":{"version":3,"sources":["../source/isValidPhoneNumber.js"],"names":["normalizeArguments","parsePhoneNumber","isValidPhoneNumber","text","options","metadata","arguments","extract","phoneNumber","isValid"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AAEA,eAAe,SAASC,kBAAT,CAAA,EAA8B;EAC5C,IAAA,mBAAA,GAAkCF,kBAAkB,CAACM,SAAD,CAApD;IAAMH,IAAN,GAAA,mBAAA,CAAMA,IAAN;IAAYC,OAAZ,GAAA,mBAAA,CAAYA,OAAZ;IAAqBC,QAArB,GAAA,mBAAA,CAAqBA,QAArB;EACAD,OAAO,GAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACHA,OADG,CAAA,EAAA,CAAA,CAAA,EAAA;IAENG,OAAO,EAAE;EAFH,CAAA,CAAPH;EAIA,IAAMI,WAAW,GAAGP,gBAAgB,CAACE,IAAD,EAAOC,OAAP,EAAgBC,QAAhB,CAApC;EACA,OAAOG,WAAW,IAAIA,WAAW,CAACC,OAAZD,CAAAA,CAAfA,IAAwC,KAA/C;AACA","sourcesContent":["import normalizeArguments from './normalizeArguments.js'\r\nimport parsePhoneNumber from './parsePhoneNumber_.js'\r\n\r\nexport default function isValidPhoneNumber() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumber(text, options, metadata)\r\n\treturn phoneNumber && phoneNumber.isValid() || false\r\n}"]},"metadata":{},"sourceType":"module"}