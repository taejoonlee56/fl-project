{"ast":null,"code":"var _excluded = [\"smartCaret\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport PhoneInput_ from './PhoneInput.js';\nimport InputSmart from './InputSmart.js';\nimport InputBasic from './InputBasic.js';\nexport function createInput(defaultMetadata) {\n  function PhoneInput(_ref, ref) {\n    var smartCaret = _ref.smartCaret,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    return /*#__PURE__*/React.createElement(PhoneInput_, _extends({}, rest, {\n      ref: ref,\n      Component: smartCaret ? InputSmart : InputBasic\n    }));\n  }\n  PhoneInput = /*#__PURE__*/React.forwardRef(PhoneInput);\n  PhoneInput.propTypes = {\n    /**\r\n     * HTML `<input/>` `type` attribute.\r\n     */\n    type: PropTypes.string,\n    /**\r\n     * HTML `<input/>` `autocomplete` attribute.\r\n     */\n    autoComplete: PropTypes.string,\n    /**\r\n     * By default, the caret position is being \"intelligently\" managed\r\n     * while a user inputs a phone number.\r\n     * This \"smart\" caret behavior can be turned off\r\n     * by passing `smartCaret={false}` property.\r\n     * This is just an \"escape hatch\" for any possible caret position issues.\r\n     */\n    // Is `true` by default.\n    smartCaret: PropTypes.bool.isRequired,\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  PhoneInput.defaultProps = {\n    /**\r\n     * HTML `<input/>` `type=\"tel\"`.\r\n     */\n    type: 'tel',\n    /**\r\n     * Remember (and autofill) the value as a phone number.\r\n     */\n    autoComplete: 'tel',\n    /**\r\n     * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n     */\n    smartCaret: true,\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: defaultMetadata\n  };\n  return PhoneInput;\n}\nexport default createInput();","map":{"version":3,"sources":["../source/PhoneInputBrowser.js"],"names":["React","PropTypes","PhoneInput_","InputSmart","InputBasic","createInput","defaultMetadata","PhoneInput","smartCaret","rest","ref","forwardRef","propTypes","type","string","autoComplete","bool","isRequired","metadata","object","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA,OAAO,SAASC,WAAT,CAAqBC,eAArB,EAAsC;EAC5C,SAASC,UAAT,CAAA,IAAA,EAGGG,GAHH,EAGQ;IAAA,IAFPF,UAEO,GAAA,IAAA,CAFPA,UAEO;MADJC,IACI,GAAA,wBAAA,CAAA,IAAA,EAAA,SAAA,CAAA;IACP,OAAA,aACC,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACKA,IADL,EAAA;MAEC,GAAG,EAAEC,GAFN;MAGC,SAAS,EAAEF,UAAU,GAAGL,UAAH,GAAgBC;IAHtC,CAAA,CAAA,CADD;EAMA;EAEDG,UAAU,GAAA,aAAGP,KAAK,CAACW,UAANX,CAAiBO,UAAjBP,CAAbO;EAEAA,UAAU,CAACK,SAAXL,GAAuB;IACtB;AACF;AACA;IACEM,IAAI,EAAEZ,SAAS,CAACa,MAJM;IAMtB;AACF;AACA;IACEC,YAAY,EAAEd,SAAS,CAACa,MATF;IAWtB;AACF;AACA;AACA;AACA;AACA;AACA;IACE;IACAN,UAAU,EAAEP,SAAS,CAACe,IAAVf,CAAegB,UAnBL;IAqBtB;AACF;AACA;IACEC,QAAQ,EAAEjB,SAAS,CAACkB,MAAVlB,CAAiBgB;EAxBL,CAAvBV;EA2BAA,UAAU,CAACa,YAAXb,GAA0B;IACzB;AACF;AACA;IACEM,IAAI,EAAE,KAJmB;IAMzB;AACF;AACA;IACEE,YAAY,EAAE,KATW;IAWzB;AACF;AACA;IACEP,UAAU,EAAE,IAda;IAgBzB;AACF;AACA;IACEU,QAAQ,EAAEZ;EAnBe,CAA1BC;EAsBA,OAAOA,UAAP;AACA;AAED,eAAeF,WAAW,CAAA,CAA1B","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport PhoneInput_ from './PhoneInput.js'\r\nimport InputSmart from './InputSmart.js'\r\nimport InputBasic from './InputBasic.js'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\tfunction PhoneInput({\r\n\t\tsmartCaret,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\treturn (\r\n\t\t\t<PhoneInput_\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tComponent={smartCaret ? InputSmart : InputBasic} />\r\n\t\t)\r\n\t}\r\n\r\n\tPhoneInput = React.forwardRef(PhoneInput)\r\n\r\n\tPhoneInput.propTypes = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type` attribute.\r\n\t\t */\r\n\t\ttype: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * HTML `<input/>` `autocomplete` attribute.\r\n\t\t */\r\n\t\tautoComplete: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * By default, the caret position is being \"intelligently\" managed\r\n\t\t * while a user inputs a phone number.\r\n\t\t * This \"smart\" caret behavior can be turned off\r\n\t\t * by passing `smartCaret={false}` property.\r\n\t\t * This is just an \"escape hatch\" for any possible caret position issues.\r\n\t\t */\r\n\t\t// Is `true` by default.\r\n\t\tsmartCaret: PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tPhoneInput.defaultProps = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type=\"tel\"`.\r\n\t\t */\r\n\t\ttype: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Remember (and autofill) the value as a phone number.\r\n\t\t */\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t\t */\r\n\t\tsmartCaret: true,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn PhoneInput\r\n}\r\n\r\nexport default createInput()"]},"metadata":{},"sourceType":"module"}