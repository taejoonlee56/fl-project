{"ast":null,"code":"import _asyncToGenerator from \"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/tj/fl-carla/src/components/profile/profileCard/profileFormNav/nav/notifications/NotificationsTypes/NotificationsTypes.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"/home/tj/fl-carla/node_modules/@babel/runtime/regenerator/index.js\";\nimport React, { useCallback, useState } from 'react';\nimport { Checkbox } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { CheckboxColumn } from '@app/components/profile/profileCard/profileFormNav/nav/notifications/CheckboxColumn/CheckboxColumn';\nimport * as S from './NotificationsTypes.styles';\nimport { BaseButtonsGroup } from '@app/components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup';\nimport { notificationController } from '@app/controllers/notificationController';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var NotificationsTypes = function NotificationsTypes() {\n  _s();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState({\n    1: [],\n    2: [],\n    3: []\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      checkedElements = _useState4[0],\n      setCheckedElements = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isTriggered = _useState6[0],\n      setTriggered = _useState6[1];\n\n  var options = [{\n    id: 1,\n    header: t('common.email'),\n    headerRender: function headerRender(text, props) {\n      return /*#__PURE__*/_jsxDEV(Checkbox, _objectSpread(_objectSpread({}, props), {}, {\n        children: text\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 38\n      }, _this);\n    },\n    data: ['emailMessages', 'emailMentions', 'emailReminders', 'emailAllNews', 'emailImportantNews', 'emailActionRequired'],\n    dataRender: function dataRender(text) {\n      return /*#__PURE__*/_jsxDEV(Checkbox, {\n        value: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 29\n      }, _this);\n    }\n  }, {\n    id: 2,\n    header: t('profile.nav.notifications.push'),\n    headerRender: function headerRender(text, props) {\n      return /*#__PURE__*/_jsxDEV(Checkbox, _objectSpread(_objectSpread({}, props), {}, {\n        children: text\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 38\n      }, _this);\n    },\n    data: ['pushMessages', 'pushMentions', 'pushReminders', 'pushAllNews', 'pushImportantNews', 'pushActionRequired'],\n    dataRender: function dataRender(text) {\n      return /*#__PURE__*/_jsxDEV(Checkbox, {\n        value: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 29\n      }, _this);\n    }\n  }, {\n    id: 3,\n    header: t('profile.nav.notifications.SMS'),\n    headerRender: function headerRender(text, props) {\n      return /*#__PURE__*/_jsxDEV(Checkbox, _objectSpread(_objectSpread({}, props), {}, {\n        children: text\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 38\n      }, _this);\n    },\n    data: ['smsMessages', 'smsMentions', 'smsReminders', 'smsAllNews', 'smsImportantNews', 'smsActionRequired'],\n    dataRender: function dataRender(text) {\n      return /*#__PURE__*/_jsxDEV(Checkbox, {\n        value: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 29\n      }, _this);\n    }\n  }, {\n    id: 4,\n    header: t('profile.nav.notifications.activities'),\n    data: [t('profile.nav.notifications.directMessages'), t('profile.nav.notifications.mentions'), t('profile.nav.notifications.reminders'), t('profile.nav.notifications.allNews'), t('profile.nav.notifications.importantNews'), t('profile.nav.notifications.actionRequired')]\n  }];\n  var handleCheck = useCallback(function (mode) {\n    return function (list) {\n      setCheckedElements(_objectSpread(_objectSpread({}, checkedElements), {}, _defineProperty({}, mode, list)));\n    };\n  }, [checkedElements]);\n  var onCancel = useCallback(function () {\n    setTriggered(false);\n  }, [setTriggered]);\n  var onFinish = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            setTimeout(function () {\n              setLoading(false);\n              setTriggered(false);\n              notificationController.success({\n                message: t('common.success')\n              });\n              console.log(checkedElements);\n            }, 1000);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [setTriggered, checkedElements, t]);\n  return /*#__PURE__*/_jsxDEV(BaseButtonsForm, {\n    name: \"notifications\",\n    onFinish: onFinish,\n    isFieldsChanged: isTriggered,\n    setFieldsChanged: setTriggered,\n    footer: /*#__PURE__*/_jsxDEV(BaseButtonsGroup, {\n      loading: isLoading,\n      onCancel: onCancel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }, _this),\n    children: /*#__PURE__*/_jsxDEV(S.Wrapper, {\n      children: options.map(function (item) {\n        return /*#__PURE__*/_jsxDEV(CheckboxColumn, {\n          column: item,\n          handleCheck: handleCheck(item.id),\n          setTriggered: setTriggered\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(NotificationsTypes, \"4W5UDOGQ+IBi5OrMpF/8bnREbD8=\", false, function () {\n  return [useTranslation];\n});\n\n_c = NotificationsTypes;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotificationsTypes\");","map":{"version":3,"sources":["/home/tj/fl-carla/src/components/profile/profileCard/profileFormNav/nav/notifications/NotificationsTypes/NotificationsTypes.tsx"],"names":["React","useCallback","useState","Checkbox","useTranslation","BaseButtonsForm","CheckboxColumn","S","BaseButtonsGroup","notificationController","NotificationsTypes","t","isLoading","setLoading","checkedElements","setCheckedElements","isTriggered","setTriggered","options","id","header","headerRender","text","props","data","dataRender","handleCheck","mode","list","onCancel","onFinish","setTimeout","success","message","console","log","map","item"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { Checkbox } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { CheckboxColumn } from '@app/components/profile/profileCard/profileFormNav/nav/notifications/CheckboxColumn/CheckboxColumn';\nimport { Option } from '@app/components/profile/profileCard/profileFormNav/nav/notifications/interfaces';\nimport * as S from './NotificationsTypes.styles';\nimport { BaseButtonsGroup } from '@app/components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup';\nimport { notificationController } from '@app/controllers/notificationController';\n\ninterface Notifications {\n  1: string[];\n  2: string[];\n  3: string[];\n}\n\nexport const NotificationsTypes: React.FC = () => {\n  const { t } = useTranslation();\n  const [isLoading, setLoading] = useState(false);\n  const [checkedElements, setCheckedElements] = useState<Notifications>({\n    1: [],\n    2: [],\n    3: [],\n  });\n\n  const [isTriggered, setTriggered] = useState(false);\n\n  const options: Option[] = [\n    {\n      id: 1,\n      header: t('common.email'),\n      headerRender: (text, props) => <Checkbox {...props}>{text}</Checkbox>,\n      data: [\n        'emailMessages',\n        'emailMentions',\n        'emailReminders',\n        'emailAllNews',\n        'emailImportantNews',\n        'emailActionRequired',\n      ],\n      dataRender: (text) => <Checkbox value={text} />,\n    },\n    {\n      id: 2,\n      header: t('profile.nav.notifications.push'),\n      headerRender: (text, props) => <Checkbox {...props}>{text}</Checkbox>,\n      data: ['pushMessages', 'pushMentions', 'pushReminders', 'pushAllNews', 'pushImportantNews', 'pushActionRequired'],\n      dataRender: (text) => <Checkbox value={text} />,\n    },\n    {\n      id: 3,\n      header: t('profile.nav.notifications.SMS'),\n      headerRender: (text, props) => <Checkbox {...props}>{text}</Checkbox>,\n      data: ['smsMessages', 'smsMentions', 'smsReminders', 'smsAllNews', 'smsImportantNews', 'smsActionRequired'],\n      dataRender: (text) => <Checkbox value={text} />,\n    },\n    {\n      id: 4,\n      header: t('profile.nav.notifications.activities'),\n      data: [\n        t('profile.nav.notifications.directMessages'),\n        t('profile.nav.notifications.mentions'),\n        t('profile.nav.notifications.reminders'),\n        t('profile.nav.notifications.allNews'),\n        t('profile.nav.notifications.importantNews'),\n        t('profile.nav.notifications.actionRequired'),\n      ],\n    },\n  ];\n\n  const handleCheck = useCallback(\n    (mode: number) => (list: CheckboxValueType[]) => {\n      setCheckedElements({ ...checkedElements, [mode]: list });\n    },\n    [checkedElements],\n  );\n\n  const onCancel = useCallback(() => {\n    setTriggered(false);\n  }, [setTriggered]);\n\n  const onFinish = useCallback(async () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setTriggered(false);\n      notificationController.success({ message: t('common.success') });\n      console.log(checkedElements);\n    }, 1000);\n  }, [setTriggered, checkedElements, t]);\n\n  return (\n    <BaseButtonsForm\n      name=\"notifications\"\n      onFinish={onFinish}\n      isFieldsChanged={isTriggered}\n      setFieldsChanged={setTriggered}\n      footer={<BaseButtonsGroup loading={isLoading} onCancel={onCancel} />}\n    >\n      <S.Wrapper>\n        {options.map((item) => (\n          <CheckboxColumn key={item.id} column={item} handleCheck={handleCheck(item.id)} setTriggered={setTriggered} />\n        ))}\n      </S.Wrapper>\n    </BaseButtonsForm>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}