{"ast":null,"code":"import _toConsumableArray from \"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/tj/fl-carla/src/components/tj/ServerAccuracy/ServerAccuracy.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useTheme } from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport { Card } from '@app/components/common/Card/Card';\nimport { BaseChart } from '@app/components/common/charts/BaseChart';\nimport Data from './data.json';\nimport socketio from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var ServerAccuracy = function ServerAccuracy() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      series = _useState4[0],\n      setSeries = _useState4[1];\n\n  var rawData = JSON.parse(JSON.stringify(Data));\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var theme = useTheme();\n  var socket = socketio('0.0.0.0:8080');\n\n  var b = function b() {\n    socket.emit('message', {});\n    socket.on(\"message\", function (data) {\n      rawData = JSON.parse(JSON.stringify(data));\n    });\n    return rawData;\n  };\n\n  var runAnimation = useCallback(function () {\n    var countries = ['Server'];\n    var datasetWithFilters = [];\n    var seriesList = [];\n    countries.forEach(function (country) {\n      var datasetId = \"dataset_\".concat(country);\n      datasetWithFilters.push({\n        id: datasetId,\n        fromDatasetId: 'dataset_raw',\n        transform: {\n          type: 'filter',\n          config: {\n            and: [{\n              dimension: 'Year',\n              gte: 0\n            }, {\n              dimension: 'Country',\n              '=': country\n            }]\n          }\n        }\n      });\n      seriesList.push({\n        type: 'line',\n        datasetId: datasetId,\n        showSymbol: false,\n        name: country,\n        endLabel: {\n          show: true,\n          formatter: function formatter(params) {\n            return \"\".concat(params.value[4], \": \").concat(params.value[3]);\n          },\n          color: theme.colors.text.main\n        },\n        labelLayout: {\n          moveOverlap: 'shiftY'\n        },\n        emphasis: {\n          focus: 'series'\n        },\n        encode: {\n          x: 'Year',\n          y: 'Income',\n          label: ['Country', 'Income'],\n          itemName: 'Year',\n          tooltip: ['Income']\n        }\n      });\n    });\n    setData(datasetWithFilters);\n    setSeries(seriesList);\n  }, [theme]);\n  useEffect(function () {\n    setTimeout(function () {\n      runAnimation();\n    }, 200);\n  }, [runAnimation]);\n  var option = {\n    animationDuration: 10000,\n    dataset: [{\n      id: 'dataset_raw',\n      source: b\n    }].concat(_toConsumableArray(data)),\n    tooltip: {\n      order: 'valueDesc',\n      trigger: 'axis'\n    },\n    xAxis: {\n      type: 'category',\n      nameLocation: 'middle'\n    },\n    yAxis: {\n      name: ''\n    },\n    grid: {\n      left: 65,\n      right: 150,\n      top: 20,\n      bottom: 30\n    },\n    series: series\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    padding: \"0 0 1.875rem\",\n    title: t('Server Accuracy'),\n    children: /*#__PURE__*/_jsxDEV(BaseChart, {\n      option: option,\n      height: \"24rem\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ServerAccuracy, \"3h9G3+vmTcNZhs+f/mDRbW1Obms=\", false, function () {\n  return [useTranslation, useTheme];\n});\n\n_c = ServerAccuracy;\n\nvar _c;\n\n$RefreshReg$(_c, \"ServerAccuracy\");","map":{"version":3,"sources":["/home/tj/fl-carla/src/components/tj/ServerAccuracy/ServerAccuracy.tsx"],"names":["React","useState","useEffect","useCallback","useTheme","useTranslation","Card","BaseChart","Data","socketio","ServerAccuracy","data","setData","series","setSeries","rawData","JSON","parse","stringify","t","theme","socket","b","emit","on","runAnimation","countries","datasetWithFilters","seriesList","forEach","country","datasetId","push","id","fromDatasetId","transform","type","config","and","dimension","gte","showSymbol","name","endLabel","show","formatter","params","value","color","colors","text","main","labelLayout","moveOverlap","emphasis","focus","encode","x","y","label","itemName","tooltip","setTimeout","option","animationDuration","dataset","source","order","trigger","xAxis","nameLocation","yAxis","grid","left","right","top","bottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useTheme } from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport { Card } from '@app/components/common/Card/Card';\nimport { BaseChart } from '@app/components/common/charts/BaseChart';\nimport Data from './data.json';\nimport socketio from 'socket.io-client';\n\n\ninterface DataRow {\n  id: string;\n  fromDatasetId: string;\n  transform: {\n    type: string;\n    config: { and: [{ dimension: string; gte: number }, { dimension: string; '=': string }] };\n  };\n}\n\ninterface SeriesRow {\n  type: string;\n  datasetId: string;\n  showSymbol: boolean;\n  name: string;\n  endLabel: {\n    show: boolean;\n    formatter: (params: { value: string }) => string;\n    color?: string;\n  };\n  labelLayout: {\n    moveOverlap: string;\n  };\n  emphasis: {\n    focus: string;\n  };\n  encode: {\n    x: string;\n    y: string;\n    label: [string, string];\n    itemName: string;\n    tooltip: [string];\n  };\n}\n\nexport const ServerAccuracy: React.FC = () => {\n  const [data, setData] = useState<DataRow[]>([]);\n  const [series, setSeries] = useState<SeriesRow[]>([]);\n  let rawData = JSON.parse(JSON.stringify(Data));\n  const { t } = useTranslation();\n\n  const theme = useTheme();\n\n  const socket = socketio('0.0.0.0:8080');\n\n  let b = () => {\n\n    socket.emit('message', {});\n    socket.on(\"message\", function(data) {\n      rawData = JSON.parse(JSON.stringify(data));\n    });\n    return rawData\n  };\n\n\n\n\n  const runAnimation = useCallback(() => {\n    const countries = ['Server'];\n    const datasetWithFilters: DataRow[] = [];\n    const seriesList: SeriesRow[] = [];\n\n    countries.forEach((country) => {\n      const datasetId = `dataset_${country}`;\n      datasetWithFilters.push({\n        id: datasetId,\n        fromDatasetId: 'dataset_raw',\n        transform: {\n          type: 'filter',\n          config: {\n            and: [\n              { dimension: 'Year', gte: 0 },\n              { dimension: 'Country', '=': country },\n            ],\n          },\n        },\n      });\n      seriesList.push({\n        type: 'line',\n        datasetId: datasetId,\n        showSymbol: false,\n        name: country,\n        endLabel: {\n          show: true,\n          formatter: (params) => `${params.value[4]}: ${params.value[3]}`,\n          color: theme.colors.text.main,\n        },\n        labelLayout: {\n          moveOverlap: 'shiftY',\n        },\n        emphasis: {\n          focus: 'series',\n        },\n        encode: {\n          x: 'Year',\n          y: 'Income',\n          label: ['Country', 'Income'],\n          itemName: 'Year',\n          tooltip: ['Income'],\n        },\n      });\n    });\n    setData(datasetWithFilters);\n    setSeries(seriesList);\n  }, [theme]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      runAnimation();\n    }, 200);\n  }, [runAnimation]);\n\n\n\n  const option = {\n\n    animationDuration: 10000,\n    dataset: [\n      {\n        id: 'dataset_raw',\n        source: b,\n      },\n      ...data,\n    ],\n    tooltip: {\n      order: 'valueDesc',\n      trigger: 'axis',\n    },\n    xAxis: {\n      type: 'category',\n      nameLocation: 'middle',\n    },\n    yAxis: {\n      name: '',\n    },\n    grid: {\n      left: 65,\n      right: 150,\n      top: 20,\n      bottom: 30,\n    },\n    series: series,\n  };\n\n  return (\n    <Card padding=\"0 0 1.875rem\" title={t('Server Accuracy')}>\n      <BaseChart option={option} height=\"24rem\" />\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}