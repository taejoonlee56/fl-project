{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _get = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _inherits = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/tj/fl-carla/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = exports.RESERVED_EVENTS = void 0;\n\nvar socket_io_parser_1 = require(\"socket.io-parser\");\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar typed_events_1 = require(\"./typed-events\");\n\nvar base64id_1 = __importDefault(require(\"base64id\"));\n\nvar broadcast_operator_1 = require(\"./broadcast-operator\");\n\nvar debug = (0, debug_1.default)(\"socket.io:socket\");\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connect_error\", \"disconnect\", \"disconnecting\", \"newListener\", \"removeListener\"]);\n\nfunction noop() {}\n/**\n * This is the main object for interacting with a client.\n *\n * A Socket belongs to a given {@link Namespace} and uses an underlying {@link Client} to communicate.\n *\n * Within each {@link Namespace}, you can also define arbitrary channels (called \"rooms\") that the {@link Socket} can\n * join and leave. That provides a convenient way to broadcast to a group of socket instances.\n *\n * @example\n * io.on(\"connection\", (socket) => {\n *   console.log(`socket ${socket.id} connected`);\n *\n *   // send an event to the client\n *   socket.emit(\"foo\", \"bar\");\n *\n *   socket.on(\"foobar\", () => {\n *     // an event was received from the client\n *   });\n *\n *   // join the room named \"room1\"\n *   socket.join(\"room1\");\n *\n *   // broadcast to everyone in the room named \"room1\"\n *   io.to(\"room1\").emit(\"hello\");\n *\n *   // upon disconnection\n *   socket.on(\"disconnect\", (reason) => {\n *     console.log(`socket ${socket.id} disconnected due to ${reason}`);\n *   });\n * });\n */\n\n\nvar Socket = /*#__PURE__*/function (_typed_events_1$Stric) {\n  _inherits(Socket, _typed_events_1$Stric);\n\n  var _super = _createSuper(Socket);\n\n  /**\n   * Interface to a `Client` for a given `Namespace`.\n   *\n   * @param {Namespace} nsp\n   * @param {Client} client\n   * @param {Object} auth\n   * @package\n   */\n  function Socket(nsp, client, auth) {\n    var _this;\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n    _this.nsp = nsp;\n    _this.client = client;\n    /**\n     * Additional information that can be attached to the Socket instance and which will be used in the\n     * {@link Server.fetchSockets()} method.\n     */\n\n    _this.data = {};\n    /**\n     * Whether the socket is currently connected or not.\n     *\n     * @example\n     * io.use((socket, next) => {\n     *   console.log(socket.connected); // false\n     *   next();\n     * });\n     *\n     * io.on(\"connection\", (socket) => {\n     *   console.log(socket.connected); // true\n     * });\n     */\n\n    _this.connected = false;\n    _this.acks = new Map();\n    _this.fns = [];\n    _this.flags = {};\n    _this.server = nsp.server;\n    _this.adapter = _this.nsp.adapter;\n\n    if (client.conn.protocol === 3) {\n      // @ts-ignore\n      _this.id = nsp.name !== \"/\" ? nsp.name + \"#\" + client.id : client.id;\n    } else {\n      _this.id = base64id_1.default.generateId(); // don't reuse the Engine.IO id because it's sensitive information\n    }\n\n    _this.handshake = _this.buildHandshake(auth);\n    return _this;\n  }\n  /**\n   * Builds the `handshake` BC object\n   *\n   * @private\n   */\n\n\n  _createClass(Socket, [{\n    key: \"buildHandshake\",\n    value: function buildHandshake(auth) {\n      return {\n        headers: this.request.headers,\n        time: new Date() + \"\",\n        address: this.conn.remoteAddress,\n        xdomain: !!this.request.headers.origin,\n        // @ts-ignore\n        secure: !!this.request.connection.encrypted,\n        issued: +new Date(),\n        url: this.request.url,\n        // @ts-ignore\n        query: this.request._query,\n        auth: auth\n      };\n    }\n    /**\n     * Emits to this client.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.emit(\"hello\", \"world\");\n     *\n     *   // all serializable datastructures are supported (no need to call JSON.stringify)\n     *   socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Buffer.from([6]) });\n     *\n     *   // with an acknowledgement from the client\n     *   socket.emit(\"hello\", \"world\", (val) => {\n     *     // ...\n     *   });\n     * });\n     *\n     * @return Always returns `true`.\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (exports.RESERVED_EVENTS.has(ev)) {\n        throw new Error(\"\\\"\".concat(String(ev), \"\\\" is a reserved event name\"));\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var data = [ev].concat(args);\n      var packet = {\n        type: socket_io_parser_1.PacketType.EVENT,\n        data: data\n      }; // access last argument to see if it's an ACK callback\n\n      if (typeof data[data.length - 1] === \"function\") {\n        var id = this.nsp._ids++;\n        debug(\"emitting packet with ack id %d\", id);\n        this.registerAckCallback(id, data.pop());\n        packet.id = id;\n      }\n\n      var flags = Object.assign({}, this.flags);\n      this.flags = {};\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet, flags);\n      return true;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"registerAckCallback\",\n    value: function registerAckCallback(id, ack) {\n      var _this2 = this;\n\n      var timeout = this.flags.timeout;\n\n      if (timeout === undefined) {\n        this.acks.set(id, ack);\n        return;\n      }\n\n      var timer = setTimeout(function () {\n        debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n\n        _this2.acks.delete(id);\n\n        ack.call(_this2, new Error(\"operation has timed out\"));\n      }, timeout);\n      this.acks.set(id, function () {\n        clearTimeout(timer);\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        ack.apply(_this2, [null].concat(args));\n      });\n    }\n    /**\n     * Targets a room when broadcasting.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // the “foo” event will be broadcast to all connected clients in the “room-101” room, except this socket\n     *   socket.to(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     *   // the code above is equivalent to:\n     *   io.to(\"room-101\").except(socket.id).emit(\"foo\", \"bar\");\n     *\n     *   // with an array of rooms (a client will be notified at most once)\n     *   socket.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     *   // with multiple chained calls\n     *   socket.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n     * });\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n\n  }, {\n    key: \"to\",\n    value: function to(room) {\n      return this.newBroadcastOperator().to(room);\n    }\n    /**\n     * Targets a room when broadcasting. Similar to `to()`, but might feel clearer in some cases:\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // disconnect all clients in the \"room-101\" room, except this socket\n     *   socket.in(\"room-101\").disconnectSockets();\n     * });\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n\n  }, {\n    key: \"in\",\n    value: function _in(room) {\n      return this.newBroadcastOperator().in(room);\n    }\n    /**\n     * Excludes a room when broadcasting.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n     *   // and this socket\n     *   socket.except(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     *   // with an array of rooms\n     *   socket.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     *   // with multiple chained calls\n     *   socket.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n     * });\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n\n  }, {\n    key: \"except\",\n    value: function except(room) {\n      return this.newBroadcastOperator().except(room);\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.send(\"hello\");\n     *\n     *   // this is equivalent to\n     *   socket.emit(\"message\", \"hello\");\n     * });\n     *\n     * @return self\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      this.emit.apply(this, [\"message\"].concat(args));\n      return this;\n    }\n    /**\n     * Sends a `message` event. Alias of {@link send}.\n     *\n     * @return self\n     */\n\n  }, {\n    key: \"write\",\n    value: function write() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      this.emit.apply(this, [\"message\"].concat(args));\n      return this;\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param {Object} packet - packet object\n     * @param {Object} opts - options\n     * @private\n     */\n\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      _packet.nsp = this.nsp.name;\n      opts.compress = false !== opts.compress;\n\n      this.client._packet(_packet, opts);\n    }\n    /**\n     * Joins a room.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // join a single room\n     *   socket.join(\"room1\");\n     *\n     *   // join multiple rooms\n     *   socket.join([\"room1\", \"room2\"]);\n     * });\n     *\n     * @param {String|Array} rooms - room or array of rooms\n     * @return a Promise or nothing, depending on the adapter\n     */\n\n  }, {\n    key: \"join\",\n    value: function join(rooms) {\n      debug(\"join room %s\", rooms);\n      return this.adapter.addAll(this.id, new Set(Array.isArray(rooms) ? rooms : [rooms]));\n    }\n    /**\n     * Leaves a room.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // leave a single room\n     *   socket.leave(\"room1\");\n     *\n     *   // leave multiple rooms\n     *   socket.leave(\"room1\").leave(\"room2\");\n     * });\n     *\n     * @param {String} room\n     * @return a Promise or nothing, depending on the adapter\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(room) {\n      debug(\"leave room %s\", room);\n      return this.adapter.del(this.id, room);\n    }\n    /**\n     * Leave all rooms.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"leaveAll\",\n    value: function leaveAll() {\n      this.adapter.delAll(this.id);\n    }\n    /**\n     * Called by `Namespace` upon successful\n     * middleware execution (ie: authorization).\n     * Socket is added to namespace array before\n     * call to join, so adapters can access it.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onconnect\",\n    value: function _onconnect() {\n      debug(\"socket connected - writing packet\");\n      this.connected = true;\n      this.join(this.id);\n\n      if (this.conn.protocol === 3) {\n        this.packet({\n          type: socket_io_parser_1.PacketType.CONNECT\n        });\n      } else {\n        this.packet({\n          type: socket_io_parser_1.PacketType.CONNECT,\n          data: {\n            sid: this.id\n          }\n        });\n      }\n    }\n    /**\n     * Called with each packet. Called by `Client`.\n     *\n     * @param {Object} packet\n     * @private\n     */\n\n  }, {\n    key: \"_onpacket\",\n    value: function _onpacket(packet) {\n      debug(\"got packet %j\", packet);\n\n      switch (packet.type) {\n        case socket_io_parser_1.PacketType.EVENT:\n          this.onevent(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.ACK:\n          this.onack(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n      }\n    }\n    /**\n     * Called upon event packet.\n     *\n     * @param {Packet} packet - packet object\n     * @private\n     */\n\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n      debug(\"emitting event %j\", args);\n\n      if (null != packet.id) {\n        debug(\"attaching ack callback to event\");\n        args.push(this.ack(packet.id));\n      }\n\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n\n        var _iterator = _createForOfIteratorHelper(listeners),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      this.dispatch(args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @param {Number} id - packet id\n     * @private\n     */\n\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        var args = Array.prototype.slice.call(arguments);\n        debug(\"sending ack %j\", args);\n        self.packet({\n          id: id,\n          type: socket_io_parser_1.PacketType.ACK,\n          data: args\n        });\n        sent = true;\n      };\n    }\n    /**\n     * Called upon ack packet.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks.get(packet.id);\n\n      if (\"function\" == typeof ack) {\n        debug(\"calling ack %s with %j\", packet.id, packet.data);\n        ack.apply(this, packet.data);\n        this.acks.delete(packet.id);\n      } else {\n        debug(\"bad ack %s\", packet.id);\n      }\n    }\n    /**\n     * Called upon client disconnect packet.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      debug(\"got disconnect packet\");\n\n      this._onclose(\"client namespace disconnect\");\n    }\n    /**\n     * Handles a client error.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onerror\",\n    value: function _onerror(err) {\n      if (this.listeners(\"error\").length) {\n        this.emitReserved(\"error\", err);\n      } else {\n        console.error(\"Missing error handler on `socket`.\");\n        console.error(err.stack);\n      }\n    }\n    /**\n     * Called upon closing. Called by `Client`.\n     *\n     * @param {String} reason\n     * @throw {Error} optional error object\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onclose\",\n    value: function _onclose(reason) {\n      if (!this.connected) return this;\n      debug(\"closing socket - reason %s\", reason);\n      this.emitReserved(\"disconnecting\", reason);\n\n      this._cleanup();\n\n      this.nsp._remove(this);\n\n      this.client._remove(this);\n\n      this.connected = false;\n      this.emitReserved(\"disconnect\", reason);\n      return;\n    }\n    /**\n     * Makes the socket leave all the rooms it was part of and prevents it from joining any other room\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_cleanup\",\n    value: function _cleanup() {\n      this.leaveAll();\n      this.join = noop;\n    }\n    /**\n     * Produces an `error` packet.\n     *\n     * @param {Object} err - error object\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.packet({\n        type: socket_io_parser_1.PacketType.CONNECT_ERROR,\n        data: err\n      });\n    }\n    /**\n     * Disconnects this client.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // disconnect this socket (the connection might be kept alive for other namespaces)\n     *   socket.disconnect();\n     *\n     *   // disconnect this socket and close the underlying connection\n     *   socket.disconnect(true);\n     * })\n     *\n     * @param {Boolean} close - if `true`, closes the underlying connection\n     * @return self\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var close = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this.connected) return this;\n\n      if (close) {\n        this.client._disconnect();\n      } else {\n        this.packet({\n          type: socket_io_parser_1.PacketType.DISCONNECT\n        });\n\n        this._onclose(\"server namespace disconnect\");\n      }\n\n      return this;\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.compress(false).emit(\"hello\");\n     * });\n     *\n     * @param {Boolean} compress - if `true`, compresses the sending data\n     * @return {Socket} self\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.volatile.emit(\"hello\"); // the client may or may not receive it\n     * });\n     *\n     * @return {Socket} self\n     */\n\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to every sockets but the\n     * sender.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // the “foo” event will be broadcast to all connected clients, except this socket\n     *   socket.broadcast.emit(\"foo\", \"bar\");\n     * });\n     *\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n\n  }, {\n    key: \"broadcast\",\n    get: function get() {\n      return this.newBroadcastOperator();\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // the “foo” event will be broadcast to all connected clients on this node, except this socket\n     *   socket.local.emit(\"foo\", \"bar\");\n     * });\n     *\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n\n  }, {\n    key: \"local\",\n    get: function get() {\n      return this.newBroadcastOperator().local;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the client:\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.timeout(5000).emit(\"my-event\", (err) => {\n     *     if (err) {\n     *       // the client did not acknowledge the event in the given delay\n     *     }\n     *   });\n     * });\n     *\n     * @returns self\n     */\n\n  }, {\n    key: \"timeout\",\n    value: function timeout(_timeout) {\n      this.flags.timeout = _timeout;\n      return this;\n    }\n    /**\n     * Dispatch incoming event to socket listeners.\n     *\n     * @param {Array} event - event that will get emitted\n     * @private\n     */\n\n  }, {\n    key: \"dispatch\",\n    value: function dispatch(event) {\n      var _this3 = this;\n\n      debug(\"dispatching an event %j\", event);\n      this.run(event, function (err) {\n        process.nextTick(function () {\n          if (err) {\n            return _this3._onerror(err);\n          }\n\n          if (_this3.connected) {\n            _get(_getPrototypeOf(Socket.prototype), \"emitUntyped\", _this3).apply(_this3, event);\n          } else {\n            debug(\"ignore packet received after disconnection\");\n          }\n        });\n      });\n    }\n    /**\n     * Sets up socket middleware.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.use(([event, ...args], next) => {\n     *     if (isUnauthorized(event)) {\n     *       return next(new Error(\"unauthorized event\"));\n     *     }\n     *     // do not forget to call next\n     *     next();\n     *   });\n     *\n     *   socket.on(\"error\", (err) => {\n     *     if (err && err.message === \"unauthorized event\") {\n     *       socket.disconnect();\n     *     }\n     *   });\n     * });\n     *\n     * @param {Function} fn - middleware function (event, next)\n     * @return {Socket} self\n     */\n\n  }, {\n    key: \"use\",\n    value: function use(fn) {\n      this.fns.push(fn);\n      return this;\n    }\n    /**\n     * Executes the middleware for an incoming event.\n     *\n     * @param {Array} event - event that will get emitted\n     * @param {Function} fn - last fn call in the middleware\n     * @private\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(event, fn) {\n      var fns = this.fns.slice(0);\n      if (!fns.length) return fn(null);\n\n      function run(i) {\n        fns[i](event, function (err) {\n          // upon error, short-circuit\n          if (err) return fn(err); // if no middleware left, summon callback\n\n          if (!fns[i + 1]) return fn(null); // go on to next\n\n          run(i + 1);\n        });\n      }\n\n      run(0);\n    }\n    /**\n     * Whether the socket is currently disconnected\n     */\n\n  }, {\n    key: \"disconnected\",\n    get: function get() {\n      return !this.connected;\n    }\n    /**\n     * A reference to the request that originated the underlying Engine.IO Socket.\n     */\n\n  }, {\n    key: \"request\",\n    get: function get() {\n      return this.client.request;\n    }\n    /**\n     * A reference to the underlying Client transport connection (Engine.IO Socket object).\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   console.log(socket.conn.transport.name); // prints \"polling\" or \"websocket\"\n     *\n     *   socket.conn.once(\"upgrade\", () => {\n     *     console.log(socket.conn.transport.name); // prints \"websocket\"\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"conn\",\n    get: function get() {\n      return this.client.conn;\n    }\n    /**\n     * Returns the rooms the socket is currently in.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   console.log(socket.rooms); // Set { <socket.id> }\n     *\n     *   socket.join(\"room1\");\n     *\n     *   console.log(socket.rooms); // Set { <socket.id>, \"room1\" }\n     * });\n     */\n\n  }, {\n    key: \"rooms\",\n    get: function get() {\n      return this.adapter.socketRooms(this.id) || new Set();\n    }\n    /**\n     * Adds a listener that will be fired when any event is received. The event name is passed as the first argument to\n     * the callback.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.onAny((event, ...args) => {\n     *     console.log(`got event ${event}`);\n     *   });\n     * });\n     *\n     * @param listener\n     */\n\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.push(listener);\n\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is received. The event name is passed as the first argument to\n     * the callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     */\n\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.unshift(listener);\n\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is received.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   const catchAllListener = (event, ...args) => {\n     *     console.log(`got event ${event}`);\n     *   }\n     *\n     *   socket.onAny(catchAllListener);\n     *\n     *   // remove a specific listener\n     *   socket.offAny(catchAllListener);\n     *\n     *   // or remove all listeners\n     *   socket.offAny();\n     * });\n     *\n     * @param listener\n     */\n\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is sent. The event name is passed as the first argument to\n     * the callback.\n     *\n     * Note: acknowledgements sent to the client are not included.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.onAnyOutgoing((event, ...args) => {\n     *     console.log(`sent event ${event}`);\n     *   });\n     * });\n     *\n     * @param listener\n     */\n\n  }, {\n    key: \"onAnyOutgoing\",\n    value: function onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n      this._anyOutgoingListeners.push(listener);\n\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.prependAnyOutgoing((event, ...args) => {\n     *     console.log(`sent event ${event}`);\n     *   });\n     * });\n     *\n     * @param listener\n     */\n\n  }, {\n    key: \"prependAnyOutgoing\",\n    value: function prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n      this._anyOutgoingListeners.unshift(listener);\n\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is sent.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   const catchAllListener = (event, ...args) => {\n     *     console.log(`sent event ${event}`);\n     *   }\n     *\n     *   socket.onAnyOutgoing(catchAllListener);\n     *\n     *   // remove a specific listener\n     *   socket.offAnyOutgoing(catchAllListener);\n     *\n     *   // or remove all listeners\n     *   socket.offAnyOutgoing();\n     * });\n     *\n     * @param listener - the catch-all listener\n     */\n\n  }, {\n    key: \"offAnyOutgoing\",\n    value: function offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyOutgoingListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n\n  }, {\n    key: \"listenersAnyOutgoing\",\n    value: function listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent (emit or broadcast)\n     *\n     * @param packet\n     *\n     * @private\n     */\n\n  }, {\n    key: \"notifyOutgoingListeners\",\n    value: function notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        var listeners = this._anyOutgoingListeners.slice();\n\n        var _iterator2 = _createForOfIteratorHelper(listeners),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var listener = _step2.value;\n            listener.apply(this, packet.data);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }, {\n    key: \"newBroadcastOperator\",\n    value: function newBroadcastOperator() {\n      var flags = Object.assign({}, this.flags);\n      this.flags = {};\n      return new broadcast_operator_1.BroadcastOperator(this.adapter, new Set(), new Set([this.id]), flags);\n    }\n  }]);\n\n  return Socket;\n}(typed_events_1.StrictEventEmitter);\n\nexports.Socket = Socket;","map":{"version":3,"sources":["/home/tj/fl-carla/node_modules/socket.io/dist/socket.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Socket","RESERVED_EVENTS","socket_io_parser_1","require","debug_1","typed_events_1","base64id_1","broadcast_operator_1","debug","default","Set","noop","nsp","client","auth","data","connected","acks","Map","fns","flags","server","adapter","conn","protocol","id","name","generateId","handshake","buildHandshake","headers","request","time","Date","address","remoteAddress","xdomain","origin","secure","connection","encrypted","issued","url","query","_query","ev","has","Error","String","args","packet","type","PacketType","EVENT","length","_ids","registerAckCallback","pop","assign","notifyOutgoingListeners","ack","timeout","undefined","set","timer","setTimeout","delete","call","clearTimeout","apply","room","newBroadcastOperator","to","in","except","emit","opts","compress","_packet","rooms","addAll","Array","isArray","del","delAll","join","CONNECT","sid","onevent","BINARY_EVENT","ACK","onack","BINARY_ACK","DISCONNECT","ondisconnect","push","_anyListeners","listeners","slice","listener","dispatch","self","sent","prototype","arguments","get","_onclose","err","emitReserved","console","error","stack","reason","_cleanup","_remove","leaveAll","CONNECT_ERROR","close","_disconnect","volatile","local","event","run","process","nextTick","_onerror","fn","i","socketRooms","unshift","splice","_anyOutgoingListeners","BroadcastOperator","StrictEventEmitter"],"mappings":"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AACA;AACA;AACA;AACA;AACA;;;;WACI,kBAAS7B,SAAT,EAAmB;AACf,WAAKzD,KAAL,CAAWyD,QAAX,GAAsBA,SAAtB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;SACI,eAAe;AACX,WAAKzD,KAAL,CAAWmG,QAAX,GAAsB,IAAtB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;SACI,eAAgB;AACZ,aAAO,KAAKhD,oBAAL,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;SACI,eAAY;AACR,aAAO,KAAKA,oBAAL,GAA4BiD,KAAnC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,iBAAQ3D,QAAR,EAAiB;AACb,WAAKzC,KAAL,CAAWyC,OAAX,GAAqBA,QAArB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,kBAAS4D,KAAT,EAAgB;AAAA;;AACZjH,MAAAA,KAAK,CAAC,yBAAD,EAA4BiH,KAA5B,CAAL;AACA,WAAKC,GAAL,CAASD,KAAT,EAAgB,UAACd,GAAD,EAAS;AACrBgB,QAAAA,OAAO,CAACC,QAAR,CAAiB,YAAM;AACnB,cAAIjB,GAAJ,EAAS;AACL,mBAAO,MAAI,CAACkB,QAAL,CAAclB,GAAd,CAAP;AACH;;AACD,cAAI,MAAI,CAAC3F,SAAT,EAAoB;AAChB,2EAAkBqD,KAAlB,CAAwB,MAAxB,EAA8BoD,KAA9B;AACH,WAFD,MAGK;AACDjH,YAAAA,KAAK,CAAC,4CAAD,CAAL;AACH;AACJ,SAVD;AAWH,OAZD;AAaH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,aAAIsH,EAAJ,EAA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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = exports.RESERVED_EVENTS = void 0;\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst typed_events_1 = require(\"./typed-events\");\nconst base64id_1 = __importDefault(require(\"base64id\"));\nconst broadcast_operator_1 = require(\"./broadcast-operator\");\nconst debug = (0, debug_1.default)(\"socket.io:socket\");\nexports.RESERVED_EVENTS = new Set([\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    \"newListener\",\n    \"removeListener\",\n]);\nfunction noop() { }\n/**\n * This is the main object for interacting with a client.\n *\n * A Socket belongs to a given {@link Namespace} and uses an underlying {@link Client} to communicate.\n *\n * Within each {@link Namespace}, you can also define arbitrary channels (called \"rooms\") that the {@link Socket} can\n * join and leave. That provides a convenient way to broadcast to a group of socket instances.\n *\n * @example\n * io.on(\"connection\", (socket) => {\n *   console.log(`socket ${socket.id} connected`);\n *\n *   // send an event to the client\n *   socket.emit(\"foo\", \"bar\");\n *\n *   socket.on(\"foobar\", () => {\n *     // an event was received from the client\n *   });\n *\n *   // join the room named \"room1\"\n *   socket.join(\"room1\");\n *\n *   // broadcast to everyone in the room named \"room1\"\n *   io.to(\"room1\").emit(\"hello\");\n *\n *   // upon disconnection\n *   socket.on(\"disconnect\", (reason) => {\n *     console.log(`socket ${socket.id} disconnected due to ${reason}`);\n *   });\n * });\n */\nclass Socket extends typed_events_1.StrictEventEmitter {\n    /**\n     * Interface to a `Client` for a given `Namespace`.\n     *\n     * @param {Namespace} nsp\n     * @param {Client} client\n     * @param {Object} auth\n     * @package\n     */\n    constructor(nsp, client, auth) {\n        super();\n        this.nsp = nsp;\n        this.client = client;\n        /**\n         * Additional information that can be attached to the Socket instance and which will be used in the\n         * {@link Server.fetchSockets()} method.\n         */\n        this.data = {};\n        /**\n         * Whether the socket is currently connected or not.\n         *\n         * @example\n         * io.use((socket, next) => {\n         *   console.log(socket.connected); // false\n         *   next();\n         * });\n         *\n         * io.on(\"connection\", (socket) => {\n         *   console.log(socket.connected); // true\n         * });\n         */\n        this.connected = false;\n        this.acks = new Map();\n        this.fns = [];\n        this.flags = {};\n        this.server = nsp.server;\n        this.adapter = this.nsp.adapter;\n        if (client.conn.protocol === 3) {\n            // @ts-ignore\n            this.id = nsp.name !== \"/\" ? nsp.name + \"#\" + client.id : client.id;\n        }\n        else {\n            this.id = base64id_1.default.generateId(); // don't reuse the Engine.IO id because it's sensitive information\n        }\n        this.handshake = this.buildHandshake(auth);\n    }\n    /**\n     * Builds the `handshake` BC object\n     *\n     * @private\n     */\n    buildHandshake(auth) {\n        return {\n            headers: this.request.headers,\n            time: new Date() + \"\",\n            address: this.conn.remoteAddress,\n            xdomain: !!this.request.headers.origin,\n            // @ts-ignore\n            secure: !!this.request.connection.encrypted,\n            issued: +new Date(),\n            url: this.request.url,\n            // @ts-ignore\n            query: this.request._query,\n            auth,\n        };\n    }\n    /**\n     * Emits to this client.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.emit(\"hello\", \"world\");\n     *\n     *   // all serializable datastructures are supported (no need to call JSON.stringify)\n     *   socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Buffer.from([6]) });\n     *\n     *   // with an acknowledgement from the client\n     *   socket.emit(\"hello\", \"world\", (val) => {\n     *     // ...\n     *   });\n     * });\n     *\n     * @return Always returns `true`.\n     */\n    emit(ev, ...args) {\n        if (exports.RESERVED_EVENTS.has(ev)) {\n            throw new Error(`\"${String(ev)}\" is a reserved event name`);\n        }\n        const data = [ev, ...args];\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: data,\n        };\n        // access last argument to see if it's an ACK callback\n        if (typeof data[data.length - 1] === \"function\") {\n            const id = this.nsp._ids++;\n            debug(\"emitting packet with ack id %d\", id);\n            this.registerAckCallback(id, data.pop());\n            packet.id = id;\n        }\n        const flags = Object.assign({}, this.flags);\n        this.flags = {};\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet, flags);\n        return true;\n    }\n    /**\n     * @private\n     */\n    registerAckCallback(id, ack) {\n        const timeout = this.flags.timeout;\n        if (timeout === undefined) {\n            this.acks.set(id, ack);\n            return;\n        }\n        const timer = setTimeout(() => {\n            debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n            this.acks.delete(id);\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks.set(id, (...args) => {\n            clearTimeout(timer);\n            ack.apply(this, [null, ...args]);\n        });\n    }\n    /**\n     * Targets a room when broadcasting.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // the “foo” event will be broadcast to all connected clients in the “room-101” room, except this socket\n     *   socket.to(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     *   // the code above is equivalent to:\n     *   io.to(\"room-101\").except(socket.id).emit(\"foo\", \"bar\");\n     *\n     *   // with an array of rooms (a client will be notified at most once)\n     *   socket.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     *   // with multiple chained calls\n     *   socket.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n     * });\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    to(room) {\n        return this.newBroadcastOperator().to(room);\n    }\n    /**\n     * Targets a room when broadcasting. Similar to `to()`, but might feel clearer in some cases:\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // disconnect all clients in the \"room-101\" room, except this socket\n     *   socket.in(\"room-101\").disconnectSockets();\n     * });\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    in(room) {\n        return this.newBroadcastOperator().in(room);\n    }\n    /**\n     * Excludes a room when broadcasting.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n     *   // and this socket\n     *   socket.except(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     *   // with an array of rooms\n     *   socket.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     *   // with multiple chained calls\n     *   socket.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n     * });\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    except(room) {\n        return this.newBroadcastOperator().except(room);\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.send(\"hello\");\n     *\n     *   // this is equivalent to\n     *   socket.emit(\"message\", \"hello\");\n     * });\n     *\n     * @return self\n     */\n    send(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Sends a `message` event. Alias of {@link send}.\n     *\n     * @return self\n     */\n    write(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param {Object} packet - packet object\n     * @param {Object} opts - options\n     * @private\n     */\n    packet(packet, opts = {}) {\n        packet.nsp = this.nsp.name;\n        opts.compress = false !== opts.compress;\n        this.client._packet(packet, opts);\n    }\n    /**\n     * Joins a room.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // join a single room\n     *   socket.join(\"room1\");\n     *\n     *   // join multiple rooms\n     *   socket.join([\"room1\", \"room2\"]);\n     * });\n     *\n     * @param {String|Array} rooms - room or array of rooms\n     * @return a Promise or nothing, depending on the adapter\n     */\n    join(rooms) {\n        debug(\"join room %s\", rooms);\n        return this.adapter.addAll(this.id, new Set(Array.isArray(rooms) ? rooms : [rooms]));\n    }\n    /**\n     * Leaves a room.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // leave a single room\n     *   socket.leave(\"room1\");\n     *\n     *   // leave multiple rooms\n     *   socket.leave(\"room1\").leave(\"room2\");\n     * });\n     *\n     * @param {String} room\n     * @return a Promise or nothing, depending on the adapter\n     */\n    leave(room) {\n        debug(\"leave room %s\", room);\n        return this.adapter.del(this.id, room);\n    }\n    /**\n     * Leave all rooms.\n     *\n     * @private\n     */\n    leaveAll() {\n        this.adapter.delAll(this.id);\n    }\n    /**\n     * Called by `Namespace` upon successful\n     * middleware execution (ie: authorization).\n     * Socket is added to namespace array before\n     * call to join, so adapters can access it.\n     *\n     * @private\n     */\n    _onconnect() {\n        debug(\"socket connected - writing packet\");\n        this.connected = true;\n        this.join(this.id);\n        if (this.conn.protocol === 3) {\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT });\n        }\n        else {\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: { sid: this.id } });\n        }\n    }\n    /**\n     * Called with each packet. Called by `Client`.\n     *\n     * @param {Object} packet\n     * @private\n     */\n    _onpacket(packet) {\n        debug(\"got packet %j\", packet);\n        switch (packet.type) {\n            case socket_io_parser_1.PacketType.EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n        }\n    }\n    /**\n     * Called upon event packet.\n     *\n     * @param {Packet} packet - packet object\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        debug(\"emitting event %j\", args);\n        if (null != packet.id) {\n            debug(\"attaching ack callback to event\");\n            args.push(this.ack(packet.id));\n        }\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        this.dispatch(args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @param {Number} id - packet id\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function () {\n            // prevent double callbacks\n            if (sent)\n                return;\n            const args = Array.prototype.slice.call(arguments);\n            debug(\"sending ack %j\", args);\n            self.packet({\n                id: id,\n                type: socket_io_parser_1.PacketType.ACK,\n                data: args,\n            });\n            sent = true;\n        };\n    }\n    /**\n     * Called upon ack packet.\n     *\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks.get(packet.id);\n        if (\"function\" == typeof ack) {\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\n            ack.apply(this, packet.data);\n            this.acks.delete(packet.id);\n        }\n        else {\n            debug(\"bad ack %s\", packet.id);\n        }\n    }\n    /**\n     * Called upon client disconnect packet.\n     *\n     * @private\n     */\n    ondisconnect() {\n        debug(\"got disconnect packet\");\n        this._onclose(\"client namespace disconnect\");\n    }\n    /**\n     * Handles a client error.\n     *\n     * @private\n     */\n    _onerror(err) {\n        if (this.listeners(\"error\").length) {\n            this.emitReserved(\"error\", err);\n        }\n        else {\n            console.error(\"Missing error handler on `socket`.\");\n            console.error(err.stack);\n        }\n    }\n    /**\n     * Called upon closing. Called by `Client`.\n     *\n     * @param {String} reason\n     * @throw {Error} optional error object\n     *\n     * @private\n     */\n    _onclose(reason) {\n        if (!this.connected)\n            return this;\n        debug(\"closing socket - reason %s\", reason);\n        this.emitReserved(\"disconnecting\", reason);\n        this._cleanup();\n        this.nsp._remove(this);\n        this.client._remove(this);\n        this.connected = false;\n        this.emitReserved(\"disconnect\", reason);\n        return;\n    }\n    /**\n     * Makes the socket leave all the rooms it was part of and prevents it from joining any other room\n     *\n     * @private\n     */\n    _cleanup() {\n        this.leaveAll();\n        this.join = noop;\n    }\n    /**\n     * Produces an `error` packet.\n     *\n     * @param {Object} err - error object\n     *\n     * @private\n     */\n    _error(err) {\n        this.packet({ type: socket_io_parser_1.PacketType.CONNECT_ERROR, data: err });\n    }\n    /**\n     * Disconnects this client.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // disconnect this socket (the connection might be kept alive for other namespaces)\n     *   socket.disconnect();\n     *\n     *   // disconnect this socket and close the underlying connection\n     *   socket.disconnect(true);\n     * })\n     *\n     * @param {Boolean} close - if `true`, closes the underlying connection\n     * @return self\n     */\n    disconnect(close = false) {\n        if (!this.connected)\n            return this;\n        if (close) {\n            this.client._disconnect();\n        }\n        else {\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\n            this._onclose(\"server namespace disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.compress(false).emit(\"hello\");\n     * });\n     *\n     * @param {Boolean} compress - if `true`, compresses the sending data\n     * @return {Socket} self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.volatile.emit(\"hello\"); // the client may or may not receive it\n     * });\n     *\n     * @return {Socket} self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to every sockets but the\n     * sender.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // the “foo” event will be broadcast to all connected clients, except this socket\n     *   socket.broadcast.emit(\"foo\", \"bar\");\n     * });\n     *\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    get broadcast() {\n        return this.newBroadcastOperator();\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   // the “foo” event will be broadcast to all connected clients on this node, except this socket\n     *   socket.local.emit(\"foo\", \"bar\");\n     * });\n     *\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    get local() {\n        return this.newBroadcastOperator().local;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the client:\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.timeout(5000).emit(\"my-event\", (err) => {\n     *     if (err) {\n     *       // the client did not acknowledge the event in the given delay\n     *     }\n     *   });\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Dispatch incoming event to socket listeners.\n     *\n     * @param {Array} event - event that will get emitted\n     * @private\n     */\n    dispatch(event) {\n        debug(\"dispatching an event %j\", event);\n        this.run(event, (err) => {\n            process.nextTick(() => {\n                if (err) {\n                    return this._onerror(err);\n                }\n                if (this.connected) {\n                    super.emitUntyped.apply(this, event);\n                }\n                else {\n                    debug(\"ignore packet received after disconnection\");\n                }\n            });\n        });\n    }\n    /**\n     * Sets up socket middleware.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.use(([event, ...args], next) => {\n     *     if (isUnauthorized(event)) {\n     *       return next(new Error(\"unauthorized event\"));\n     *     }\n     *     // do not forget to call next\n     *     next();\n     *   });\n     *\n     *   socket.on(\"error\", (err) => {\n     *     if (err && err.message === \"unauthorized event\") {\n     *       socket.disconnect();\n     *     }\n     *   });\n     * });\n     *\n     * @param {Function} fn - middleware function (event, next)\n     * @return {Socket} self\n     */\n    use(fn) {\n        this.fns.push(fn);\n        return this;\n    }\n    /**\n     * Executes the middleware for an incoming event.\n     *\n     * @param {Array} event - event that will get emitted\n     * @param {Function} fn - last fn call in the middleware\n     * @private\n     */\n    run(event, fn) {\n        const fns = this.fns.slice(0);\n        if (!fns.length)\n            return fn(null);\n        function run(i) {\n            fns[i](event, function (err) {\n                // upon error, short-circuit\n                if (err)\n                    return fn(err);\n                // if no middleware left, summon callback\n                if (!fns[i + 1])\n                    return fn(null);\n                // go on to next\n                run(i + 1);\n            });\n        }\n        run(0);\n    }\n    /**\n     * Whether the socket is currently disconnected\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * A reference to the request that originated the underlying Engine.IO Socket.\n     */\n    get request() {\n        return this.client.request;\n    }\n    /**\n     * A reference to the underlying Client transport connection (Engine.IO Socket object).\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   console.log(socket.conn.transport.name); // prints \"polling\" or \"websocket\"\n     *\n     *   socket.conn.once(\"upgrade\", () => {\n     *     console.log(socket.conn.transport.name); // prints \"websocket\"\n     *   });\n     * });\n     */\n    get conn() {\n        return this.client.conn;\n    }\n    /**\n     * Returns the rooms the socket is currently in.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   console.log(socket.rooms); // Set { <socket.id> }\n     *\n     *   socket.join(\"room1\");\n     *\n     *   console.log(socket.rooms); // Set { <socket.id>, \"room1\" }\n     * });\n     */\n    get rooms() {\n        return this.adapter.socketRooms(this.id) || new Set();\n    }\n    /**\n     * Adds a listener that will be fired when any event is received. The event name is passed as the first argument to\n     * the callback.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.onAny((event, ...args) => {\n     *     console.log(`got event ${event}`);\n     *   });\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is received. The event name is passed as the first argument to\n     * the callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is received.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   const catchAllListener = (event, ...args) => {\n     *     console.log(`got event ${event}`);\n     *   }\n     *\n     *   socket.onAny(catchAllListener);\n     *\n     *   // remove a specific listener\n     *   socket.offAny(catchAllListener);\n     *\n     *   // or remove all listeners\n     *   socket.offAny();\n     * });\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is sent. The event name is passed as the first argument to\n     * the callback.\n     *\n     * Note: acknowledgements sent to the client are not included.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.onAnyOutgoing((event, ...args) => {\n     *     console.log(`sent event ${event}`);\n     *   });\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   socket.prependAnyOutgoing((event, ...args) => {\n     *     console.log(`sent event ${event}`);\n     *   });\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is sent.\n     *\n     * @example\n     * io.on(\"connection\", (socket) => {\n     *   const catchAllListener = (event, ...args) => {\n     *     console.log(`sent event ${event}`);\n     *   }\n     *\n     *   socket.onAnyOutgoing(catchAllListener);\n     *\n     *   // remove a specific listener\n     *   socket.offAnyOutgoing(catchAllListener);\n     *\n     *   // or remove all listeners\n     *   socket.offAnyOutgoing();\n     * });\n     *\n     * @param listener - the catch-all listener\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent (emit or broadcast)\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n    newBroadcastOperator() {\n        const flags = Object.assign({}, this.flags);\n        this.flags = {};\n        return new broadcast_operator_1.BroadcastOperator(this.adapter, new Set(), new Set([this.id]), flags);\n    }\n}\nexports.Socket = Socket;\n"]},"metadata":{},"sourceType":"script"}