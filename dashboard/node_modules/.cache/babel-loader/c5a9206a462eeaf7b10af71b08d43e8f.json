{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _slicedToArray from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\n\nvar _jsxFileName = \"D:\\\\fl-carla\\\\src\\\\components\\\\tj\\\\BatteryStackedChart\\\\BatteryStackedChart.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"D:\\\\fl-carla\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useTheme } from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport * as echarts from 'echarts';\nimport { BaseChart } from '@app/components/common/charts/BaseChart';\nimport { Card } from '@app/components/common/Card/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var BatteryStackedChart = function BatteryStackedChart() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      chartData = _useState2[0],\n      setChartData = _useState2[1];\n\n  var theme = useTheme();\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var chartColors = theme.colors.charts;\n  useEffect(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios('data.json');\n\n              case 2:\n                result = _context.sent;\n                setChartData(result.data);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, []);\n  var option = {\n    // ... // 여기서 option을 설정하는 코드를 작성합니다.\n    series: chartData.map(function (data) {\n      return {\n        name: t(\"charts.\".concat(data.name)),\n        type: 'line',\n        stack: 'Total',\n        smooth: true,\n        lineStyle: {\n          width: 0\n        },\n        showSymbol: false,\n        areaStyle: {\n          opacity: 0.8,\n          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n            offset: 0,\n            color: chartColors.color1\n          }, {\n            offset: 1,\n            color: chartColors.color1Tint\n          }])\n        },\n        emphasis: {\n          focus: 'series'\n        },\n        data: data.values\n      };\n    })\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    padding: \"0 0 1.875rem\",\n    title: t('charts.gradientLabel'),\n    children: /*#__PURE__*/_jsxDEV(BaseChart, {\n      option: option\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(BatteryStackedChart, \"l5Sm+6dCB3E0WCYADfAyBDlRkRI=\", false, function () {\n  return [useTheme, useTranslation];\n});\n\n_c = BatteryStackedChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BatteryStackedChart\");","map":{"version":3,"sources":["D:/fl-carla/src/components/tj/BatteryStackedChart/BatteryStackedChart.tsx"],"names":["React","useEffect","useState","axios","useTheme","useTranslation","echarts","BaseChart","Card","BatteryStackedChart","chartData","setChartData","theme","t","chartColors","colors","charts","fetchData","result","data","option","series","map","name","type","stack","smooth","lineStyle","width","showSymbol","areaStyle","opacity","color","graphic","LinearGradient","offset","color1","color1Tint","emphasis","focus","values"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAO,KAAKC,OAAZ,MAAyB,SAAzB;AACA,SAASC,SAAT,QAA0B,yCAA1B;AACA,SAASC,IAAT,QAAqB,kCAArB;;AAEA,OAAO,IAAMC,mBAA6B,GAAG,SAAhCA,mBAAgC,GAAM;AAAA;;AACjD,kBAAkCP,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOQ,SAAP;AAAA,MAAkBC,YAAlB;;AACA,MAAMC,KAAK,GAAGR,QAAQ,EAAtB;;AACA,wBAAcC,cAAc,EAA5B;AAAA,MAAQQ,CAAR,mBAAQA,CAAR;;AAEA,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAaC,MAAjC;AAEAf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMgB,SAAS;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACKd,KAAK,CACxB,WADwB,CADV;;AAAA;AACVe,gBAAAA,MADU;AAKhBP,gBAAAA,YAAY,CAACO,MAAM,CAACC,IAAR,CAAZ;;AALgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAATF,SAAS;AAAA;AAAA;AAAA,OAAf;;AAQAA,IAAAA,SAAS;AACV,GAVQ,EAUN,EAVM,CAAT;AAYA,MAAMG,MAAM,GAAG;AACb;AACAC,IAAAA,MAAM,EAAEX,SAAS,CAACY,GAAV,CAAc,UAACH,IAAD;AAAA,aAAW;AAC/BI,QAAAA,IAAI,EAAEV,CAAC,kBAAWM,IAAI,CAACI,IAAhB,EADwB;AAE/BC,QAAAA,IAAI,EAAE,MAFyB;AAG/BC,QAAAA,KAAK,EAAE,OAHwB;AAI/BC,QAAAA,MAAM,EAAE,IAJuB;AAK/BC,QAAAA,SAAS,EAAE;AACTC,UAAAA,KAAK,EAAE;AADE,SALoB;AAQ/BC,QAAAA,UAAU,EAAE,KARmB;AAS/BC,QAAAA,SAAS,EAAE;AACTC,UAAAA,OAAO,EAAE,GADA;AAETC,UAAAA,KAAK,EAAE,IAAI1B,OAAO,CAAC2B,OAAR,CAAgBC,cAApB,CAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CACpD;AACEC,YAAAA,MAAM,EAAE,CADV;AAEEH,YAAAA,KAAK,EAAElB,WAAW,CAACsB;AAFrB,WADoD,EAKpD;AACED,YAAAA,MAAM,EAAE,CADV;AAEEH,YAAAA,KAAK,EAAElB,WAAW,CAACuB;AAFrB,WALoD,CAA/C;AAFE,SAToB;AAsB/BC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,KAAK,EAAE;AADC,SAtBqB;AAyB/BpB,QAAAA,IAAI,EAAEA,IAAI,CAACqB;AAzBoB,OAAX;AAAA,KAAd;AAFK,GAAf;AA+BA,sBACE,QAAC,IAAD;AAAM,IAAA,OAAO,EAAC,cAAd;AAA6B,IAAA,KAAK,EAAE3B,CAAC,CAAC,sBAAD,CAArC;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,MAAM,EAAEO;AAAnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAvDM;;GAAMX,mB;UAEGL,Q,EACAC,c;;;KAHHI,mB","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useTheme } from 'styled-components';\r\nimport { useTranslation } from 'react-i18next';\r\nimport * as echarts from 'echarts';\r\nimport { BaseChart } from '@app/components/common/charts/BaseChart';\r\nimport { Card } from '@app/components/common/Card/Card';\r\n\r\nexport const BatteryStackedChart: React.FC = () => {\r\n  const [chartData, setChartData] = useState([]);\r\n  const theme = useTheme();\r\n  const { t } = useTranslation();\r\n\r\n  const chartColors = theme.colors.charts;\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios(\r\n        'data.json',\r\n      );\r\n\r\n      setChartData(result.data);\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const option = {\r\n    // ... // 여기서 option을 설정하는 코드를 작성합니다.\r\n    series: chartData.map((data) => ({\r\n      name: t(`charts.${data.name}`),\r\n      type: 'line',\r\n      stack: 'Total',\r\n      smooth: true,\r\n      lineStyle: {\r\n        width: 0,\r\n      },\r\n      showSymbol: false,\r\n      areaStyle: {\r\n        opacity: 0.8,\r\n        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n          {\r\n            offset: 0,\r\n            color: chartColors.color1,\r\n          },\r\n          {\r\n            offset: 1,\r\n            color: chartColors.color1Tint,\r\n          },\r\n        ]),\r\n      },\r\n      emphasis: {\r\n        focus: 'series',\r\n      },\r\n      data: data.values,\r\n    })),\r\n  };\r\n\r\n  return (\r\n    <Card padding=\"0 0 1.875rem\" title={t('charts.gradientLabel')}>\r\n      <BaseChart option={option} />\r\n    </Card>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}